// Generated by stratus_hls 19.10-p100  (91500.011111)
// Thu Jan 28 15:15:59 2021
// from mac.cpp

`timescale 1ps / 1ps

      
module mac(clk, rstn, init, clear, src_vld, src_0, src_1, acc, src_1_1d);

      input clk;
      input rstn;
      input init;
      input clear;
      input src_vld;
      input [9:0] src_0;
      input [7:0] src_1;
      output [31:0] acc;
      reg [31:0] acc;
      output [7:0] src_1_1d;
      reg [7:0] src_1_1d;
      /*signed*/wire[17:0] mac_Mul_10Sx8S_18S_0_6_out1;
      wire mac_Or_1Ux1U_1U_4_5_out1;
      reg[17:0] mac_N_Mux_18_2_3_4_7_out1;
      reg[31:0] mac_N_Mux_32_2_5_4_3_out1;
      reg clear_1d;
      reg[31:0] mac_N_Mux_32_2_5_4_2_out1;
      reg src_vld_1d;
      /*signed*/reg[17:0] mul;
      /*signed*/wire[31:0] mac_Add_32Sx18S_32S_1_1_out1;
      reg[31:0] mac_Muxi0s32u1_4_4_out1;

         // rtl_process:mac/drive_acc
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_acc
         // at: mac.h:52:7
         // at: mac.h:60:7
         always @(posedge clk or negedge rstn)
          begin :drive_acc
            if (rstn == 1'b0) begin
               // op:_accumulator/OP0
               acc <= 32'd0000000000;
            end
            else begin
               // op:_accumulator/OP11
               acc <= mac_Muxi0s32u1_4_4_out1;
            end
         end

         // rtl_instance:mac/mac_Add_32Sx18S_32S_1_1
         // Resource=mac_Add_32Sx18S_32S_1, Function=add : Inputs=32S,18S Outputs=32S
         // Implements 1 operation(s)
         // at: mac.h:60:24
         assign mac_Add_32Sx18S_32S_1_1_out1 = acc + {{ 14 {mul[17]}}, mul};

         // rtl_instance:mac/mac_N_Mux_32_2_5_4
         always @(acc or src_vld_1d or mac_Add_32Sx18S_32S_1_1_out1)
          begin :mac_N_Mux_32_2_5_4_2
            if (src_vld_1d) begin
               mac_N_Mux_32_2_5_4_2_out1 = mac_Add_32Sx18S_32S_1_1_out1;
            end
            else begin
               mac_N_Mux_32_2_5_4_2_out1 = acc;
            end
         end

         // rtl_instance:mac/mac_N_Mux_32_2_5_4
         always @(clear_1d or mul or mac_N_Mux_32_2_5_4_2_out1)
          begin :mac_N_Mux_32_2_5_4_3
            if (clear_1d) begin
               mac_N_Mux_32_2_5_4_3_out1 = {{ 14 {mul[17]}}, mul};
            end
            else begin
               mac_N_Mux_32_2_5_4_3_out1 = mac_N_Mux_32_2_5_4_2_out1;
            end
         end

         // rtl_instance:mac/mac_Muxi0s32u1_4
         always @(init or mac_N_Mux_32_2_5_4_3_out1)
          begin :mac_Muxi0s32u1_4_4
            if (init) begin
               mac_Muxi0s32u1_4_4_out1 = 32'd0000000000;
            end
            else begin
               mac_Muxi0s32u1_4_4_out1 = mac_N_Mux_32_2_5_4_3_out1;
            end
         end

         // rtl_process:mac/drive_mul
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_mul
         // at: mac.h:60:13
         // at: mac.h:40:7
         // at: mac.h:46:7
         always @(posedge clk or negedge rstn)
          begin :drive_mul
            if (rstn == 1'b0) begin
               // op:_multiplier/OP22
               mul <= 18'd000000;
            end
            else begin
               // op:_multiplier/OP32
               mul <= mac_N_Mux_18_2_3_4_7_out1;
            end
         end

         // rtl_instance:mac/mac_Or_1Ux1U_1U_4_5
         // Resource=mac_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: mac.h:43:10
         assign mac_Or_1Ux1U_1U_4_5_out1 = clear | src_vld;

         // rtl_instance:mac/mac_Mul_10Sx8S_18S_0_6
         // Resource=mac_Mul_10Sx8S_18S_0, Function=mul : Inputs=10S,8S Outputs=18S
         // Implements 1 operation(s)
         // at: mac.h:44:26
         assign mac_Mul_10Sx8S_18S_0_6_out1 = {{ 8 {src_0[9]}}, src_0}*{{ 10 {src_1[7]}}, src_1};

         // rtl_instance:mac/mac_N_Mux_18_2_3_4
         always @(mul or mac_Or_1Ux1U_1U_4_5_out1 or mac_Mul_10Sx8S_18S_0_6_out1)
          begin :mac_N_Mux_18_2_3_4_7
            if (mac_Or_1Ux1U_1U_4_5_out1) begin
               mac_N_Mux_18_2_3_4_7_out1 = mac_Mul_10Sx8S_18S_0_6_out1;
            end
            else begin
               mac_N_Mux_18_2_3_4_7_out1 = mul;
            end
         end

         // rtl_process:mac/drive_src_1_1d
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_src_1_1d
         // at: mac.h:27:2
         // at: mac.h:32:2
         always @(posedge clk or negedge rstn)
          begin :drive_src_1_1d
            if (rstn == 1'b0) begin
               // op:_delays/OP40
               src_1_1d <= 8'd000;
            end
            else begin
               // op:_delays/OP48
               src_1_1d <= src_1;
            end
         end

         // rtl_process:mac/drive_clear_1d
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_clear_1d
         // at: mac.h:56:14
         // at: mac.h:29:9
         // at: mac.h:34:9
         always @(posedge clk or negedge rstn)
          begin :drive_clear_1d
            if (rstn == 1'b0) begin
               // op:_delays/OP42
               clear_1d <= 1'd0;
            end
            else begin
               // op:_delays/OP46
               clear_1d <= clear;
            end
         end

         // rtl_process:mac/drive_src_vld_1d
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_src_vld_1d
         // at: mac.h:59:14
         // at: mac.h:28:9
         // at: mac.h:33:9
         always @(posedge clk or negedge rstn)
          begin :drive_src_vld_1d
            if (rstn == 1'b0) begin
               // op:_delays/OP41
               src_vld_1d <= 1'd0;
            end
            else begin
               // op:_delays/OP47
               src_vld_1d <= src_vld;
            end
         end


endmodule


