// Generated by stratus_hls 19.10-p100  (91500.011111)
// Mon Jan 11 20:25:39 2021
// from sfu_out_buff.cpp

`timescale 1ps / 1ps

      
module sfu_out_buff(clk, rstn, enable, learned_clip_en, in0_data_0, in0_data_1, in0_data_2, in0_data_3, in0_data_4, in0_data_5, in0_data_6, in0_data_7, in0_data_valid, in1_data_0, in1_data_1, in1_data_2, in1_data_3, in1_data_4, in1_data_5, in1_data_6, in1_data_7, in1_data_valid, out_data, out_data_valid);

      input clk;
      input rstn;
      input enable;
      input learned_clip_en;
      input [31:0] in0_data_0;
      input [31:0] in0_data_1;
      input [31:0] in0_data_2;
      input [31:0] in0_data_3;
      input [31:0] in0_data_4;
      input [31:0] in0_data_5;
      input [31:0] in0_data_6;
      input [31:0] in0_data_7;
      input in0_data_valid;
      input [31:0] in1_data_0;
      input [31:0] in1_data_1;
      input [31:0] in1_data_2;
      input [31:0] in1_data_3;
      input [31:0] in1_data_4;
      input [31:0] in1_data_5;
      input [31:0] in1_data_6;
      input [31:0] in1_data_7;
      input in1_data_valid;
      output [319:0] out_data;
      reg [319:0] out_data;
      output out_data_valid;
      reg out_data_valid;
      wire sfu_out_buff_And_1Ux1U_1U_4_8_out1;
      reg[1:0] sfu_out_buff_MuxAdd2i1u2i0u1_4_9_out1;
      wire sfu_out_buff_And_1Ux1U_1U_4_6_out1;
      wire sfu_out_buff_Or_1Ux1U_1U_4_5_out1;
      reg[1:0] data_cnt;
      wire sfu_out_buff_Eqi3u2_4_4_out1;
      wire sfu_out_buff_Not_1U_1U_4_3_out1;
      wire sfu_out_buff_And_1Ux1U_1U_4_7_out1;
      reg[319:0] sfu_out_buff_N_MuxB_320_2_0_4_1_out1;
      reg[79:0] r_data;
      wire[319:0] sfu_out_buff_N_MuxB_320_2_0_4_1_in2;
      reg[255:0] t_data;
      wire[256:0] sfu_out_buff_N_MuxB_320_2_0_4_1_in3;
      reg[319:0] sfu_out_buff_N_MuxB_320_2_8_4_2_out1;
      wire r_data_valid;

         // rtl_process:sfu_out_buff/drive_r_data_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_data_valid
         // at: sfu_out_buff.h:76:44
         // at: sfu_out_buff.h:61:15
         assign r_data_valid = 1'd0;

         // rtl_process:sfu_out_buff/drive_out_data
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_out_data
         // at: sfu_out_buff.h:84:7
         // at: sfu_out_buff.h:91:7
         always @(posedge clk or negedge rstn)
          begin :drive_out_data
            if (rstn == 1'b0) begin
               // op:_out_data/OP0
               out_data <= 320'd0;
            end
            else begin
               // op:_out_data/OP10
               out_data <= sfu_out_buff_N_MuxB_320_2_8_4_2_out1;
            end
         end

         // rtl_process:sfu_out_buff/drive_sfu_out_buff_N_MuxB_320_2_0_4_1_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_sfu_out_buff_N_MuxB_320_2_0_4_1_in3
         // at: sfu_out_buff.h:91:24
         assign sfu_out_buff_N_MuxB_320_2_0_4_1_in3 = {1'b0, t_data};

         // rtl_process:sfu_out_buff/drive_sfu_out_buff_N_MuxB_320_2_0_4_1_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_sfu_out_buff_N_MuxB_320_2_0_4_1_in2
         // at: sfu_out_buff.h:88:32
         assign sfu_out_buff_N_MuxB_320_2_0_4_1_in2 = {r_data, out_data[319:80]};

         // rtl_instance:sfu_out_buff/sfu_out_buff_N_MuxB_320_2_0_4
         always @(learned_clip_en or sfu_out_buff_N_MuxB_320_2_0_4_1_in3 or sfu_out_buff_N_MuxB_320_2_0_4_1_in2)
          begin :sfu_out_buff_N_MuxB_320_2_0_4_1
            if (learned_clip_en) begin
               sfu_out_buff_N_MuxB_320_2_0_4_1_out1 = sfu_out_buff_N_MuxB_320_2_0_4_1_in2;
            end
            else begin
               sfu_out_buff_N_MuxB_320_2_0_4_1_out1 = {63'b000000000000000000000000000000000000000000000000000000000000000, sfu_out_buff_N_MuxB_320_2_0_4_1_in3};
            end
         end

         // rtl_instance:sfu_out_buff/sfu_out_buff_N_MuxB_320_2_8_4
         always @(enable or sfu_out_buff_N_MuxB_320_2_0_4_1_out1)
          begin :sfu_out_buff_N_MuxB_320_2_8_4_2
            if (enable) begin
               sfu_out_buff_N_MuxB_320_2_8_4_2_out1 = sfu_out_buff_N_MuxB_320_2_0_4_1_out1;
            end
            else begin
               sfu_out_buff_N_MuxB_320_2_8_4_2_out1 = 320'd0;
            end
         end

         // rtl_process:sfu_out_buff/drive_out_data_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_out_data_valid
         // at: sfu_out_buff.h:72:7
         // at: sfu_out_buff.h:78:7
         always @(posedge clk or negedge rstn)
          begin :drive_out_data_valid
            if (rstn == 1'b0) begin
               // op:_out_data_valid/OP16
               out_data_valid <= 1'd0;
            end
            else begin
               // op:_out_data_valid/OP26
               out_data_valid <= sfu_out_buff_And_1Ux1U_1U_4_7_out1;
            end
         end

         // rtl_instance:sfu_out_buff/sfu_out_buff_Not_1U_1U_4_3
         // Resource=sfu_out_buff_Not_1U_1U_4, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: sfu_out_buff.h:75:10
         assign sfu_out_buff_Not_1U_1U_4_3_out1 = !learned_clip_en;

         // rtl_instance:sfu_out_buff/sfu_out_buff_Eqi3u2_4_4
         // Resource=sfu_out_buff_Eqi3u2_4, Function=eq : Inputs=2 Outputs=1
         // Implements 1 operation(s)
         // at: sfu_out_buff.h:76:62
         assign sfu_out_buff_Eqi3u2_4_4_out1 = data_cnt == 2'd3;

         // rtl_instance:sfu_out_buff/sfu_out_buff_Or_1Ux1U_1U_4_5
         // Resource=sfu_out_buff_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: sfu_out_buff.h:75:10
         assign sfu_out_buff_Or_1Ux1U_1U_4_5_out1 = sfu_out_buff_Eqi3u2_4_4_out1 | sfu_out_buff_Not_1U_1U_4_3_out1;

         // rtl_instance:sfu_out_buff/sfu_out_buff_And_1Ux1U_1U_4_6
         // Resource=sfu_out_buff_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: sfu_out_buff.h:76:44
         assign sfu_out_buff_And_1Ux1U_1U_4_6_out1 = sfu_out_buff_Or_1Ux1U_1U_4_5_out1 & r_data_valid;

         // rtl_instance:sfu_out_buff/sfu_out_buff_And_1Ux1U_1U_4_7
         // Resource=sfu_out_buff_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: sfu_out_buff.h:73:10
         assign sfu_out_buff_And_1Ux1U_1U_4_7_out1 = sfu_out_buff_And_1Ux1U_1U_4_6_out1 & enable;

         // rtl_process:sfu_out_buff/drive_data_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_cnt
         // at: sfu_out_buff.h:76:47
         // at: sfu_out_buff.h:60:7
         // at: sfu_out_buff.h:66:7
         always @(posedge clk or negedge rstn)
          begin :drive_data_cnt
            if (rstn == 1'b0) begin
               // op:_data_cnt/OP35
               data_cnt <= 2'd0;
            end
            else begin
               // op:_data_cnt/OP42
               data_cnt <= sfu_out_buff_MuxAdd2i1u2i0u1_4_9_out1;
            end
         end

         // rtl_instance:sfu_out_buff/sfu_out_buff_And_1Ux1U_1U_4_8
         // Resource=sfu_out_buff_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: sfu_out_buff.h:61:15
         assign sfu_out_buff_And_1Ux1U_1U_4_8_out1 = enable & r_data_valid;

         // rtl_instance:sfu_out_buff/sfu_out_buff_MuxAdd2i1u2i0u1_4
         always @(data_cnt or sfu_out_buff_And_1Ux1U_1U_4_8_out1)
          begin :sfu_out_buff_MuxAdd2i1u2i0u1_4_9
            if (sfu_out_buff_And_1Ux1U_1U_4_8_out1) begin
               sfu_out_buff_MuxAdd2i1u2i0u1_4_9_out1 = data_cnt + 2'd1;
            end
            else begin
               sfu_out_buff_MuxAdd2i1u2i0u1_4_9_out1 = 2'd0;
            end
         end

         // rtl_process:sfu_out_buff/drive_t_data
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_t_data
         // at: sfu_out_buff.h:91:26
         // at: sfu_out_buff.h:45:7
         // at: sfu_out_buff.h:47:7
         // at: sfu_out_buff.h:53:7
         always @(posedge clk or negedge rstn)
          begin :drive_t_data
            if (rstn == 1'b0) begin
               // op:_t_data/OP47
               t_data <= 256'd0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (learned_clip_en) begin
                     end
                     else begin
                        // op:_t_data/OP60
                        t_data <= {in1_data_7, {in1_data_6, {in1_data_5, {in1_data_4, {in1_data_3, {in1_data_2, {in1_data_1, in1_data_0}}}}}}};
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_t_data/OP61
                     t_data <= 256'd0;
                  end
                  
               endcase

            end
         end

         // rtl_process:sfu_out_buff/drive_r_data
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_r_data
         // at: sfu_out_buff.h:88:19
         // at: sfu_out_buff.h:30:7
         // at: sfu_out_buff.h:32:7
         // at: sfu_out_buff.h:38:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_data
            if (rstn == 1'b0) begin
               // op:_r_data/OP62
               r_data <= 80'd0000000000000000000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (learned_clip_en) begin
                        // op:_r_data/OP75
                        r_data <= {in0_data_7[9:0], {in0_data_6[9:0], {in0_data_5[9:0], {in0_data_4[9:0], {in0_data_3[9:0], {in0_data_2[9:0], {in0_data_1[9:0], in0_data_0[9:0]}}}}}}};
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_r_data/OP76
                     r_data <= 80'd0000000000000000000000000;
                  end
                  
               endcase

            end
         end


endmodule


