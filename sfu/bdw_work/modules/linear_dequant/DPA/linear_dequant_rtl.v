// Generated by stratus_hls 19.10-p100  (91500.011111)
// Thu Dec 31 15:13:16 2020
// from linear_dequant.cpp

`timescale 1ps / 1ps

      
module linear_dequant(clk, rstn, enable, src_valid, src_man_0, src_man_1, src_man_2, src_man_3, src_man_4, src_man_5, src_man_6, src_man_7, src_exp_0, src_exp_1, src_exp_2, src_exp_3, src_exp_4, src_exp_5, src_exp_6, src_exp_7, src_sign_0, src_sign_1, src_sign_2, src_sign_3, src_sign_4, src_sign_5, src_sign_6, src_sign_7, divisor_man, divisor_exp, divisor_sign, dst_valid, dst_man_0, dst_man_1, dst_man_2, dst_man_3, dst_man_4, dst_man_5, dst_man_6, dst_man_7, dst_exp_0, dst_exp_1, dst_exp_2
          , dst_exp_3, dst_exp_4, dst_exp_5, dst_exp_6, dst_exp_7, dst_sign_0, dst_sign_1, dst_sign_2, dst_sign_3, dst_sign_4, dst_sign_5, dst_sign_6, dst_sign_7);

      input clk;
      input rstn;
      input enable;
      input src_valid;
      input [22:0] src_man_0;
      input [22:0] src_man_1;
      input [22:0] src_man_2;
      input [22:0] src_man_3;
      input [22:0] src_man_4;
      input [22:0] src_man_5;
      input [22:0] src_man_6;
      input [22:0] src_man_7;
      input [7:0] src_exp_0;
      input [7:0] src_exp_1;
      input [7:0] src_exp_2;
      input [7:0] src_exp_3;
      input [7:0] src_exp_4;
      input [7:0] src_exp_5;
      input [7:0] src_exp_6;
      input [7:0] src_exp_7;
      input src_sign_0;
      input src_sign_1;
      input src_sign_2;
      input src_sign_3;
      input src_sign_4;
      input src_sign_5;
      input src_sign_6;
      input src_sign_7;
      input [22:0] divisor_man;
      input [7:0] divisor_exp;
      input divisor_sign;
      output dst_valid;
      reg dst_valid;
      output [22:0] dst_man_0;
      reg [22:0] dst_man_0;
      output [22:0] dst_man_1;
      reg [22:0] dst_man_1;
      output [22:0] dst_man_2;
      reg [22:0] dst_man_2;
      output [22:0] dst_man_3;
      reg [22:0] dst_man_3;
      output [22:0] dst_man_4;
      reg [22:0] dst_man_4;
      output [22:0] dst_man_5;
      reg [22:0] dst_man_5;
      output [22:0] dst_man_6;
      reg [22:0] dst_man_6;
      output [22:0] dst_man_7;
      reg [22:0] dst_man_7;
      output [7:0] dst_exp_0;
      reg [7:0] dst_exp_0;
      output [7:0] dst_exp_1;
      reg [7:0] dst_exp_1;
      output [7:0] dst_exp_2;
      reg [7:0] dst_exp_2;
      output [7:0] dst_exp_3;
      reg [7:0] dst_exp_3;
      output [7:0] dst_exp_4;
      reg [7:0] dst_exp_4;
      output [7:0] dst_exp_5;
      reg [7:0] dst_exp_5;
      output [7:0] dst_exp_6;
      reg [7:0] dst_exp_6;
      output [7:0] dst_exp_7;
      reg [7:0] dst_exp_7;
      output dst_sign_0;
      reg dst_sign_0;
      output dst_sign_1;
      reg dst_sign_1;
      output dst_sign_2;
      reg dst_sign_2;
      output dst_sign_3;
      reg dst_sign_3;
      output dst_sign_4;
      reg dst_sign_4;
      output dst_sign_5;
      reg dst_sign_5;
      output dst_sign_6;
      reg dst_sign_6;
      output dst_sign_7;
      reg dst_sign_7;
      reg linear_dequant_N_Muxb_1_2_0_4_1_out1;
      wire[22:0] div_result_man_0;
      wire[7:0] div_result_exp_0;
      wire div_result_sign_0;
      wire div_valid_0;
      wire[22:0] div_result_man_1;
      wire[7:0] div_result_exp_1;
      wire div_result_sign_1;
      wire div_valid_1;
      wire[22:0] div_result_man_2;
      wire[7:0] div_result_exp_2;
      wire div_result_sign_2;
      wire div_valid_2;
      wire[22:0] div_result_man_3;
      wire[7:0] div_result_exp_3;
      wire div_result_sign_3;
      wire div_valid_3;
      wire[22:0] div_result_man_4;
      wire[7:0] div_result_exp_4;
      wire div_result_sign_4;
      wire div_valid_4;
      wire[22:0] div_result_man_5;
      wire[7:0] div_result_exp_5;
      wire div_result_sign_5;
      wire div_valid_5;
      wire[22:0] div_result_man_6;
      wire[7:0] div_result_exp_6;
      wire div_result_sign_6;
      wire div_valid_6;
      wire[22:0] div_result_man_7;
      wire[7:0] div_result_exp_7;
      wire div_result_sign_7;
      wire div_valid_7;

         // rtl_instance:linear_dequant/u_fp_div_7
         fp_div u_fp_div_7(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_7 ),
                  .a_exp( src_exp_7 ),
                  .a_sign( src_sign_7 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_7 ),
                  .r_exp( div_result_exp_7 ),
                  .r_sign( div_result_sign_7 ),
                  .dst_valid( div_valid_7 )
                );

         // rtl_instance:linear_dequant/u_fp_div_6
         fp_div u_fp_div_6(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_6 ),
                  .a_exp( src_exp_6 ),
                  .a_sign( src_sign_6 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_6 ),
                  .r_exp( div_result_exp_6 ),
                  .r_sign( div_result_sign_6 ),
                  .dst_valid( div_valid_6 )
                );

         // rtl_instance:linear_dequant/u_fp_div_5
         fp_div u_fp_div_5(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_5 ),
                  .a_exp( src_exp_5 ),
                  .a_sign( src_sign_5 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_5 ),
                  .r_exp( div_result_exp_5 ),
                  .r_sign( div_result_sign_5 ),
                  .dst_valid( div_valid_5 )
                );

         // rtl_instance:linear_dequant/u_fp_div_4
         fp_div u_fp_div_4(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_4 ),
                  .a_exp( src_exp_4 ),
                  .a_sign( src_sign_4 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_4 ),
                  .r_exp( div_result_exp_4 ),
                  .r_sign( div_result_sign_4 ),
                  .dst_valid( div_valid_4 )
                );

         // rtl_instance:linear_dequant/u_fp_div_3
         fp_div u_fp_div_3(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_3 ),
                  .a_exp( src_exp_3 ),
                  .a_sign( src_sign_3 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_3 ),
                  .r_exp( div_result_exp_3 ),
                  .r_sign( div_result_sign_3 ),
                  .dst_valid( div_valid_3 )
                );

         // rtl_instance:linear_dequant/u_fp_div_2
         fp_div u_fp_div_2(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_2 ),
                  .a_exp( src_exp_2 ),
                  .a_sign( src_sign_2 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_2 ),
                  .r_exp( div_result_exp_2 ),
                  .r_sign( div_result_sign_2 ),
                  .dst_valid( div_valid_2 )
                );

         // rtl_instance:linear_dequant/u_fp_div_1
         fp_div u_fp_div_1(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_1 ),
                  .a_exp( src_exp_1 ),
                  .a_sign( src_sign_1 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_1 ),
                  .r_exp( div_result_exp_1 ),
                  .r_sign( div_result_sign_1 ),
                  .dst_valid( div_valid_1 )
                );

         // rtl_instance:linear_dequant/u_fp_div_0
         fp_div u_fp_div_0(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( src_valid ),
                  .a_man( src_man_0 ),
                  .a_exp( src_exp_0 ),
                  .a_sign( src_sign_0 ),
                  .b_man( divisor_man ),
                  .b_exp( divisor_exp ),
                  .b_sign( divisor_sign ),
                  .r_man( div_result_man_0 ),
                  .r_exp( div_result_exp_0 ),
                  .r_sign( div_result_sign_0 ),
                  .dst_valid( div_valid_0 )
                );

         // rtl_process:linear_dequant/drive_dst_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_valid
         // at: linear_dequant.h:76:7
         // at: linear_dequant.h:80:7
         always @(posedge clk or negedge rstn)
          begin :drive_dst_valid
            if (rstn == 1'b0) begin
               // op:_dst_valid/OP0
               dst_valid <= 1'd0;
            end
            else begin
               // op:_dst_valid/OP5
               dst_valid <= linear_dequant_N_Muxb_1_2_0_4_1_out1;
            end
         end

         // rtl_instance:linear_dequant/linear_dequant_N_Muxb_1_2_0_4
         always @(src_valid or enable or div_valid_0)
          begin :linear_dequant_N_Muxb_1_2_0_4_1
            if (enable) begin
               linear_dequant_N_Muxb_1_2_0_4_1_out1 = div_valid_0;
            end
            else begin
               linear_dequant_N_Muxb_1_2_0_4_1_out1 = src_valid;
            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_0
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_0
            if (rstn == 1'b0) begin
               // op:_dst/OP9
               dst_sign_0 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP84
                     dst_sign_0 <= div_result_sign_0;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP36
                     dst_sign_0 <= src_sign_0;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_1
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_1
            if (rstn == 1'b0) begin
               // op:_dst/OP12
               dst_sign_1 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP90
                     dst_sign_1 <= div_result_sign_1;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP42
                     dst_sign_1 <= src_sign_1;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_2
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_2
            if (rstn == 1'b0) begin
               // op:_dst/OP15
               dst_sign_2 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP96
                     dst_sign_2 <= div_result_sign_2;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP48
                     dst_sign_2 <= src_sign_2;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_3
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_3
            if (rstn == 1'b0) begin
               // op:_dst/OP18
               dst_sign_3 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP102
                     dst_sign_3 <= div_result_sign_3;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP54
                     dst_sign_3 <= src_sign_3;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_4
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_4
            if (rstn == 1'b0) begin
               // op:_dst/OP21
               dst_sign_4 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP108
                     dst_sign_4 <= div_result_sign_4;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP60
                     dst_sign_4 <= src_sign_4;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_5
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_5
            if (rstn == 1'b0) begin
               // op:_dst/OP24
               dst_sign_5 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP114
                     dst_sign_5 <= div_result_sign_5;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP66
                     dst_sign_5 <= src_sign_5;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_6
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_6
            if (rstn == 1'b0) begin
               // op:_dst/OP27
               dst_sign_6 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP120
                     dst_sign_6 <= div_result_sign_6;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP72
                     dst_sign_6 <= src_sign_6;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_sign_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_7
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_7
            if (rstn == 1'b0) begin
               // op:_dst/OP30
               dst_sign_7 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP126
                     dst_sign_7 <= div_result_sign_7;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP78
                     dst_sign_7 <= src_sign_7;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_0
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_0
            if (rstn == 1'b0) begin
               // op:_dst/OP10
               dst_exp_0 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP86
                     dst_exp_0 <= div_result_exp_0;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP38
                     dst_exp_0 <= src_exp_0;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_1
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_1
            if (rstn == 1'b0) begin
               // op:_dst/OP13
               dst_exp_1 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP92
                     dst_exp_1 <= div_result_exp_1;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP44
                     dst_exp_1 <= src_exp_1;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_2
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_2
            if (rstn == 1'b0) begin
               // op:_dst/OP16
               dst_exp_2 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP98
                     dst_exp_2 <= div_result_exp_2;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP50
                     dst_exp_2 <= src_exp_2;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_3
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_3
            if (rstn == 1'b0) begin
               // op:_dst/OP19
               dst_exp_3 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP104
                     dst_exp_3 <= div_result_exp_3;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP56
                     dst_exp_3 <= src_exp_3;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_4
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_4
            if (rstn == 1'b0) begin
               // op:_dst/OP22
               dst_exp_4 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP110
                     dst_exp_4 <= div_result_exp_4;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP62
                     dst_exp_4 <= src_exp_4;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_5
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_5
            if (rstn == 1'b0) begin
               // op:_dst/OP25
               dst_exp_5 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP116
                     dst_exp_5 <= div_result_exp_5;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP68
                     dst_exp_5 <= src_exp_5;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_6
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_6
            if (rstn == 1'b0) begin
               // op:_dst/OP28
               dst_exp_6 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP122
                     dst_exp_6 <= div_result_exp_6;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP74
                     dst_exp_6 <= src_exp_6;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_exp_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_7
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_7
            if (rstn == 1'b0) begin
               // op:_dst/OP31
               dst_exp_7 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP128
                     dst_exp_7 <= div_result_exp_7;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP80
                     dst_exp_7 <= src_exp_7;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_0
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_0
            if (rstn == 1'b0) begin
               // op:_dst/OP11
               dst_man_0 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP88
                     dst_man_0 <= div_result_man_0;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP40
                     dst_man_0 <= src_man_0;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_1
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_1
            if (rstn == 1'b0) begin
               // op:_dst/OP14
               dst_man_1 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP94
                     dst_man_1 <= div_result_man_1;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP46
                     dst_man_1 <= src_man_1;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_2
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_2
            if (rstn == 1'b0) begin
               // op:_dst/OP17
               dst_man_2 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP100
                     dst_man_2 <= div_result_man_2;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP52
                     dst_man_2 <= src_man_2;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_3
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_3
            if (rstn == 1'b0) begin
               // op:_dst/OP20
               dst_man_3 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP106
                     dst_man_3 <= div_result_man_3;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP58
                     dst_man_3 <= src_man_3;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_4
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_4
            if (rstn == 1'b0) begin
               // op:_dst/OP23
               dst_man_4 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP112
                     dst_man_4 <= div_result_man_4;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP64
                     dst_man_4 <= src_man_4;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_5
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_5
            if (rstn == 1'b0) begin
               // op:_dst/OP26
               dst_man_5 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP118
                     dst_man_5 <= div_result_man_5;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP70
                     dst_man_5 <= src_man_5;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_6
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_6
            if (rstn == 1'b0) begin
               // op:_dst/OP29
               dst_man_6 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP124
                     dst_man_6 <= div_result_man_6;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP76
                     dst_man_6 <= src_man_6;
                  end
                  
               endcase

            end
         end

         // rtl_process:linear_dequant/drive_dst_man_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_7
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_7
            if (rstn == 1'b0) begin
               // op:_dst/OP32
               dst_man_7 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP130
                     dst_man_7 <= div_result_man_7;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP82
                     dst_man_7 <= src_man_7;
                  end
                  
               endcase

            end
         end


endmodule


