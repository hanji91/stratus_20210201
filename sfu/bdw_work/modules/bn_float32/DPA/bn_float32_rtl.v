// Generated by stratus_hls 19.10-p100  (91500.011111)
// Tue Jan  5 20:57:14 2021
// from bn_float32.cpp

`timescale 1ps / 1ps

      
module bn_float32(clk, rstn, enable, src_valid, src_man_0, src_man_1, src_man_2, src_man_3, src_man_4, src_man_5, src_man_6, src_man_7, src_exp_0, src_exp_1, src_exp_2, src_exp_3, src_exp_4, src_exp_5, src_exp_6, src_exp_7, src_sign_0, src_sign_1, src_sign_2, src_sign_3, src_sign_4, src_sign_5, src_sign_6, src_sign_7, mul_coeff_man_0, mul_coeff_man_1, mul_coeff_man_2, mul_coeff_man_3, mul_coeff_man_4, mul_coeff_man_5, mul_coeff_man_6, mul_coeff_man_7, mul_coeff_exp_0, mul_coeff_exp_1
          , mul_coeff_exp_2, mul_coeff_exp_3, mul_coeff_exp_4, mul_coeff_exp_5, mul_coeff_exp_6, mul_coeff_exp_7, mul_coeff_sign_0, mul_coeff_sign_1, mul_coeff_sign_2, mul_coeff_sign_3, mul_coeff_sign_4, mul_coeff_sign_5, mul_coeff_sign_6, mul_coeff_sign_7, add_coeff_man_0, add_coeff_man_1, add_coeff_man_2, add_coeff_man_3, add_coeff_man_4, add_coeff_man_5, add_coeff_man_6, add_coeff_man_7, add_coeff_exp_0, add_coeff_exp_1, add_coeff_exp_2, add_coeff_exp_3, add_coeff_exp_4, add_coeff_exp_5
          , add_coeff_exp_6, add_coeff_exp_7, add_coeff_sign_0, add_coeff_sign_1, add_coeff_sign_2, add_coeff_sign_3, add_coeff_sign_4, add_coeff_sign_5, add_coeff_sign_6, add_coeff_sign_7, dst_valid, dst_man_0, dst_man_1, dst_man_2, dst_man_3, dst_man_4, dst_man_5, dst_man_6, dst_man_7, dst_exp_0, dst_exp_1, dst_exp_2, dst_exp_3, dst_exp_4, dst_exp_5, dst_exp_6, dst_exp_7, dst_sign_0, dst_sign_1, dst_sign_2, dst_sign_3, dst_sign_4, dst_sign_5, dst_sign_6, dst_sign_7);

      input clk;
      input rstn;
      input enable;
      input src_valid;
      input [22:0] src_man_0;
      input [22:0] src_man_1;
      input [22:0] src_man_2;
      input [22:0] src_man_3;
      input [22:0] src_man_4;
      input [22:0] src_man_5;
      input [22:0] src_man_6;
      input [22:0] src_man_7;
      input [7:0] src_exp_0;
      input [7:0] src_exp_1;
      input [7:0] src_exp_2;
      input [7:0] src_exp_3;
      input [7:0] src_exp_4;
      input [7:0] src_exp_5;
      input [7:0] src_exp_6;
      input [7:0] src_exp_7;
      input src_sign_0;
      input src_sign_1;
      input src_sign_2;
      input src_sign_3;
      input src_sign_4;
      input src_sign_5;
      input src_sign_6;
      input src_sign_7;
      input [22:0] mul_coeff_man_0;
      input [22:0] mul_coeff_man_1;
      input [22:0] mul_coeff_man_2;
      input [22:0] mul_coeff_man_3;
      input [22:0] mul_coeff_man_4;
      input [22:0] mul_coeff_man_5;
      input [22:0] mul_coeff_man_6;
      input [22:0] mul_coeff_man_7;
      input [7:0] mul_coeff_exp_0;
      input [7:0] mul_coeff_exp_1;
      input [7:0] mul_coeff_exp_2;
      input [7:0] mul_coeff_exp_3;
      input [7:0] mul_coeff_exp_4;
      input [7:0] mul_coeff_exp_5;
      input [7:0] mul_coeff_exp_6;
      input [7:0] mul_coeff_exp_7;
      input mul_coeff_sign_0;
      input mul_coeff_sign_1;
      input mul_coeff_sign_2;
      input mul_coeff_sign_3;
      input mul_coeff_sign_4;
      input mul_coeff_sign_5;
      input mul_coeff_sign_6;
      input mul_coeff_sign_7;
      input [22:0] add_coeff_man_0;
      input [22:0] add_coeff_man_1;
      input [22:0] add_coeff_man_2;
      input [22:0] add_coeff_man_3;
      input [22:0] add_coeff_man_4;
      input [22:0] add_coeff_man_5;
      input [22:0] add_coeff_man_6;
      input [22:0] add_coeff_man_7;
      input [7:0] add_coeff_exp_0;
      input [7:0] add_coeff_exp_1;
      input [7:0] add_coeff_exp_2;
      input [7:0] add_coeff_exp_3;
      input [7:0] add_coeff_exp_4;
      input [7:0] add_coeff_exp_5;
      input [7:0] add_coeff_exp_6;
      input [7:0] add_coeff_exp_7;
      input add_coeff_sign_0;
      input add_coeff_sign_1;
      input add_coeff_sign_2;
      input add_coeff_sign_3;
      input add_coeff_sign_4;
      input add_coeff_sign_5;
      input add_coeff_sign_6;
      input add_coeff_sign_7;
      output dst_valid;
      reg dst_valid;
      output [22:0] dst_man_0;
      reg [22:0] dst_man_0;
      output [22:0] dst_man_1;
      reg [22:0] dst_man_1;
      output [22:0] dst_man_2;
      reg [22:0] dst_man_2;
      output [22:0] dst_man_3;
      reg [22:0] dst_man_3;
      output [22:0] dst_man_4;
      reg [22:0] dst_man_4;
      output [22:0] dst_man_5;
      reg [22:0] dst_man_5;
      output [22:0] dst_man_6;
      reg [22:0] dst_man_6;
      output [22:0] dst_man_7;
      reg [22:0] dst_man_7;
      output [7:0] dst_exp_0;
      reg [7:0] dst_exp_0;
      output [7:0] dst_exp_1;
      reg [7:0] dst_exp_1;
      output [7:0] dst_exp_2;
      reg [7:0] dst_exp_2;
      output [7:0] dst_exp_3;
      reg [7:0] dst_exp_3;
      output [7:0] dst_exp_4;
      reg [7:0] dst_exp_4;
      output [7:0] dst_exp_5;
      reg [7:0] dst_exp_5;
      output [7:0] dst_exp_6;
      reg [7:0] dst_exp_6;
      output [7:0] dst_exp_7;
      reg [7:0] dst_exp_7;
      output dst_sign_0;
      reg dst_sign_0;
      output dst_sign_1;
      reg dst_sign_1;
      output dst_sign_2;
      reg dst_sign_2;
      output dst_sign_3;
      reg dst_sign_3;
      output dst_sign_4;
      reg dst_sign_4;
      output dst_sign_5;
      reg dst_sign_5;
      output dst_sign_6;
      reg dst_sign_6;
      output dst_sign_7;
      reg dst_sign_7;
      reg bn_float32_N_Muxb_1_2_0_4_1_out1;
      reg[22:0] r_src_man_0;
      reg[7:0] r_src_exp_0;
      reg r_src_sign_0;
      reg[22:0] r_src_man_1;
      reg[7:0] r_src_exp_1;
      reg r_src_sign_1;
      reg[22:0] r_src_man_2;
      reg[7:0] r_src_exp_2;
      reg r_src_sign_2;
      reg[22:0] r_src_man_3;
      reg[7:0] r_src_exp_3;
      reg r_src_sign_3;
      reg[22:0] r_src_man_4;
      reg[7:0] r_src_exp_4;
      reg r_src_sign_4;
      reg[22:0] r_src_man_5;
      reg[7:0] r_src_exp_5;
      reg r_src_sign_5;
      reg[22:0] r_src_man_6;
      reg[7:0] r_src_exp_6;
      reg r_src_sign_6;
      reg r_src_valid;
      reg[22:0] r_src_man_7;
      reg[7:0] r_src_exp_7;
      reg r_src_sign_7;
      wire mul_valid_0;
      wire[22:0] mul_result_man_0;
      wire[7:0] mul_result_exp_0;
      wire mul_result_sign_0;
      reg[22:0] r1_add_coeff_man_0;
      reg[7:0] r1_add_coeff_exp_0;
      reg r1_add_coeff_sign_0;
      wire[22:0] add_result_man_0;
      wire[7:0] add_result_exp_0;
      wire add_result_sign_0;
      wire add_valid_0;
      wire mul_valid_1;
      wire[22:0] mul_result_man_1;
      wire[7:0] mul_result_exp_1;
      wire mul_result_sign_1;
      reg[22:0] r1_add_coeff_man_1;
      reg[7:0] r1_add_coeff_exp_1;
      reg r1_add_coeff_sign_1;
      wire[22:0] add_result_man_1;
      wire[7:0] add_result_exp_1;
      wire add_result_sign_1;
      wire add_valid_1;
      wire mul_valid_2;
      wire[22:0] mul_result_man_2;
      wire[7:0] mul_result_exp_2;
      wire mul_result_sign_2;
      reg[22:0] r1_add_coeff_man_2;
      reg[7:0] r1_add_coeff_exp_2;
      reg r1_add_coeff_sign_2;
      wire[22:0] add_result_man_2;
      wire[7:0] add_result_exp_2;
      wire add_result_sign_2;
      wire add_valid_2;
      wire mul_valid_3;
      wire[22:0] mul_result_man_3;
      wire[7:0] mul_result_exp_3;
      wire mul_result_sign_3;
      reg[22:0] r1_add_coeff_man_3;
      reg[7:0] r1_add_coeff_exp_3;
      reg r1_add_coeff_sign_3;
      wire[22:0] add_result_man_3;
      wire[7:0] add_result_exp_3;
      wire add_result_sign_3;
      wire add_valid_3;
      wire mul_valid_4;
      wire[22:0] mul_result_man_4;
      wire[7:0] mul_result_exp_4;
      wire mul_result_sign_4;
      reg[22:0] r1_add_coeff_man_4;
      reg[7:0] r1_add_coeff_exp_4;
      reg r1_add_coeff_sign_4;
      wire[22:0] add_result_man_4;
      wire[7:0] add_result_exp_4;
      wire add_result_sign_4;
      wire add_valid_4;
      wire mul_valid_5;
      wire[22:0] mul_result_man_5;
      wire[7:0] mul_result_exp_5;
      wire mul_result_sign_5;
      reg[22:0] r1_add_coeff_man_5;
      reg[7:0] r1_add_coeff_exp_5;
      reg r1_add_coeff_sign_5;
      wire[22:0] add_result_man_5;
      wire[7:0] add_result_exp_5;
      wire add_result_sign_5;
      wire add_valid_5;
      wire mul_valid_6;
      wire[22:0] mul_result_man_6;
      wire[7:0] mul_result_exp_6;
      wire mul_result_sign_6;
      reg[22:0] r1_add_coeff_man_6;
      reg[7:0] r1_add_coeff_exp_6;
      reg r1_add_coeff_sign_6;
      wire[22:0] add_result_man_6;
      wire[7:0] add_result_exp_6;
      wire add_result_sign_6;
      wire add_valid_6;
      wire mul_valid_7;
      wire[22:0] mul_result_man_7;
      wire[7:0] mul_result_exp_7;
      wire mul_result_sign_7;
      reg[22:0] r1_add_coeff_man_7;
      reg[7:0] r1_add_coeff_exp_7;
      reg r1_add_coeff_sign_7;
      wire[22:0] add_result_man_7;
      wire[7:0] add_result_exp_7;
      wire add_result_sign_7;
      wire add_valid_7;

         // rtl_instance:bn_float32/u_fp_add_7
         fp_add u_fp_add_7(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_7 ),
                  .a_man( mul_result_man_7 ),
                  .a_exp( mul_result_exp_7 ),
                  .a_sign( mul_result_sign_7 ),
                  .b_man( r1_add_coeff_man_7 ),
                  .b_exp( r1_add_coeff_exp_7 ),
                  .b_sign( r1_add_coeff_sign_7 ),
                  .r_man( add_result_man_7 ),
                  .r_exp( add_result_exp_7 ),
                  .r_sign( add_result_sign_7 ),
                  .dst_valid( add_valid_7 )
                );

         // rtl_instance:bn_float32/u_fp_add_6
         fp_add u_fp_add_6(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_6 ),
                  .a_man( mul_result_man_6 ),
                  .a_exp( mul_result_exp_6 ),
                  .a_sign( mul_result_sign_6 ),
                  .b_man( r1_add_coeff_man_6 ),
                  .b_exp( r1_add_coeff_exp_6 ),
                  .b_sign( r1_add_coeff_sign_6 ),
                  .r_man( add_result_man_6 ),
                  .r_exp( add_result_exp_6 ),
                  .r_sign( add_result_sign_6 ),
                  .dst_valid( add_valid_6 )
                );

         // rtl_instance:bn_float32/u_fp_add_5
         fp_add u_fp_add_5(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_5 ),
                  .a_man( mul_result_man_5 ),
                  .a_exp( mul_result_exp_5 ),
                  .a_sign( mul_result_sign_5 ),
                  .b_man( r1_add_coeff_man_5 ),
                  .b_exp( r1_add_coeff_exp_5 ),
                  .b_sign( r1_add_coeff_sign_5 ),
                  .r_man( add_result_man_5 ),
                  .r_exp( add_result_exp_5 ),
                  .r_sign( add_result_sign_5 ),
                  .dst_valid( add_valid_5 )
                );

         // rtl_instance:bn_float32/u_fp_add_4
         fp_add u_fp_add_4(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_4 ),
                  .a_man( mul_result_man_4 ),
                  .a_exp( mul_result_exp_4 ),
                  .a_sign( mul_result_sign_4 ),
                  .b_man( r1_add_coeff_man_4 ),
                  .b_exp( r1_add_coeff_exp_4 ),
                  .b_sign( r1_add_coeff_sign_4 ),
                  .r_man( add_result_man_4 ),
                  .r_exp( add_result_exp_4 ),
                  .r_sign( add_result_sign_4 ),
                  .dst_valid( add_valid_4 )
                );

         // rtl_instance:bn_float32/u_fp_add_3
         fp_add u_fp_add_3(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_3 ),
                  .a_man( mul_result_man_3 ),
                  .a_exp( mul_result_exp_3 ),
                  .a_sign( mul_result_sign_3 ),
                  .b_man( r1_add_coeff_man_3 ),
                  .b_exp( r1_add_coeff_exp_3 ),
                  .b_sign( r1_add_coeff_sign_3 ),
                  .r_man( add_result_man_3 ),
                  .r_exp( add_result_exp_3 ),
                  .r_sign( add_result_sign_3 ),
                  .dst_valid( add_valid_3 )
                );

         // rtl_instance:bn_float32/u_fp_add_2
         fp_add u_fp_add_2(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_2 ),
                  .a_man( mul_result_man_2 ),
                  .a_exp( mul_result_exp_2 ),
                  .a_sign( mul_result_sign_2 ),
                  .b_man( r1_add_coeff_man_2 ),
                  .b_exp( r1_add_coeff_exp_2 ),
                  .b_sign( r1_add_coeff_sign_2 ),
                  .r_man( add_result_man_2 ),
                  .r_exp( add_result_exp_2 ),
                  .r_sign( add_result_sign_2 ),
                  .dst_valid( add_valid_2 )
                );

         // rtl_instance:bn_float32/u_fp_add_1
         fp_add u_fp_add_1(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_1 ),
                  .a_man( mul_result_man_1 ),
                  .a_exp( mul_result_exp_1 ),
                  .a_sign( mul_result_sign_1 ),
                  .b_man( r1_add_coeff_man_1 ),
                  .b_exp( r1_add_coeff_exp_1 ),
                  .b_sign( r1_add_coeff_sign_1 ),
                  .r_man( add_result_man_1 ),
                  .r_exp( add_result_exp_1 ),
                  .r_sign( add_result_sign_1 ),
                  .dst_valid( add_valid_1 )
                );

         // rtl_instance:bn_float32/u_fp_add_0
         fp_add u_fp_add_0(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( mul_valid_0 ),
                  .a_man( mul_result_man_0 ),
                  .a_exp( mul_result_exp_0 ),
                  .a_sign( mul_result_sign_0 ),
                  .b_man( r1_add_coeff_man_0 ),
                  .b_exp( r1_add_coeff_exp_0 ),
                  .b_sign( r1_add_coeff_sign_0 ),
                  .r_man( add_result_man_0 ),
                  .r_exp( add_result_exp_0 ),
                  .r_sign( add_result_sign_0 ),
                  .dst_valid( add_valid_0 )
                );

         // rtl_instance:bn_float32/u_fp_mul_7
         fp_mul u_fp_mul_7(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_7 ),
                  .a_exp( r_src_exp_7 ),
                  .a_sign( r_src_sign_7 ),
                  .b_man( mul_coeff_man_7 ),
                  .b_exp( mul_coeff_exp_7 ),
                  .b_sign( mul_coeff_sign_7 ),
                  .r_man( mul_result_man_7 ),
                  .r_exp( mul_result_exp_7 ),
                  .r_sign( mul_result_sign_7 ),
                  .dst_valid( mul_valid_7 )
                );

         // rtl_instance:bn_float32/u_fp_mul_6
         fp_mul u_fp_mul_6(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_6 ),
                  .a_exp( r_src_exp_6 ),
                  .a_sign( r_src_sign_6 ),
                  .b_man( mul_coeff_man_6 ),
                  .b_exp( mul_coeff_exp_6 ),
                  .b_sign( mul_coeff_sign_6 ),
                  .r_man( mul_result_man_6 ),
                  .r_exp( mul_result_exp_6 ),
                  .r_sign( mul_result_sign_6 ),
                  .dst_valid( mul_valid_6 )
                );

         // rtl_instance:bn_float32/u_fp_mul_5
         fp_mul u_fp_mul_5(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_5 ),
                  .a_exp( r_src_exp_5 ),
                  .a_sign( r_src_sign_5 ),
                  .b_man( mul_coeff_man_5 ),
                  .b_exp( mul_coeff_exp_5 ),
                  .b_sign( mul_coeff_sign_5 ),
                  .r_man( mul_result_man_5 ),
                  .r_exp( mul_result_exp_5 ),
                  .r_sign( mul_result_sign_5 ),
                  .dst_valid( mul_valid_5 )
                );

         // rtl_instance:bn_float32/u_fp_mul_4
         fp_mul u_fp_mul_4(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_4 ),
                  .a_exp( r_src_exp_4 ),
                  .a_sign( r_src_sign_4 ),
                  .b_man( mul_coeff_man_4 ),
                  .b_exp( mul_coeff_exp_4 ),
                  .b_sign( mul_coeff_sign_4 ),
                  .r_man( mul_result_man_4 ),
                  .r_exp( mul_result_exp_4 ),
                  .r_sign( mul_result_sign_4 ),
                  .dst_valid( mul_valid_4 )
                );

         // rtl_instance:bn_float32/u_fp_mul_3
         fp_mul u_fp_mul_3(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_3 ),
                  .a_exp( r_src_exp_3 ),
                  .a_sign( r_src_sign_3 ),
                  .b_man( mul_coeff_man_3 ),
                  .b_exp( mul_coeff_exp_3 ),
                  .b_sign( mul_coeff_sign_3 ),
                  .r_man( mul_result_man_3 ),
                  .r_exp( mul_result_exp_3 ),
                  .r_sign( mul_result_sign_3 ),
                  .dst_valid( mul_valid_3 )
                );

         // rtl_instance:bn_float32/u_fp_mul_2
         fp_mul u_fp_mul_2(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_2 ),
                  .a_exp( r_src_exp_2 ),
                  .a_sign( r_src_sign_2 ),
                  .b_man( mul_coeff_man_2 ),
                  .b_exp( mul_coeff_exp_2 ),
                  .b_sign( mul_coeff_sign_2 ),
                  .r_man( mul_result_man_2 ),
                  .r_exp( mul_result_exp_2 ),
                  .r_sign( mul_result_sign_2 ),
                  .dst_valid( mul_valid_2 )
                );

         // rtl_instance:bn_float32/u_fp_mul_1
         fp_mul u_fp_mul_1(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_1 ),
                  .a_exp( r_src_exp_1 ),
                  .a_sign( r_src_sign_1 ),
                  .b_man( mul_coeff_man_1 ),
                  .b_exp( mul_coeff_exp_1 ),
                  .b_sign( mul_coeff_sign_1 ),
                  .r_man( mul_result_man_1 ),
                  .r_exp( mul_result_exp_1 ),
                  .r_sign( mul_result_sign_1 ),
                  .dst_valid( mul_valid_1 )
                );

         // rtl_instance:bn_float32/u_fp_mul_0
         fp_mul u_fp_mul_0(
                  .clk( clk ),
                  .rstn( rstn ),
                  .src_valid( r_src_valid ),
                  .a_man( r_src_man_0 ),
                  .a_exp( r_src_exp_0 ),
                  .a_sign( r_src_sign_0 ),
                  .b_man( mul_coeff_man_0 ),
                  .b_exp( mul_coeff_exp_0 ),
                  .b_sign( mul_coeff_sign_0 ),
                  .r_man( mul_result_man_0 ),
                  .r_exp( mul_result_exp_0 ),
                  .r_sign( mul_result_sign_0 ),
                  .dst_valid( mul_valid_0 )
                );

         // rtl_process:bn_float32/drive_dst_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_valid
         // at: bn_float32.h:126:7
         // at: bn_float32.h:130:7
         always @(posedge clk or negedge rstn)
          begin :drive_dst_valid
            if (rstn == 1'b0) begin
               // op:_dst_valid/OP0
               dst_valid <= 1'd0;
            end
            else begin
               // op:_dst_valid/OP5
               dst_valid <= bn_float32_N_Muxb_1_2_0_4_1_out1;
            end
         end

         // rtl_instance:bn_float32/bn_float32_N_Muxb_1_2_0_4
         always @(src_valid or enable or add_valid_0)
          begin :bn_float32_N_Muxb_1_2_0_4_1
            if (enable) begin
               bn_float32_N_Muxb_1_2_0_4_1_out1 = add_valid_0;
            end
            else begin
               bn_float32_N_Muxb_1_2_0_4_1_out1 = src_valid;
            end
         end

         // rtl_process:bn_float32/drive_dst_sign_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_0
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_0
            if (rstn == 1'b0) begin
               // op:_dst/OP9
               dst_sign_0 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP84
                     dst_sign_0 <= add_result_sign_0;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP36
                     dst_sign_0 <= src_sign_0;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_1
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_1
            if (rstn == 1'b0) begin
               // op:_dst/OP12
               dst_sign_1 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP90
                     dst_sign_1 <= add_result_sign_1;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP42
                     dst_sign_1 <= src_sign_1;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_2
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_2
            if (rstn == 1'b0) begin
               // op:_dst/OP15
               dst_sign_2 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP96
                     dst_sign_2 <= add_result_sign_2;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP48
                     dst_sign_2 <= src_sign_2;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_3
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_3
            if (rstn == 1'b0) begin
               // op:_dst/OP18
               dst_sign_3 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP102
                     dst_sign_3 <= add_result_sign_3;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP54
                     dst_sign_3 <= src_sign_3;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_4
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_4
            if (rstn == 1'b0) begin
               // op:_dst/OP21
               dst_sign_4 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP108
                     dst_sign_4 <= add_result_sign_4;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP60
                     dst_sign_4 <= src_sign_4;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_5
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_5
            if (rstn == 1'b0) begin
               // op:_dst/OP24
               dst_sign_5 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP114
                     dst_sign_5 <= add_result_sign_5;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP66
                     dst_sign_5 <= src_sign_5;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_6
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_6
            if (rstn == 1'b0) begin
               // op:_dst/OP27
               dst_sign_6 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP120
                     dst_sign_6 <= add_result_sign_6;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP72
                     dst_sign_6 <= src_sign_6;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_sign_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_sign_7
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_7
            if (rstn == 1'b0) begin
               // op:_dst/OP30
               dst_sign_7 <= 1'b0;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP126
                     dst_sign_7 <= add_result_sign_7;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP78
                     dst_sign_7 <= src_sign_7;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_0
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_0
            if (rstn == 1'b0) begin
               // op:_dst/OP10
               dst_exp_0 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP86
                     dst_exp_0 <= add_result_exp_0;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP38
                     dst_exp_0 <= src_exp_0;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_1
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_1
            if (rstn == 1'b0) begin
               // op:_dst/OP13
               dst_exp_1 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP92
                     dst_exp_1 <= add_result_exp_1;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP44
                     dst_exp_1 <= src_exp_1;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_2
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_2
            if (rstn == 1'b0) begin
               // op:_dst/OP16
               dst_exp_2 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP98
                     dst_exp_2 <= add_result_exp_2;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP50
                     dst_exp_2 <= src_exp_2;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_3
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_3
            if (rstn == 1'b0) begin
               // op:_dst/OP19
               dst_exp_3 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP104
                     dst_exp_3 <= add_result_exp_3;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP56
                     dst_exp_3 <= src_exp_3;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_4
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_4
            if (rstn == 1'b0) begin
               // op:_dst/OP22
               dst_exp_4 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP110
                     dst_exp_4 <= add_result_exp_4;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP62
                     dst_exp_4 <= src_exp_4;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_5
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_5
            if (rstn == 1'b0) begin
               // op:_dst/OP25
               dst_exp_5 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP116
                     dst_exp_5 <= add_result_exp_5;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP68
                     dst_exp_5 <= src_exp_5;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_6
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_6
            if (rstn == 1'b0) begin
               // op:_dst/OP28
               dst_exp_6 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP122
                     dst_exp_6 <= add_result_exp_6;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP74
                     dst_exp_6 <= src_exp_6;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_exp_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_exp_7
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_7
            if (rstn == 1'b0) begin
               // op:_dst/OP31
               dst_exp_7 <= 8'd000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP128
                     dst_exp_7 <= add_result_exp_7;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP80
                     dst_exp_7 <= src_exp_7;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_0
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_0
            if (rstn == 1'b0) begin
               // op:_dst/OP11
               dst_man_0 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP88
                     dst_man_0 <= add_result_man_0;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP40
                     dst_man_0 <= src_man_0;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_1
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_1
            if (rstn == 1'b0) begin
               // op:_dst/OP14
               dst_man_1 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP94
                     dst_man_1 <= add_result_man_1;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP46
                     dst_man_1 <= src_man_1;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_2
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_2
            if (rstn == 1'b0) begin
               // op:_dst/OP17
               dst_man_2 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP100
                     dst_man_2 <= add_result_man_2;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP52
                     dst_man_2 <= src_man_2;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_3
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_3
            if (rstn == 1'b0) begin
               // op:_dst/OP20
               dst_man_3 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP106
                     dst_man_3 <= add_result_man_3;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP58
                     dst_man_3 <= src_man_3;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_4
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_4
            if (rstn == 1'b0) begin
               // op:_dst/OP23
               dst_man_4 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP112
                     dst_man_4 <= add_result_man_4;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP64
                     dst_man_4 <= src_man_4;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_5
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_5
            if (rstn == 1'b0) begin
               // op:_dst/OP26
               dst_man_5 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP118
                     dst_man_5 <= add_result_man_5;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP70
                     dst_man_5 <= src_man_5;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_6
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_6
            if (rstn == 1'b0) begin
               // op:_dst/OP29
               dst_man_6 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP124
                     dst_man_6 <= add_result_man_6;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP76
                     dst_man_6 <= src_man_6;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_dst_man_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_man_7
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_7
            if (rstn == 1'b0) begin
               // op:_dst/OP32
               dst_man_7 <= 23'd0000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_dst/OP130
                     dst_man_7 <= add_result_man_7;
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP82
                     dst_man_7 <= src_man_7;
                  end
                  
               endcase

            end
         end

         // rtl_process:bn_float32/drive_r_src_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_valid
         // at: bn_float32.h:58:2
         // at: bn_float32.h:69:2
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_valid
            if (rstn == 1'b0) begin
               // op:_delay/OP179
               r_src_valid <= 1'd0;
            end
            else begin
               // op:_delay/OP229
               r_src_valid <= src_valid;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_0
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_0
            if (rstn == 1'b0) begin
               // op:_delay/OP131
               r_src_sign_0 <= 1'b0;
            end
            else begin
               // op:_delay/OP277
               r_src_sign_0 <= src_sign_0;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_1
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_1
            if (rstn == 1'b0) begin
               // op:_delay/OP137
               r_src_sign_1 <= 1'b0;
            end
            else begin
               // op:_delay/OP271
               r_src_sign_1 <= src_sign_1;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_2
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_2
            if (rstn == 1'b0) begin
               // op:_delay/OP143
               r_src_sign_2 <= 1'b0;
            end
            else begin
               // op:_delay/OP265
               r_src_sign_2 <= src_sign_2;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_3
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_3
            if (rstn == 1'b0) begin
               // op:_delay/OP149
               r_src_sign_3 <= 1'b0;
            end
            else begin
               // op:_delay/OP259
               r_src_sign_3 <= src_sign_3;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_4
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_4
            if (rstn == 1'b0) begin
               // op:_delay/OP155
               r_src_sign_4 <= 1'b0;
            end
            else begin
               // op:_delay/OP253
               r_src_sign_4 <= src_sign_4;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_5
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_5
            if (rstn == 1'b0) begin
               // op:_delay/OP161
               r_src_sign_5 <= 1'b0;
            end
            else begin
               // op:_delay/OP247
               r_src_sign_5 <= src_sign_5;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_6
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_6
            if (rstn == 1'b0) begin
               // op:_delay/OP167
               r_src_sign_6 <= 1'b0;
            end
            else begin
               // op:_delay/OP241
               r_src_sign_6 <= src_sign_6;
            end
         end

         // rtl_process:bn_float32/drive_r_src_sign_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_sign_7
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_sign_7
            if (rstn == 1'b0) begin
               // op:_delay/OP173
               r_src_sign_7 <= 1'b0;
            end
            else begin
               // op:_delay/OP235
               r_src_sign_7 <= src_sign_7;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_0
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_0
            if (rstn == 1'b0) begin
               // op:_delay/OP132
               r_src_exp_0 <= 8'd000;
            end
            else begin
               // op:_delay/OP276
               r_src_exp_0 <= src_exp_0;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_1
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_1
            if (rstn == 1'b0) begin
               // op:_delay/OP138
               r_src_exp_1 <= 8'd000;
            end
            else begin
               // op:_delay/OP270
               r_src_exp_1 <= src_exp_1;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_2
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_2
            if (rstn == 1'b0) begin
               // op:_delay/OP144
               r_src_exp_2 <= 8'd000;
            end
            else begin
               // op:_delay/OP264
               r_src_exp_2 <= src_exp_2;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_3
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_3
            if (rstn == 1'b0) begin
               // op:_delay/OP150
               r_src_exp_3 <= 8'd000;
            end
            else begin
               // op:_delay/OP258
               r_src_exp_3 <= src_exp_3;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_4
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_4
            if (rstn == 1'b0) begin
               // op:_delay/OP156
               r_src_exp_4 <= 8'd000;
            end
            else begin
               // op:_delay/OP252
               r_src_exp_4 <= src_exp_4;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_5
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_5
            if (rstn == 1'b0) begin
               // op:_delay/OP162
               r_src_exp_5 <= 8'd000;
            end
            else begin
               // op:_delay/OP246
               r_src_exp_5 <= src_exp_5;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_6
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_6
            if (rstn == 1'b0) begin
               // op:_delay/OP168
               r_src_exp_6 <= 8'd000;
            end
            else begin
               // op:_delay/OP240
               r_src_exp_6 <= src_exp_6;
            end
         end

         // rtl_process:bn_float32/drive_r_src_exp_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_exp_7
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_exp_7
            if (rstn == 1'b0) begin
               // op:_delay/OP174
               r_src_exp_7 <= 8'd000;
            end
            else begin
               // op:_delay/OP234
               r_src_exp_7 <= src_exp_7;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_0
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_0
            if (rstn == 1'b0) begin
               // op:_delay/OP133
               r_src_man_0 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP275
               r_src_man_0 <= src_man_0;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_1
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_1
            if (rstn == 1'b0) begin
               // op:_delay/OP139
               r_src_man_1 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP269
               r_src_man_1 <= src_man_1;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_2
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_2
            if (rstn == 1'b0) begin
               // op:_delay/OP145
               r_src_man_2 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP263
               r_src_man_2 <= src_man_2;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_3
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_3
            if (rstn == 1'b0) begin
               // op:_delay/OP151
               r_src_man_3 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP257
               r_src_man_3 <= src_man_3;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_4
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_4
            if (rstn == 1'b0) begin
               // op:_delay/OP157
               r_src_man_4 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP251
               r_src_man_4 <= src_man_4;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_5
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_5
            if (rstn == 1'b0) begin
               // op:_delay/OP163
               r_src_man_5 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP245
               r_src_man_5 <= src_man_5;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_6
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_6
            if (rstn == 1'b0) begin
               // op:_delay/OP169
               r_src_man_6 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP239
               r_src_man_6 <= src_man_6;
            end
         end

         // rtl_process:bn_float32/drive_r_src_man_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r_src_man_7
         // at: bn_float32.h:53:7
         // at: bn_float32.h:64:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_man_7
            if (rstn == 1'b0) begin
               // op:_delay/OP175
               r_src_man_7 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP233
               r_src_man_7 <= src_man_7;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_0
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_0
            if (rstn == 1'b0) begin
               // op:_delay/OP134
               r1_add_coeff_sign_0 <= 1'b0;
            end
            else begin
               // op:_delay/OP274
               r1_add_coeff_sign_0 <= add_coeff_sign_0;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_1
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_1
            if (rstn == 1'b0) begin
               // op:_delay/OP140
               r1_add_coeff_sign_1 <= 1'b0;
            end
            else begin
               // op:_delay/OP268
               r1_add_coeff_sign_1 <= add_coeff_sign_1;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_2
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_2
            if (rstn == 1'b0) begin
               // op:_delay/OP146
               r1_add_coeff_sign_2 <= 1'b0;
            end
            else begin
               // op:_delay/OP262
               r1_add_coeff_sign_2 <= add_coeff_sign_2;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_3
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_3
            if (rstn == 1'b0) begin
               // op:_delay/OP152
               r1_add_coeff_sign_3 <= 1'b0;
            end
            else begin
               // op:_delay/OP256
               r1_add_coeff_sign_3 <= add_coeff_sign_3;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_4
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_4
            if (rstn == 1'b0) begin
               // op:_delay/OP158
               r1_add_coeff_sign_4 <= 1'b0;
            end
            else begin
               // op:_delay/OP250
               r1_add_coeff_sign_4 <= add_coeff_sign_4;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_5
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_5
            if (rstn == 1'b0) begin
               // op:_delay/OP164
               r1_add_coeff_sign_5 <= 1'b0;
            end
            else begin
               // op:_delay/OP244
               r1_add_coeff_sign_5 <= add_coeff_sign_5;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_6
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_6
            if (rstn == 1'b0) begin
               // op:_delay/OP170
               r1_add_coeff_sign_6 <= 1'b0;
            end
            else begin
               // op:_delay/OP238
               r1_add_coeff_sign_6 <= add_coeff_sign_6;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_sign_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_sign_7
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_sign_7
            if (rstn == 1'b0) begin
               // op:_delay/OP176
               r1_add_coeff_sign_7 <= 1'b0;
            end
            else begin
               // op:_delay/OP232
               r1_add_coeff_sign_7 <= add_coeff_sign_7;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_0
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_0
            if (rstn == 1'b0) begin
               // op:_delay/OP135
               r1_add_coeff_exp_0 <= 8'd000;
            end
            else begin
               // op:_delay/OP273
               r1_add_coeff_exp_0 <= add_coeff_exp_0;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_1
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_1
            if (rstn == 1'b0) begin
               // op:_delay/OP141
               r1_add_coeff_exp_1 <= 8'd000;
            end
            else begin
               // op:_delay/OP267
               r1_add_coeff_exp_1 <= add_coeff_exp_1;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_2
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_2
            if (rstn == 1'b0) begin
               // op:_delay/OP147
               r1_add_coeff_exp_2 <= 8'd000;
            end
            else begin
               // op:_delay/OP261
               r1_add_coeff_exp_2 <= add_coeff_exp_2;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_3
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_3
            if (rstn == 1'b0) begin
               // op:_delay/OP153
               r1_add_coeff_exp_3 <= 8'd000;
            end
            else begin
               // op:_delay/OP255
               r1_add_coeff_exp_3 <= add_coeff_exp_3;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_4
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_4
            if (rstn == 1'b0) begin
               // op:_delay/OP159
               r1_add_coeff_exp_4 <= 8'd000;
            end
            else begin
               // op:_delay/OP249
               r1_add_coeff_exp_4 <= add_coeff_exp_4;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_5
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_5
            if (rstn == 1'b0) begin
               // op:_delay/OP165
               r1_add_coeff_exp_5 <= 8'd000;
            end
            else begin
               // op:_delay/OP243
               r1_add_coeff_exp_5 <= add_coeff_exp_5;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_6
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_6
            if (rstn == 1'b0) begin
               // op:_delay/OP171
               r1_add_coeff_exp_6 <= 8'd000;
            end
            else begin
               // op:_delay/OP237
               r1_add_coeff_exp_6 <= add_coeff_exp_6;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_exp_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_exp_7
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_exp_7
            if (rstn == 1'b0) begin
               // op:_delay/OP177
               r1_add_coeff_exp_7 <= 8'd000;
            end
            else begin
               // op:_delay/OP231
               r1_add_coeff_exp_7 <= add_coeff_exp_7;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_0
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_0
            if (rstn == 1'b0) begin
               // op:_delay/OP136
               r1_add_coeff_man_0 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP272
               r1_add_coeff_man_0 <= add_coeff_man_0;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_1
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_1
            if (rstn == 1'b0) begin
               // op:_delay/OP142
               r1_add_coeff_man_1 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP266
               r1_add_coeff_man_1 <= add_coeff_man_1;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_2
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_2
            if (rstn == 1'b0) begin
               // op:_delay/OP148
               r1_add_coeff_man_2 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP260
               r1_add_coeff_man_2 <= add_coeff_man_2;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_3
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_3
            if (rstn == 1'b0) begin
               // op:_delay/OP154
               r1_add_coeff_man_3 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP254
               r1_add_coeff_man_3 <= add_coeff_man_3;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_4
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_4
            if (rstn == 1'b0) begin
               // op:_delay/OP160
               r1_add_coeff_man_4 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP248
               r1_add_coeff_man_4 <= add_coeff_man_4;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_5
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_5
            if (rstn == 1'b0) begin
               // op:_delay/OP166
               r1_add_coeff_man_5 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP242
               r1_add_coeff_man_5 <= add_coeff_man_5;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_6
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_6
            if (rstn == 1'b0) begin
               // op:_delay/OP172
               r1_add_coeff_man_6 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP236
               r1_add_coeff_man_6 <= add_coeff_man_6;
            end
         end

         // rtl_process:bn_float32/drive_r1_add_coeff_man_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_r1_add_coeff_man_7
         // at: bn_float32.h:54:14
         // at: bn_float32.h:65:14
         always @(posedge clk or negedge rstn)
          begin :drive_r1_add_coeff_man_7
            if (rstn == 1'b0) begin
               // op:_delay/OP178
               r1_add_coeff_man_7 <= 23'd0000000;
            end
            else begin
               // op:_delay/OP230
               r1_add_coeff_man_7 <= add_coeff_man_7;
            end
         end


endmodule


