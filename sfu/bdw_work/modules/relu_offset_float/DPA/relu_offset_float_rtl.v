// Generated by stratus_hls 19.10-p100  (91500.011111)
// Wed Jan  6 20:15:08 2021
// from relu_offset_float.cpp

`timescale 1ps / 1ps

      
module relu_offset_float(clk, rstn, enable, src_valid, src_man_0, src_man_1, src_man_2, src_man_3, src_man_4, src_man_5, src_man_6, src_man_7, src_exp_0, src_exp_1, src_exp_2, src_exp_3, src_exp_4, src_exp_5, src_exp_6, src_exp_7, src_sign_0, src_sign_1, src_sign_2, src_sign_3, src_sign_4, src_sign_5, src_sign_6, src_sign_7, offset_man, offset_exp, offset_sign, dst_valid, dst_man_0, dst_man_1, dst_man_2, dst_man_3, dst_man_4, dst_man_5, dst_man_6, dst_man_7, dst_exp_0, dst_exp_1, dst_exp_2
          , dst_exp_3, dst_exp_4, dst_exp_5, dst_exp_6, dst_exp_7, dst_sign_0, dst_sign_1, dst_sign_2, dst_sign_3, dst_sign_4, dst_sign_5, dst_sign_6, dst_sign_7);

      input clk;
      input rstn;
      input enable;
      input src_valid;
      input [22:0] src_man_0;
      input [22:0] src_man_1;
      input [22:0] src_man_2;
      input [22:0] src_man_3;
      input [22:0] src_man_4;
      input [22:0] src_man_5;
      input [22:0] src_man_6;
      input [22:0] src_man_7;
      input [7:0] src_exp_0;
      input [7:0] src_exp_1;
      input [7:0] src_exp_2;
      input [7:0] src_exp_3;
      input [7:0] src_exp_4;
      input [7:0] src_exp_5;
      input [7:0] src_exp_6;
      input [7:0] src_exp_7;
      input src_sign_0;
      input src_sign_1;
      input src_sign_2;
      input src_sign_3;
      input src_sign_4;
      input src_sign_5;
      input src_sign_6;
      input src_sign_7;
      input [22:0] offset_man;
      input [7:0] offset_exp;
      input offset_sign;
      output dst_valid;
      reg dst_valid;
      output [22:0] dst_man_0;
      reg [22:0] dst_man_0;
      output [22:0] dst_man_1;
      reg [22:0] dst_man_1;
      output [22:0] dst_man_2;
      reg [22:0] dst_man_2;
      output [22:0] dst_man_3;
      reg [22:0] dst_man_3;
      output [22:0] dst_man_4;
      reg [22:0] dst_man_4;
      output [22:0] dst_man_5;
      reg [22:0] dst_man_5;
      output [22:0] dst_man_6;
      reg [22:0] dst_man_6;
      output [22:0] dst_man_7;
      reg [22:0] dst_man_7;
      output [7:0] dst_exp_0;
      reg [7:0] dst_exp_0;
      output [7:0] dst_exp_1;
      reg [7:0] dst_exp_1;
      output [7:0] dst_exp_2;
      reg [7:0] dst_exp_2;
      output [7:0] dst_exp_3;
      reg [7:0] dst_exp_3;
      output [7:0] dst_exp_4;
      reg [7:0] dst_exp_4;
      output [7:0] dst_exp_5;
      reg [7:0] dst_exp_5;
      output [7:0] dst_exp_6;
      reg [7:0] dst_exp_6;
      output [7:0] dst_exp_7;
      reg [7:0] dst_exp_7;
      output dst_sign_0;
      reg dst_sign_0;
      output dst_sign_1;
      reg dst_sign_1;
      output dst_sign_2;
      reg dst_sign_2;
      output dst_sign_3;
      reg dst_sign_3;
      output dst_sign_4;
      reg dst_sign_4;
      output dst_sign_5;
      reg dst_sign_5;
      output dst_sign_6;
      reg dst_sign_6;
      output dst_sign_7;
      reg dst_sign_7;
      wire[22:0] cmp_result_man_0;
      wire[7:0] cmp_result_exp_0;
      wire cmp_result_sign_0;
      wire cmp_valid_0;
      wire[22:0] cmp_result_man_1;
      wire[7:0] cmp_result_exp_1;
      wire cmp_result_sign_1;
      wire cmp_valid_1;
      wire[22:0] cmp_result_man_2;
      wire[7:0] cmp_result_exp_2;
      wire cmp_result_sign_2;
      wire cmp_valid_2;
      wire[22:0] cmp_result_man_3;
      wire[7:0] cmp_result_exp_3;
      wire cmp_result_sign_3;
      wire cmp_valid_3;
      wire[22:0] cmp_result_man_4;
      wire[7:0] cmp_result_exp_4;
      wire cmp_result_sign_4;
      wire cmp_valid_4;
      wire[22:0] cmp_result_man_5;
      wire[7:0] cmp_result_exp_5;
      wire cmp_result_sign_5;
      wire cmp_valid_5;
      wire[22:0] cmp_result_man_6;
      wire[7:0] cmp_result_exp_6;
      wire cmp_result_sign_6;
      wire cmp_valid_6;
      wire[22:0] cmp_result_man_7;
      wire[7:0] cmp_result_exp_7;
      wire cmp_result_sign_7;
      wire cmp_valid_7;

         // rtl_instance:relu_offset_float/u_fp_cmp_7
         fp_cmp u_fp_cmp_7(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_7 ),
                  .a_exp( src_exp_7 ),
                  .a_sign( src_sign_7 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_7 ),
                  .r_exp( cmp_result_exp_7 ),
                  .r_sign( cmp_result_sign_7 ),
                  .dst_valid( cmp_valid_7 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_6
         fp_cmp u_fp_cmp_6(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_6 ),
                  .a_exp( src_exp_6 ),
                  .a_sign( src_sign_6 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_6 ),
                  .r_exp( cmp_result_exp_6 ),
                  .r_sign( cmp_result_sign_6 ),
                  .dst_valid( cmp_valid_6 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_5
         fp_cmp u_fp_cmp_5(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_5 ),
                  .a_exp( src_exp_5 ),
                  .a_sign( src_sign_5 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_5 ),
                  .r_exp( cmp_result_exp_5 ),
                  .r_sign( cmp_result_sign_5 ),
                  .dst_valid( cmp_valid_5 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_4
         fp_cmp u_fp_cmp_4(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_4 ),
                  .a_exp( src_exp_4 ),
                  .a_sign( src_sign_4 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_4 ),
                  .r_exp( cmp_result_exp_4 ),
                  .r_sign( cmp_result_sign_4 ),
                  .dst_valid( cmp_valid_4 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_3
         fp_cmp u_fp_cmp_3(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_3 ),
                  .a_exp( src_exp_3 ),
                  .a_sign( src_sign_3 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_3 ),
                  .r_exp( cmp_result_exp_3 ),
                  .r_sign( cmp_result_sign_3 ),
                  .dst_valid( cmp_valid_3 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_2
         fp_cmp u_fp_cmp_2(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_2 ),
                  .a_exp( src_exp_2 ),
                  .a_sign( src_sign_2 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_2 ),
                  .r_exp( cmp_result_exp_2 ),
                  .r_sign( cmp_result_sign_2 ),
                  .dst_valid( cmp_valid_2 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_1
         fp_cmp u_fp_cmp_1(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_1 ),
                  .a_exp( src_exp_1 ),
                  .a_sign( src_sign_1 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_1 ),
                  .r_exp( cmp_result_exp_1 ),
                  .r_sign( cmp_result_sign_1 ),
                  .dst_valid( cmp_valid_1 )
                );

         // rtl_instance:relu_offset_float/u_fp_cmp_0
         fp_cmp u_fp_cmp_0(
                  .clk( clk ),
                  .rstn( rstn ),
                  .enable( enable ),
                  .src_valid( src_valid ),
                  .a_man( src_man_0 ),
                  .a_exp( src_exp_0 ),
                  .a_sign( src_sign_0 ),
                  .b_man( offset_man ),
                  .b_exp( offset_exp ),
                  .b_sign( offset_sign ),
                  .r_man( cmp_result_man_0 ),
                  .r_exp( cmp_result_exp_0 ),
                  .r_sign( cmp_result_sign_0 ),
                  .dst_valid( cmp_valid_0 )
                );

         // rtl_process:relu_offset_float/drive_dst_sign_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_0
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_0
            if (rstn == 1'b0) begin
               // op:_dst/OP0
               dst_sign_0 <= 1'b0;
            end
            else begin
               // op:_dst/OP25
               dst_sign_0 <= cmp_result_sign_0;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_1
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_1
            if (rstn == 1'b0) begin
               // op:_dst/OP3
               dst_sign_1 <= 1'b0;
            end
            else begin
               // op:_dst/OP31
               dst_sign_1 <= cmp_result_sign_1;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_2
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_2
            if (rstn == 1'b0) begin
               // op:_dst/OP6
               dst_sign_2 <= 1'b0;
            end
            else begin
               // op:_dst/OP37
               dst_sign_2 <= cmp_result_sign_2;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_3
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_3
            if (rstn == 1'b0) begin
               // op:_dst/OP9
               dst_sign_3 <= 1'b0;
            end
            else begin
               // op:_dst/OP43
               dst_sign_3 <= cmp_result_sign_3;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_4
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_4
            if (rstn == 1'b0) begin
               // op:_dst/OP12
               dst_sign_4 <= 1'b0;
            end
            else begin
               // op:_dst/OP49
               dst_sign_4 <= cmp_result_sign_4;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_5
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_5
            if (rstn == 1'b0) begin
               // op:_dst/OP15
               dst_sign_5 <= 1'b0;
            end
            else begin
               // op:_dst/OP55
               dst_sign_5 <= cmp_result_sign_5;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_6
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_6
            if (rstn == 1'b0) begin
               // op:_dst/OP18
               dst_sign_6 <= 1'b0;
            end
            else begin
               // op:_dst/OP61
               dst_sign_6 <= cmp_result_sign_6;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_sign_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_sign_7
         // at: cynw_cm_float_int.h:409:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_sign_7
            if (rstn == 1'b0) begin
               // op:_dst/OP21
               dst_sign_7 <= 1'b0;
            end
            else begin
               // op:_dst/OP67
               dst_sign_7 <= cmp_result_sign_7;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_0
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_0
            if (rstn == 1'b0) begin
               // op:_dst/OP1
               dst_exp_0 <= 8'd000;
            end
            else begin
               // op:_dst/OP27
               dst_exp_0 <= cmp_result_exp_0;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_1
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_1
            if (rstn == 1'b0) begin
               // op:_dst/OP4
               dst_exp_1 <= 8'd000;
            end
            else begin
               // op:_dst/OP33
               dst_exp_1 <= cmp_result_exp_1;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_2
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_2
            if (rstn == 1'b0) begin
               // op:_dst/OP7
               dst_exp_2 <= 8'd000;
            end
            else begin
               // op:_dst/OP39
               dst_exp_2 <= cmp_result_exp_2;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_3
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_3
            if (rstn == 1'b0) begin
               // op:_dst/OP10
               dst_exp_3 <= 8'd000;
            end
            else begin
               // op:_dst/OP45
               dst_exp_3 <= cmp_result_exp_3;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_4
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_4
            if (rstn == 1'b0) begin
               // op:_dst/OP13
               dst_exp_4 <= 8'd000;
            end
            else begin
               // op:_dst/OP51
               dst_exp_4 <= cmp_result_exp_4;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_5
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_5
            if (rstn == 1'b0) begin
               // op:_dst/OP16
               dst_exp_5 <= 8'd000;
            end
            else begin
               // op:_dst/OP57
               dst_exp_5 <= cmp_result_exp_5;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_6
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_6
            if (rstn == 1'b0) begin
               // op:_dst/OP19
               dst_exp_6 <= 8'd000;
            end
            else begin
               // op:_dst/OP63
               dst_exp_6 <= cmp_result_exp_6;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_exp_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_exp_7
         // at: cynw_cm_float_int.h:408:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_exp_7
            if (rstn == 1'b0) begin
               // op:_dst/OP22
               dst_exp_7 <= 8'd000;
            end
            else begin
               // op:_dst/OP69
               dst_exp_7 <= cmp_result_exp_7;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_0
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_0
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_0
            if (rstn == 1'b0) begin
               // op:_dst/OP2
               dst_man_0 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP29
               dst_man_0 <= cmp_result_man_0;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_1
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_1
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_1
            if (rstn == 1'b0) begin
               // op:_dst/OP5
               dst_man_1 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP35
               dst_man_1 <= cmp_result_man_1;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_2
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_2
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_2
            if (rstn == 1'b0) begin
               // op:_dst/OP8
               dst_man_2 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP41
               dst_man_2 <= cmp_result_man_2;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_3
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_3
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_3
            if (rstn == 1'b0) begin
               // op:_dst/OP11
               dst_man_3 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP47
               dst_man_3 <= cmp_result_man_3;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_4
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_4
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_4
            if (rstn == 1'b0) begin
               // op:_dst/OP14
               dst_man_4 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP53
               dst_man_4 <= cmp_result_man_4;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_5
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_5
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_5
            if (rstn == 1'b0) begin
               // op:_dst/OP17
               dst_man_5 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP59
               dst_man_5 <= cmp_result_man_5;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_6
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_6
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_6
            if (rstn == 1'b0) begin
               // op:_dst/OP20
               dst_man_6 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP65
               dst_man_6 <= cmp_result_man_6;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_man_7
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_man_7
         // at: cynw_cm_float_int.h:407:14
         always @(posedge clk or negedge rstn)
          begin :drive_dst_man_7
            if (rstn == 1'b0) begin
               // op:_dst/OP23
               dst_man_7 <= 23'd0000000;
            end
            else begin
               // op:_dst/OP71
               dst_man_7 <= cmp_result_man_7;
            end
         end

         // rtl_process:relu_offset_float/drive_dst_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_valid
         // at: relu_offset_float.h:31:7
         // at: relu_offset_float.h:33:7
         always @(posedge clk or negedge rstn)
          begin :drive_dst_valid
            if (rstn == 1'b0) begin
               // op:_dst_valid/OP72
               dst_valid <= 1'd0;
            end
            else begin
               // op:_dst_valid/OP74
               dst_valid <= cmp_valid_0;
            end
         end


endmodule


