// Generated by stratus_hls 19.10-p100  (91500.011111)
// Wed Jan  6 20:15:08 2021
// from relu_offset_float.cpp
#include "relu_offset_float_rtl.h"

struct relu_offset_float;
relu_offset_float::relu_offset_float(sc_module_name name) : sc_module(name) 
    ,clk("clk")
    ,rstn("rstn")
    ,enable("enable")
    ,src_valid("src_valid")
    ,src_man_0("src_man_0")
    ,src_man_1("src_man_1")
    ,src_man_2("src_man_2")
    ,src_man_3("src_man_3")
    ,src_man_4("src_man_4")
    ,src_man_5("src_man_5")
    ,src_man_6("src_man_6")
    ,src_man_7("src_man_7")
    ,src_exp_0("src_exp_0")
    ,src_exp_1("src_exp_1")
    ,src_exp_2("src_exp_2")
    ,src_exp_3("src_exp_3")
    ,src_exp_4("src_exp_4")
    ,src_exp_5("src_exp_5")
    ,src_exp_6("src_exp_6")
    ,src_exp_7("src_exp_7")
    ,src_sign_0("src_sign_0")
    ,src_sign_1("src_sign_1")
    ,src_sign_2("src_sign_2")
    ,src_sign_3("src_sign_3")
    ,src_sign_4("src_sign_4")
    ,src_sign_5("src_sign_5")
    ,src_sign_6("src_sign_6")
    ,src_sign_7("src_sign_7")
    ,offset_man("offset_man")
    ,offset_exp("offset_exp")
    ,offset_sign("offset_sign")
    ,dst_valid("dst_valid")
    ,dst_man_0("dst_man_0")
    ,dst_man_1("dst_man_1")
    ,dst_man_2("dst_man_2")
    ,dst_man_3("dst_man_3")
    ,dst_man_4("dst_man_4")
    ,dst_man_5("dst_man_5")
    ,dst_man_6("dst_man_6")
    ,dst_man_7("dst_man_7")
    ,dst_exp_0("dst_exp_0")
    ,dst_exp_1("dst_exp_1")
    ,dst_exp_2("dst_exp_2")
    ,dst_exp_3("dst_exp_3")
    ,dst_exp_4("dst_exp_4")
    ,dst_exp_5("dst_exp_5")
    ,dst_exp_6("dst_exp_6")
    ,dst_exp_7("dst_exp_7")
    ,dst_sign_0("dst_sign_0")
    ,dst_sign_1("dst_sign_1")
    ,dst_sign_2("dst_sign_2")
    ,dst_sign_3("dst_sign_3")
    ,dst_sign_4("dst_sign_4")
    ,dst_sign_5("dst_sign_5")
    ,dst_sign_6("dst_sign_6")
    ,dst_sign_7("dst_sign_7")
    ,cmp_result_man_0("cmp_result_man_0")
    ,cmp_result_exp_0("cmp_result_exp_0")
    ,cmp_result_sign_0("cmp_result_sign_0")
    ,cmp_valid_0("cmp_valid_0")
    ,cmp_result_man_1("cmp_result_man_1")
    ,cmp_result_exp_1("cmp_result_exp_1")
    ,cmp_result_sign_1("cmp_result_sign_1")
    ,cmp_valid_1("cmp_valid_1")
    ,cmp_result_man_2("cmp_result_man_2")
    ,cmp_result_exp_2("cmp_result_exp_2")
    ,cmp_result_sign_2("cmp_result_sign_2")
    ,cmp_valid_2("cmp_valid_2")
    ,cmp_result_man_3("cmp_result_man_3")
    ,cmp_result_exp_3("cmp_result_exp_3")
    ,cmp_result_sign_3("cmp_result_sign_3")
    ,cmp_valid_3("cmp_valid_3")
    ,cmp_result_man_4("cmp_result_man_4")
    ,cmp_result_exp_4("cmp_result_exp_4")
    ,cmp_result_sign_4("cmp_result_sign_4")
    ,cmp_valid_4("cmp_valid_4")
    ,cmp_result_man_5("cmp_result_man_5")
    ,cmp_result_exp_5("cmp_result_exp_5")
    ,cmp_result_sign_5("cmp_result_sign_5")
    ,cmp_valid_5("cmp_valid_5")
    ,cmp_result_man_6("cmp_result_man_6")
    ,cmp_result_exp_6("cmp_result_exp_6")
    ,cmp_result_sign_6("cmp_result_sign_6")
    ,cmp_valid_6("cmp_valid_6")
    ,cmp_result_man_7("cmp_result_man_7")
    ,cmp_result_exp_7("cmp_result_exp_7")
    ,cmp_result_sign_7("cmp_result_sign_7")
    ,cmp_valid_7("cmp_valid_7")
{
  u_fp_cmp_7 = new fp_cmp("u_fp_cmp_7");
  u_fp_cmp_7->clk(clk);
  u_fp_cmp_7->rstn(rstn);
  u_fp_cmp_7->enable(enable);
  u_fp_cmp_7->src_valid(src_valid);
  u_fp_cmp_7->a_man(src_man_7);
  u_fp_cmp_7->a_exp(src_exp_7);
  u_fp_cmp_7->a_sign(src_sign_7);
  u_fp_cmp_7->b_man(offset_man);
  u_fp_cmp_7->b_exp(offset_exp);
  u_fp_cmp_7->b_sign(offset_sign);
  u_fp_cmp_7->r_man(cmp_result_man_7);
  u_fp_cmp_7->r_exp(cmp_result_exp_7);
  u_fp_cmp_7->r_sign(cmp_result_sign_7);
  u_fp_cmp_7->dst_valid(cmp_valid_7);

  u_fp_cmp_6 = new fp_cmp("u_fp_cmp_6");
  u_fp_cmp_6->clk(clk);
  u_fp_cmp_6->rstn(rstn);
  u_fp_cmp_6->enable(enable);
  u_fp_cmp_6->src_valid(src_valid);
  u_fp_cmp_6->a_man(src_man_6);
  u_fp_cmp_6->a_exp(src_exp_6);
  u_fp_cmp_6->a_sign(src_sign_6);
  u_fp_cmp_6->b_man(offset_man);
  u_fp_cmp_6->b_exp(offset_exp);
  u_fp_cmp_6->b_sign(offset_sign);
  u_fp_cmp_6->r_man(cmp_result_man_6);
  u_fp_cmp_6->r_exp(cmp_result_exp_6);
  u_fp_cmp_6->r_sign(cmp_result_sign_6);
  u_fp_cmp_6->dst_valid(cmp_valid_6);

  u_fp_cmp_5 = new fp_cmp("u_fp_cmp_5");
  u_fp_cmp_5->clk(clk);
  u_fp_cmp_5->rstn(rstn);
  u_fp_cmp_5->enable(enable);
  u_fp_cmp_5->src_valid(src_valid);
  u_fp_cmp_5->a_man(src_man_5);
  u_fp_cmp_5->a_exp(src_exp_5);
  u_fp_cmp_5->a_sign(src_sign_5);
  u_fp_cmp_5->b_man(offset_man);
  u_fp_cmp_5->b_exp(offset_exp);
  u_fp_cmp_5->b_sign(offset_sign);
  u_fp_cmp_5->r_man(cmp_result_man_5);
  u_fp_cmp_5->r_exp(cmp_result_exp_5);
  u_fp_cmp_5->r_sign(cmp_result_sign_5);
  u_fp_cmp_5->dst_valid(cmp_valid_5);

  u_fp_cmp_4 = new fp_cmp("u_fp_cmp_4");
  u_fp_cmp_4->clk(clk);
  u_fp_cmp_4->rstn(rstn);
  u_fp_cmp_4->enable(enable);
  u_fp_cmp_4->src_valid(src_valid);
  u_fp_cmp_4->a_man(src_man_4);
  u_fp_cmp_4->a_exp(src_exp_4);
  u_fp_cmp_4->a_sign(src_sign_4);
  u_fp_cmp_4->b_man(offset_man);
  u_fp_cmp_4->b_exp(offset_exp);
  u_fp_cmp_4->b_sign(offset_sign);
  u_fp_cmp_4->r_man(cmp_result_man_4);
  u_fp_cmp_4->r_exp(cmp_result_exp_4);
  u_fp_cmp_4->r_sign(cmp_result_sign_4);
  u_fp_cmp_4->dst_valid(cmp_valid_4);

  u_fp_cmp_3 = new fp_cmp("u_fp_cmp_3");
  u_fp_cmp_3->clk(clk);
  u_fp_cmp_3->rstn(rstn);
  u_fp_cmp_3->enable(enable);
  u_fp_cmp_3->src_valid(src_valid);
  u_fp_cmp_3->a_man(src_man_3);
  u_fp_cmp_3->a_exp(src_exp_3);
  u_fp_cmp_3->a_sign(src_sign_3);
  u_fp_cmp_3->b_man(offset_man);
  u_fp_cmp_3->b_exp(offset_exp);
  u_fp_cmp_3->b_sign(offset_sign);
  u_fp_cmp_3->r_man(cmp_result_man_3);
  u_fp_cmp_3->r_exp(cmp_result_exp_3);
  u_fp_cmp_3->r_sign(cmp_result_sign_3);
  u_fp_cmp_3->dst_valid(cmp_valid_3);

  u_fp_cmp_2 = new fp_cmp("u_fp_cmp_2");
  u_fp_cmp_2->clk(clk);
  u_fp_cmp_2->rstn(rstn);
  u_fp_cmp_2->enable(enable);
  u_fp_cmp_2->src_valid(src_valid);
  u_fp_cmp_2->a_man(src_man_2);
  u_fp_cmp_2->a_exp(src_exp_2);
  u_fp_cmp_2->a_sign(src_sign_2);
  u_fp_cmp_2->b_man(offset_man);
  u_fp_cmp_2->b_exp(offset_exp);
  u_fp_cmp_2->b_sign(offset_sign);
  u_fp_cmp_2->r_man(cmp_result_man_2);
  u_fp_cmp_2->r_exp(cmp_result_exp_2);
  u_fp_cmp_2->r_sign(cmp_result_sign_2);
  u_fp_cmp_2->dst_valid(cmp_valid_2);

  u_fp_cmp_1 = new fp_cmp("u_fp_cmp_1");
  u_fp_cmp_1->clk(clk);
  u_fp_cmp_1->rstn(rstn);
  u_fp_cmp_1->enable(enable);
  u_fp_cmp_1->src_valid(src_valid);
  u_fp_cmp_1->a_man(src_man_1);
  u_fp_cmp_1->a_exp(src_exp_1);
  u_fp_cmp_1->a_sign(src_sign_1);
  u_fp_cmp_1->b_man(offset_man);
  u_fp_cmp_1->b_exp(offset_exp);
  u_fp_cmp_1->b_sign(offset_sign);
  u_fp_cmp_1->r_man(cmp_result_man_1);
  u_fp_cmp_1->r_exp(cmp_result_exp_1);
  u_fp_cmp_1->r_sign(cmp_result_sign_1);
  u_fp_cmp_1->dst_valid(cmp_valid_1);

  u_fp_cmp_0 = new fp_cmp("u_fp_cmp_0");
  u_fp_cmp_0->clk(clk);
  u_fp_cmp_0->rstn(rstn);
  u_fp_cmp_0->enable(enable);
  u_fp_cmp_0->src_valid(src_valid);
  u_fp_cmp_0->a_man(src_man_0);
  u_fp_cmp_0->a_exp(src_exp_0);
  u_fp_cmp_0->a_sign(src_sign_0);
  u_fp_cmp_0->b_man(offset_man);
  u_fp_cmp_0->b_exp(offset_exp);
  u_fp_cmp_0->b_sign(offset_sign);
  u_fp_cmp_0->r_man(cmp_result_man_0);
  u_fp_cmp_0->r_exp(cmp_result_exp_0);
  u_fp_cmp_0->r_sign(cmp_result_sign_0);
  u_fp_cmp_0->dst_valid(cmp_valid_0);

  SC_METHOD(drive_dst_sign_0);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_1);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_2);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_3);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_4);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_5);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_6);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_sign_7);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_0);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_1);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_2);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_3);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_4);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_5);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_6);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_exp_7);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_0);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_1);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_2);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_3);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_4);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_5);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_6);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_man_7);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_dst_valid);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_0(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_0 = 0ULL;
  } else {
    dst_sign_0 = cmp_result_sign_0.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_1(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_1 = 0ULL;
  } else {
    dst_sign_1 = cmp_result_sign_1.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_2(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_2 = 0ULL;
  } else {
    dst_sign_2 = cmp_result_sign_2.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_3(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_3 = 0ULL;
  } else {
    dst_sign_3 = cmp_result_sign_3.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_4(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_4 = 0ULL;
  } else {
    dst_sign_4 = cmp_result_sign_4.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_5(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_5 = 0ULL;
  } else {
    dst_sign_5 = cmp_result_sign_5.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_6(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_6 = 0ULL;
  } else {
    dst_sign_6 = cmp_result_sign_6.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_sign_7(){
  if ( (rstn.read() == 0ULL) ) {
    dst_sign_7 = 0ULL;
  } else {
    dst_sign_7 = cmp_result_sign_7.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_0(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_0 = 0ULL;
  } else {
    dst_exp_0 = cmp_result_exp_0.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_1(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_1 = 0ULL;
  } else {
    dst_exp_1 = cmp_result_exp_1.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_2(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_2 = 0ULL;
  } else {
    dst_exp_2 = cmp_result_exp_2.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_3(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_3 = 0ULL;
  } else {
    dst_exp_3 = cmp_result_exp_3.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_4(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_4 = 0ULL;
  } else {
    dst_exp_4 = cmp_result_exp_4.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_5(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_5 = 0ULL;
  } else {
    dst_exp_5 = cmp_result_exp_5.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_6(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_6 = 0ULL;
  } else {
    dst_exp_6 = cmp_result_exp_6.read();
  }
}
// resource: regr_ac_8
void relu_offset_float::drive_dst_exp_7(){
  if ( (rstn.read() == 0ULL) ) {
    dst_exp_7 = 0ULL;
  } else {
    dst_exp_7 = cmp_result_exp_7.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_0(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_0 = 0ULL;
  } else {
    dst_man_0 = cmp_result_man_0.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_1(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_1 = 0ULL;
  } else {
    dst_man_1 = cmp_result_man_1.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_2(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_2 = 0ULL;
  } else {
    dst_man_2 = cmp_result_man_2.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_3(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_3 = 0ULL;
  } else {
    dst_man_3 = cmp_result_man_3.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_4(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_4 = 0ULL;
  } else {
    dst_man_4 = cmp_result_man_4.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_5(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_5 = 0ULL;
  } else {
    dst_man_5 = cmp_result_man_5.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_6(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_6 = 0ULL;
  } else {
    dst_man_6 = cmp_result_man_6.read();
  }
}
// resource: regr_ac_23
void relu_offset_float::drive_dst_man_7(){
  if ( (rstn.read() == 0ULL) ) {
    dst_man_7 = 0ULL;
  } else {
    dst_man_7 = cmp_result_man_7.read();
  }
}
// resource: regr_ac_1
void relu_offset_float::drive_dst_valid(){
  if ( (rstn.read() == 0ULL) ) {
    dst_valid = 0ULL;
  } else {
    dst_valid = cmp_valid_0.read();
  }
}
