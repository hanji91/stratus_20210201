// Generated by stratus_hls 19.10-p100  (91500.011111)
// Tue Jan 12 16:27:28 2021
// from finish_gen.cpp

`timescale 1ps / 1ps

      
module finish_gen(clk, rstn, enable, clear, cnt_enable, total_num, finish);

      input clk;
      input rstn;
      input enable;
      input clear;
      input cnt_enable;
      input [31:0] total_num;
      output finish;
      reg finish;
      wire finish_gen_Equal_32Ux32U_1U_4_11_out1;
      wire finish_gen_And_1Ux1U_1U_4_12_out1;
      reg[31:0] finish_gen_N_Mux_32_2_11_4_9_out1;
      wire[31:0] finish_gen_Add2i1u32_4_8_out1;
      wire finish_gen_Or_1Ux1U_1U_4_7_out1;
      reg[31:0] finish_gen_Muxi0u32u1_4_10_out1;
      reg[31:0] cnt;
      reg[7:0] finish_gen_MuxAdd2i1u8i0u1_4_6_out1;
      wire finish_gen_And_1Ux1U_1U_4_4_out1;
      wire finish_gen_Not_1U_1U_4_3_out1;
      reg last_en;
      wire finish_gen_Or_1Ux1U_1U_4_2_out1;
      reg[7:0] internal_cnt;
      wire finish_gen_Nei20u8_4_1_out1;
      wire finish_gen_And_1Ux1U_1U_4_5_out1;

         // rtl_process:finish_gen/drive_finish
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_finish
         // at: finish_gen.h:46:8
         always @(posedge clk or negedge rstn)
          begin :drive_finish
            if (rstn == 1'b0) begin
               // op:_finish/OP0
               finish <= 1'd0;
            end
            else begin
               // op:_finish/OP11
               finish <= finish_gen_And_1Ux1U_1U_4_5_out1;
            end
         end

         // rtl_instance:finish_gen/finish_gen_Nei20u8_4_1
         // Resource=finish_gen_Nei20u8_4, Function=ne : Inputs=8 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:61:14
         assign finish_gen_Nei20u8_4_1_out1 = internal_cnt != 8'd020;

         // rtl_instance:finish_gen/finish_gen_Or_1Ux1U_1U_4_2
         // Resource=finish_gen_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:63:10
         assign finish_gen_Or_1Ux1U_1U_4_2_out1 = last_en | finish;

         // rtl_instance:finish_gen/finish_gen_Not_1U_1U_4_3
         // Resource=finish_gen_Not_1U_1U_4, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:59:10
         assign finish_gen_Not_1U_1U_4_3_out1 = !clear;

         // rtl_instance:finish_gen/finish_gen_And_1Ux1U_1U_4_4
         // Resource=finish_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:61:10
         assign finish_gen_And_1Ux1U_1U_4_4_out1 = finish_gen_Or_1Ux1U_1U_4_2_out1 & finish_gen_Nei20u8_4_1_out1;

         // rtl_instance:finish_gen/finish_gen_And_1Ux1U_1U_4_5
         // Resource=finish_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:59:10
         assign finish_gen_And_1Ux1U_1U_4_5_out1 = finish_gen_And_1Ux1U_1U_4_4_out1 & finish_gen_Not_1U_1U_4_3_out1;

         // rtl_process:finish_gen/drive_internal_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_internal_cnt
         // at: finish_gen.h:61:14
         // at: finish_gen.h:49:7
         // at: finish_gen.h:53:7
         always @(posedge clk or negedge rstn)
          begin :drive_internal_cnt
            if (rstn == 1'b0) begin
               // op:_internal_cnt/OP20
               internal_cnt <= 8'd000;
            end
            else begin
               // op:_internal_cnt/OP26
               internal_cnt <= finish_gen_MuxAdd2i1u8i0u1_4_6_out1;
            end
         end

         // rtl_instance:finish_gen/finish_gen_MuxAdd2i1u8i0u1_4
         always @(finish or internal_cnt)
          begin :finish_gen_MuxAdd2i1u8i0u1_4_6
            if (finish) begin
               finish_gen_MuxAdd2i1u8i0u1_4_6_out1 = internal_cnt + 8'd001;
            end
            else begin
               finish_gen_MuxAdd2i1u8i0u1_4_6_out1 = 8'd000;
            end
         end

         // rtl_process:finish_gen/drive_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_cnt
         // at: finish_gen.h:40:7
         // at: finish_gen.h:44:7
         // at: finish_gen.h:28:10
         always @(posedge clk or negedge rstn)
          begin :drive_cnt
            if (rstn == 1'b0) begin
               // op:_up_count/OP29
               cnt <= 32'd0000000000;
            end
            else begin
               // op:_up_count/OP39
               cnt <= finish_gen_Muxi0u32u1_4_10_out1;
            end
         end

         // rtl_instance:finish_gen/finish_gen_Or_1Ux1U_1U_4_7
         // Resource=finish_gen_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:41:27
         assign finish_gen_Or_1Ux1U_1U_4_7_out1 = clear | last_en;

         // rtl_instance:finish_gen/finish_gen_Add2i1u32_4_8
         // Resource=finish_gen_Add2i1u32_4, Function=add : Inputs=32 Outputs=32
         // Implements 1 operation(s)
         // at: finish_gen.h:44:24
         assign finish_gen_Add2i1u32_4_8_out1 = cnt + 32'd0000000001;

         // rtl_instance:finish_gen/finish_gen_N_Mux_32_2_11_4
         always @(cnt_enable or cnt or finish_gen_Add2i1u32_4_8_out1)
          begin :finish_gen_N_Mux_32_2_11_4_9
            if (cnt_enable) begin
               finish_gen_N_Mux_32_2_11_4_9_out1 = finish_gen_Add2i1u32_4_8_out1;
            end
            else begin
               finish_gen_N_Mux_32_2_11_4_9_out1 = cnt;
            end
         end

         // rtl_instance:finish_gen/finish_gen_Muxi0u32u1_4
         always @(finish_gen_Or_1Ux1U_1U_4_7_out1 or finish_gen_N_Mux_32_2_11_4_9_out1)
          begin :finish_gen_Muxi0u32u1_4_10
            if (finish_gen_Or_1Ux1U_1U_4_7_out1) begin
               finish_gen_Muxi0u32u1_4_10_out1 = 32'd0000000000;
            end
            else begin
               finish_gen_Muxi0u32u1_4_10_out1 = finish_gen_N_Mux_32_2_11_4_9_out1;
            end
         end

         // rtl_process:finish_gen/drive_last_en
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_last_en
         // at: finish_gen.h:63:14
         // at: finish_gen.h:41:30
         // at: finish_gen.h:26:7
         // at: finish_gen.h:34:7
         always @(posedge clk or negedge rstn)
          begin :drive_last_en
            if (rstn == 1'b0) begin
               // op:_gen_last_en/OP48
               last_en <= 1'd0;
            end
            else begin
               // op:_gen_last_en/OP54
               last_en <= finish_gen_And_1Ux1U_1U_4_12_out1;
            end
         end

         // rtl_instance:finish_gen/finish_gen_Equal_32Ux32U_1U_4_11
         // Resource=finish_gen_Equal_32Ux32U_1U_4, Function=eq : Inputs=32,32 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:28:21
         assign finish_gen_Equal_32Ux32U_1U_4_11_out1 = cnt == total_num;

         // rtl_instance:finish_gen/finish_gen_And_1Ux1U_1U_4_12
         // Resource=finish_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: finish_gen.h:27:10
         assign finish_gen_And_1Ux1U_1U_4_12_out1 = finish_gen_Equal_32Ux32U_1U_4_11_out1 & enable;


endmodule


