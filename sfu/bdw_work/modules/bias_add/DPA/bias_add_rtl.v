// Generated by stratus_hls 19.10-p100  (91500.011111)
// Sun Jan 17 18:55:31 2021
// from bias_add.cpp

`timescale 1ps / 1ps

      
module bias_add(clk, rstn, enable, src_valid, src_0, src_1, src_2, src_3, src_4, src_5, src_6, src_7, bias_data, dst_valid, dst_0, dst_1, dst_2, dst_3, dst_4, dst_5, dst_6, dst_7);

      input clk;
      input rstn;
      input enable;
      input src_valid;
      input [31:0] src_0;
      input [31:0] src_1;
      input [31:0] src_2;
      input [31:0] src_3;
      input [31:0] src_4;
      input [31:0] src_5;
      input [31:0] src_6;
      input [31:0] src_7;
      input [511:0] bias_data;
      output dst_valid;
      reg dst_valid;
      output [31:0] dst_0;
      reg [31:0] dst_0;
      output [31:0] dst_1;
      reg [31:0] dst_1;
      output [31:0] dst_2;
      reg [31:0] dst_2;
      output [31:0] dst_3;
      reg [31:0] dst_3;
      output [31:0] dst_4;
      reg [31:0] dst_4;
      output [31:0] dst_5;
      reg [31:0] dst_5;
      output [31:0] dst_6;
      reg [31:0] dst_6;
      output [31:0] dst_7;
      reg [31:0] dst_7;
      reg r_src_valid;
      wire[1:0] bias_add_Add2i1u2_4_2_out1;
      reg[1:0] bias_add_N_Mux_2_2_3_4_3_out1;
      wire[15:0] bias_add_N_Mux_16_2_4_1_19_in3;
      wire[15:0] bias_add_N_Mux_16_2_4_1_18_in3;
      wire[15:0] bias_add_N_Mux_16_2_4_1_17_in3;
      wire[15:0] bias_add_N_Mux_16_2_4_1_16_in3;
      wire[15:0] bias_add_N_Mux_16_2_4_1_15_in3;
      wire[15:0] bias_add_N_Mux_16_2_4_1_14_in3;
      wire[15:0] bias_add_N_Mux_16_2_4_1_13_in3;
      reg[15:0] bias_add_N_Mux_16_3_6_1_12_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_12_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_12_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_12_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_11_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_11_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_11_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_11_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_10_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_10_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_10_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_10_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_9_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_9_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_9_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_9_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_8_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_8_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_8_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_8_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_7_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_7_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_7_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_7_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_6_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_6_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_6_in3;
      wire[15:0] bias_add_N_Mux_16_3_6_1_6_in4;
      reg[15:0] bias_add_N_Mux_16_3_6_1_5_out1;
      wire[15:0] bias_add_N_Mux_16_3_6_1_5_in2;
      wire[15:0] bias_add_N_Mux_16_3_6_1_5_in3;
      reg[511:0] r_bias_data;
      wire[15:0] bias_add_N_Mux_16_3_6_1_5_in4;
      reg[1:0] bias_mux_cnt;
      wire bias_add_OrReduction_2U_1U_4_4_out1;
      reg[31:0] r_src_7;
      reg[15:0] bias_add_N_Mux_16_2_4_1_13_out1;
      reg[31:0] r_src_6;
      reg[15:0] bias_add_N_Mux_16_2_4_1_14_out1;
      reg[31:0] r_src_5;
      reg[15:0] bias_add_N_Mux_16_2_4_1_15_out1;
      reg[31:0] r_src_4;
      reg[15:0] bias_add_N_Mux_16_2_4_1_16_out1;
      reg[31:0] r_src_3;
      reg[15:0] bias_add_N_Mux_16_2_4_1_17_out1;
      reg[31:0] r_src_2;
      reg[15:0] bias_add_N_Mux_16_2_4_1_18_out1;
      reg[31:0] r_src_1;
      reg[15:0] bias_add_N_Mux_16_2_4_1_19_out1;
      reg[31:0] r_src_0;
      reg[15:0] bias_add_N_Mux_16_2_4_1_20_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_28_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_27_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_26_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_25_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_24_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_23_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_22_out1;
      /*signed*/wire[31:0] bias_add_Add_32Ux16S_32S_4_21_out1;
      /*signed*/reg[31:0] add_result_7;
      /*signed*/reg[31:0] add_result_6;
      /*signed*/reg[31:0] add_result_5;
      /*signed*/reg[31:0] add_result_4;
      /*signed*/reg[31:0] add_result_3;
      /*signed*/reg[31:0] add_result_2;
      /*signed*/reg[31:0] add_result_1;
      /*signed*/reg[31:0] add_result_0;
      reg r2_src_valid;
      reg bias_add_N_Muxb_1_2_2_4_1_out1;

         // rtl_process:bias_add/drive_dst_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dst_valid
         // at: bias_add.h:155:5
         // at: bias_add.h:159:5
         always @(posedge clk or negedge rstn)
          begin :drive_dst_valid
            if (rstn == 1'b0) begin
               // op:_dst_valid/OP0
               dst_valid <= 1'd0;
            end
            else begin
               // op:_dst_valid/OP5
               dst_valid <= bias_add_N_Muxb_1_2_2_4_1_out1;
            end
         end

         // rtl_instance:bias_add/bias_add_N_Muxb_1_2_2_4
         always @(src_valid or enable or r2_src_valid)
          begin :bias_add_N_Muxb_1_2_2_4_1
            if (enable) begin
               bias_add_N_Muxb_1_2_2_4_1_out1 = r2_src_valid;
            end
            else begin
               bias_add_N_Muxb_1_2_2_4_1_out1 = src_valid;
            end
         end

         // rtl_process:bias_add/drive_dst_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_0
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_0
            if (rstn == 1'b0) begin
               // op:_dst/OP9
               dst_0 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP22
                        dst_0 <= add_result_0;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP38
                     dst_0 <= {16'b0000000000000000, src_0[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_1
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_1
            if (rstn == 1'b0) begin
               // op:_dst/OP10
               dst_1 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP24
                        dst_1 <= add_result_1;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP40
                     dst_1 <= {16'b0000000000000000, src_1[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_2
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_2
            if (rstn == 1'b0) begin
               // op:_dst/OP11
               dst_2 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP26
                        dst_2 <= add_result_2;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP42
                     dst_2 <= {16'b0000000000000000, src_2[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_3
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_3
            if (rstn == 1'b0) begin
               // op:_dst/OP12
               dst_3 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP28
                        dst_3 <= add_result_3;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP44
                     dst_3 <= {16'b0000000000000000, src_3[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_4
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_4
            if (rstn == 1'b0) begin
               // op:_dst/OP13
               dst_4 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP30
                        dst_4 <= add_result_4;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP46
                     dst_4 <= {16'b0000000000000000, src_4[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_5
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_5
            if (rstn == 1'b0) begin
               // op:_dst/OP14
               dst_5 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP32
                        dst_5 <= add_result_5;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP48
                     dst_5 <= {16'b0000000000000000, src_5[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_6
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_6
            if (rstn == 1'b0) begin
               // op:_dst/OP15
               dst_6 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP34
                        dst_6 <= add_result_6;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP50
                     dst_6 <= {16'b0000000000000000, src_6[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_dst_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dst_7
         // at: bias_add.h:136:10
         // at: bias_add.h:141:10
         // at: bias_add.h:148:10
         always @(posedge clk or negedge rstn)
          begin :drive_dst_7
            if (rstn == 1'b0) begin
               // op:_dst/OP16
               dst_7 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     if (r2_src_valid) begin
                        // op:_dst/OP36
                        dst_7 <= add_result_7;
                     end
                  end
                  
                  1'b0:                   begin
                     // op:_dst/OP52
                     dst_7 <= {16'b0000000000000000, src_7[15:0]};
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_0
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_0
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_0
            if (rstn == 1'b0) begin
               // op:_add/OP202
               add_result_0 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP215
                     add_result_0 <= bias_add_Add_32Ux16S_32S_4_21_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP244
                     add_result_0 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_1
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_1
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_1
            if (rstn == 1'b0) begin
               // op:_add/OP203
               add_result_1 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP219
                     add_result_1 <= bias_add_Add_32Ux16S_32S_4_22_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP245
                     add_result_1 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_2
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_2
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_2
            if (rstn == 1'b0) begin
               // op:_add/OP204
               add_result_2 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP223
                     add_result_2 <= bias_add_Add_32Ux16S_32S_4_23_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP246
                     add_result_2 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_3
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_3
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_3
            if (rstn == 1'b0) begin
               // op:_add/OP205
               add_result_3 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP227
                     add_result_3 <= bias_add_Add_32Ux16S_32S_4_24_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP247
                     add_result_3 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_4
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_4
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_4
            if (rstn == 1'b0) begin
               // op:_add/OP206
               add_result_4 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP231
                     add_result_4 <= bias_add_Add_32Ux16S_32S_4_25_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP248
                     add_result_4 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_5
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_5
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_5
            if (rstn == 1'b0) begin
               // op:_add/OP207
               add_result_5 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP235
                     add_result_5 <= bias_add_Add_32Ux16S_32S_4_26_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP249
                     add_result_5 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_6
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_6
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_6
            if (rstn == 1'b0) begin
               // op:_add/OP208
               add_result_6 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP239
                     add_result_6 <= bias_add_Add_32Ux16S_32S_4_27_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP250
                     add_result_6 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_process:bias_add/drive_add_result_7
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_add_result_7
         // at: bias_add.h:148:14
         // at: bias_add.h:117:17
         // at: bias_add.h:127:21
         // at: bias_add.h:122:17
         always @(posedge clk or negedge rstn)
          begin :drive_add_result_7
            if (rstn == 1'b0) begin
               // op:_add/OP209
               add_result_7 <= 32'd0000000000;
            end
            else begin
               case (enable) 

                  1'b1:                   begin
                     // op:_add/OP243
                     add_result_7 <= bias_add_Add_32Ux16S_32S_4_28_out1;
                  end
                  
                  1'b0:                   begin
                     // op:_add/OP251
                     add_result_7 <= 32'd0000000000;
                  end
                  
               endcase

            end
         end

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_21
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_21_out1 = r_src_0 + {{ 16 {bias_add_N_Mux_16_2_4_1_20_out1[15]}}, bias_add_N_Mux_16_2_4_1_20_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_22
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_22_out1 = r_src_1 + {{ 16 {bias_add_N_Mux_16_2_4_1_19_out1[15]}}, bias_add_N_Mux_16_2_4_1_19_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_23
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_23_out1 = r_src_2 + {{ 16 {bias_add_N_Mux_16_2_4_1_18_out1[15]}}, bias_add_N_Mux_16_2_4_1_18_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_24
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_24_out1 = r_src_3 + {{ 16 {bias_add_N_Mux_16_2_4_1_17_out1[15]}}, bias_add_N_Mux_16_2_4_1_17_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_25
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_25_out1 = r_src_4 + {{ 16 {bias_add_N_Mux_16_2_4_1_16_out1[15]}}, bias_add_N_Mux_16_2_4_1_16_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_26
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_26_out1 = r_src_5 + {{ 16 {bias_add_N_Mux_16_2_4_1_15_out1[15]}}, bias_add_N_Mux_16_2_4_1_15_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_27
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_27_out1 = r_src_6 + {{ 16 {bias_add_N_Mux_16_2_4_1_14_out1[15]}}, bias_add_N_Mux_16_2_4_1_14_out1};

         // rtl_instance:bias_add/bias_add_Add_32Ux16S_32S_4_28
         // Resource=bias_add_Add_32Ux16S_32S_4, Function=add : Inputs=32,16S Outputs=32S
         // Implements 1 operation(s)
         // at: bias_add.h:127:48
         assign bias_add_Add_32Ux16S_32S_4_28_out1 = r_src_7 + {{ 16 {bias_add_N_Mux_16_2_4_1_13_out1[15]}}, bias_add_N_Mux_16_2_4_1_13_out1};

         // rtl_instance:bias_add/bias_add_OrReduction_2U_1U_4_4
         // Resource=bias_add_OrReduction_2U_1U_4, Function=or : Inputs=2 Outputs=1
         // Implements 1 operation(s)
         // at: bias_add.h:63:9
         assign bias_add_OrReduction_2U_1U_4_4_out1 = (|bias_mux_cnt);

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_5_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_5_in4
         // at: bias_add.h:101:55
         assign bias_add_N_Mux_16_3_6_1_5_in4 = r_bias_data[511:496];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_5_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_5_in3
         // at: bias_add.h:91:55
         assign bias_add_N_Mux_16_3_6_1_5_in3 = r_bias_data[383:368];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_5_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_5_in2
         // at: bias_add.h:81:55
         assign bias_add_N_Mux_16_3_6_1_5_in2 = r_bias_data[255:240];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_5_in4 or bias_add_N_Mux_16_3_6_1_5_in3 or bias_add_N_Mux_16_3_6_1_5_in2)
          begin :bias_add_N_Mux_16_3_6_1_5
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_5_out1 = bias_add_N_Mux_16_3_6_1_5_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_5_out1 = bias_add_N_Mux_16_3_6_1_5_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_5_out1 = bias_add_N_Mux_16_3_6_1_5_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_6_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_6_in4
         // at: bias_add.h:100:55
         assign bias_add_N_Mux_16_3_6_1_6_in4 = r_bias_data[495:480];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_6_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_6_in3
         // at: bias_add.h:90:55
         assign bias_add_N_Mux_16_3_6_1_6_in3 = r_bias_data[367:352];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_6_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_6_in2
         // at: bias_add.h:80:55
         assign bias_add_N_Mux_16_3_6_1_6_in2 = r_bias_data[239:224];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_6_in4 or bias_add_N_Mux_16_3_6_1_6_in3 or bias_add_N_Mux_16_3_6_1_6_in2)
          begin :bias_add_N_Mux_16_3_6_1_6
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_6_out1 = bias_add_N_Mux_16_3_6_1_6_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_6_out1 = bias_add_N_Mux_16_3_6_1_6_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_6_out1 = bias_add_N_Mux_16_3_6_1_6_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_7_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_7_in4
         // at: bias_add.h:99:55
         assign bias_add_N_Mux_16_3_6_1_7_in4 = r_bias_data[479:464];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_7_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_7_in3
         // at: bias_add.h:89:55
         assign bias_add_N_Mux_16_3_6_1_7_in3 = r_bias_data[351:336];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_7_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_7_in2
         // at: bias_add.h:79:55
         assign bias_add_N_Mux_16_3_6_1_7_in2 = r_bias_data[223:208];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_7_in4 or bias_add_N_Mux_16_3_6_1_7_in3 or bias_add_N_Mux_16_3_6_1_7_in2)
          begin :bias_add_N_Mux_16_3_6_1_7
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_7_out1 = bias_add_N_Mux_16_3_6_1_7_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_7_out1 = bias_add_N_Mux_16_3_6_1_7_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_7_out1 = bias_add_N_Mux_16_3_6_1_7_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_8_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_8_in4
         // at: bias_add.h:98:55
         assign bias_add_N_Mux_16_3_6_1_8_in4 = r_bias_data[463:448];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_8_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_8_in3
         // at: bias_add.h:88:55
         assign bias_add_N_Mux_16_3_6_1_8_in3 = r_bias_data[335:320];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_8_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_8_in2
         // at: bias_add.h:78:55
         assign bias_add_N_Mux_16_3_6_1_8_in2 = r_bias_data[207:192];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_8_in4 or bias_add_N_Mux_16_3_6_1_8_in3 or bias_add_N_Mux_16_3_6_1_8_in2)
          begin :bias_add_N_Mux_16_3_6_1_8
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_8_out1 = bias_add_N_Mux_16_3_6_1_8_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_8_out1 = bias_add_N_Mux_16_3_6_1_8_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_8_out1 = bias_add_N_Mux_16_3_6_1_8_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_9_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_9_in4
         // at: bias_add.h:97:55
         assign bias_add_N_Mux_16_3_6_1_9_in4 = r_bias_data[447:432];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_9_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_9_in3
         // at: bias_add.h:87:55
         assign bias_add_N_Mux_16_3_6_1_9_in3 = r_bias_data[319:304];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_9_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_9_in2
         // at: bias_add.h:77:55
         assign bias_add_N_Mux_16_3_6_1_9_in2 = r_bias_data[191:176];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_9_in4 or bias_add_N_Mux_16_3_6_1_9_in3 or bias_add_N_Mux_16_3_6_1_9_in2)
          begin :bias_add_N_Mux_16_3_6_1_9
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_9_out1 = bias_add_N_Mux_16_3_6_1_9_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_9_out1 = bias_add_N_Mux_16_3_6_1_9_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_9_out1 = bias_add_N_Mux_16_3_6_1_9_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_10_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_10_in4
         // at: bias_add.h:96:55
         assign bias_add_N_Mux_16_3_6_1_10_in4 = r_bias_data[431:416];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_10_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_10_in3
         // at: bias_add.h:86:55
         assign bias_add_N_Mux_16_3_6_1_10_in3 = r_bias_data[303:288];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_10_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_10_in2
         // at: bias_add.h:76:55
         assign bias_add_N_Mux_16_3_6_1_10_in2 = r_bias_data[175:160];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_10_in4 or bias_add_N_Mux_16_3_6_1_10_in3 or bias_add_N_Mux_16_3_6_1_10_in2)
          begin :bias_add_N_Mux_16_3_6_1_10
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_10_out1 = bias_add_N_Mux_16_3_6_1_10_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_10_out1 = bias_add_N_Mux_16_3_6_1_10_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_10_out1 = bias_add_N_Mux_16_3_6_1_10_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_11_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_11_in4
         // at: bias_add.h:95:55
         assign bias_add_N_Mux_16_3_6_1_11_in4 = r_bias_data[415:400];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_11_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_11_in3
         // at: bias_add.h:85:55
         assign bias_add_N_Mux_16_3_6_1_11_in3 = r_bias_data[287:272];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_11_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_11_in2
         // at: bias_add.h:75:55
         assign bias_add_N_Mux_16_3_6_1_11_in2 = r_bias_data[159:144];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_11_in4 or bias_add_N_Mux_16_3_6_1_11_in3 or bias_add_N_Mux_16_3_6_1_11_in2)
          begin :bias_add_N_Mux_16_3_6_1_11
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_11_out1 = bias_add_N_Mux_16_3_6_1_11_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_11_out1 = bias_add_N_Mux_16_3_6_1_11_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_11_out1 = bias_add_N_Mux_16_3_6_1_11_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_12_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_12_in4
         // at: bias_add.h:94:55
         assign bias_add_N_Mux_16_3_6_1_12_in4 = r_bias_data[399:384];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_12_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_12_in3
         // at: bias_add.h:84:55
         assign bias_add_N_Mux_16_3_6_1_12_in3 = r_bias_data[271:256];

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_3_6_1_12_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_3_6_1_12_in2
         // at: bias_add.h:74:55
         assign bias_add_N_Mux_16_3_6_1_12_in2 = r_bias_data[143:128];

         // rtl_instance:bias_add/bias_add_N_Mux_16_3_6_1
         always @(bias_mux_cnt or bias_add_N_Mux_16_3_6_1_12_in4 or bias_add_N_Mux_16_3_6_1_12_in3 or bias_add_N_Mux_16_3_6_1_12_in2)
          begin :bias_add_N_Mux_16_3_6_1_12
            case (bias_mux_cnt) 

               2'd1:                begin
                  bias_add_N_Mux_16_3_6_1_12_out1 = bias_add_N_Mux_16_3_6_1_12_in2;
               end
               
               2'd2:                begin
                  bias_add_N_Mux_16_3_6_1_12_out1 = bias_add_N_Mux_16_3_6_1_12_in3;
               end
               
               default:                begin
                  bias_add_N_Mux_16_3_6_1_12_out1 = bias_add_N_Mux_16_3_6_1_12_in4;
               end
               
            endcase

         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_13_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_13_in3
         // at: bias_add.h:71:55
         assign bias_add_N_Mux_16_2_4_1_13_in3 = r_bias_data[127:112];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_5_out1 or bias_add_N_Mux_16_2_4_1_13_in3)
          begin :bias_add_N_Mux_16_2_4_1_13
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_13_out1 = bias_add_N_Mux_16_3_6_1_5_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_13_out1 = bias_add_N_Mux_16_2_4_1_13_in3;
            end
         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_14_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_14_in3
         // at: bias_add.h:70:55
         assign bias_add_N_Mux_16_2_4_1_14_in3 = r_bias_data[111:96];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_6_out1 or bias_add_N_Mux_16_2_4_1_14_in3)
          begin :bias_add_N_Mux_16_2_4_1_14
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_14_out1 = bias_add_N_Mux_16_3_6_1_6_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_14_out1 = bias_add_N_Mux_16_2_4_1_14_in3;
            end
         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_15_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_15_in3
         // at: bias_add.h:69:55
         assign bias_add_N_Mux_16_2_4_1_15_in3 = r_bias_data[95:80];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_7_out1 or bias_add_N_Mux_16_2_4_1_15_in3)
          begin :bias_add_N_Mux_16_2_4_1_15
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_15_out1 = bias_add_N_Mux_16_3_6_1_7_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_15_out1 = bias_add_N_Mux_16_2_4_1_15_in3;
            end
         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_16_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_16_in3
         // at: bias_add.h:68:55
         assign bias_add_N_Mux_16_2_4_1_16_in3 = r_bias_data[79:64];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_8_out1 or bias_add_N_Mux_16_2_4_1_16_in3)
          begin :bias_add_N_Mux_16_2_4_1_16
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_16_out1 = bias_add_N_Mux_16_3_6_1_8_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_16_out1 = bias_add_N_Mux_16_2_4_1_16_in3;
            end
         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_17_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_17_in3
         // at: bias_add.h:67:55
         assign bias_add_N_Mux_16_2_4_1_17_in3 = r_bias_data[63:48];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_9_out1 or bias_add_N_Mux_16_2_4_1_17_in3)
          begin :bias_add_N_Mux_16_2_4_1_17
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_17_out1 = bias_add_N_Mux_16_3_6_1_9_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_17_out1 = bias_add_N_Mux_16_2_4_1_17_in3;
            end
         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_18_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_18_in3
         // at: bias_add.h:66:55
         assign bias_add_N_Mux_16_2_4_1_18_in3 = r_bias_data[47:32];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_10_out1 or bias_add_N_Mux_16_2_4_1_18_in3)
          begin :bias_add_N_Mux_16_2_4_1_18
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_18_out1 = bias_add_N_Mux_16_3_6_1_10_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_18_out1 = bias_add_N_Mux_16_2_4_1_18_in3;
            end
         end

         // rtl_process:bias_add/drive_bias_add_N_Mux_16_2_4_1_19_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_bias_add_N_Mux_16_2_4_1_19_in3
         // at: bias_add.h:65:55
         assign bias_add_N_Mux_16_2_4_1_19_in3 = r_bias_data[31:16];

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_11_out1 or bias_add_N_Mux_16_2_4_1_19_in3)
          begin :bias_add_N_Mux_16_2_4_1_19
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_19_out1 = bias_add_N_Mux_16_3_6_1_11_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_19_out1 = bias_add_N_Mux_16_2_4_1_19_in3;
            end
         end

         // rtl_instance:bias_add/bias_add_N_Mux_16_2_4_1
         always @(r_bias_data[15:0] or bias_add_OrReduction_2U_1U_4_4_out1 or bias_add_N_Mux_16_3_6_1_12_out1)
          begin :bias_add_N_Mux_16_2_4_1_20
            if (bias_add_OrReduction_2U_1U_4_4_out1) begin
               bias_add_N_Mux_16_2_4_1_20_out1 = bias_add_N_Mux_16_3_6_1_12_out1;
            end
            else begin
               bias_add_N_Mux_16_2_4_1_20_out1 = r_bias_data[15:0];
            end
         end

         // rtl_process:bias_add/drive_bias_mux_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_bias_mux_cnt
         // at: bias_add.h:53:7
         // at: bias_add.h:57:7
         // at: bias_add.h:63:9
         always @(posedge clk or negedge rstn)
          begin :drive_bias_mux_cnt
            if (rstn == 1'b0) begin
               // op:_bias_mux_cnt/OP53
               bias_mux_cnt <= 2'd0;
            end
            else begin
               // op:_bias_mux_cnt/OP59
               bias_mux_cnt <= bias_add_N_Mux_2_2_3_4_3_out1;
            end
         end

         // rtl_instance:bias_add/bias_add_Add2i1u2_4_2
         // Resource=bias_add_Add2i1u2_4, Function=add : Inputs=2 Outputs=2
         // Implements 1 operation(s)
         // at: bias_add.h:57:42
         assign bias_add_Add2i1u2_4_2_out1 = bias_mux_cnt + 2'd1;

         // rtl_instance:bias_add/bias_add_N_Mux_2_2_3_4
         always @(bias_mux_cnt or r_src_valid or bias_add_Add2i1u2_4_2_out1)
          begin :bias_add_N_Mux_2_2_3_4_3
            if (r_src_valid) begin
               bias_add_N_Mux_2_2_3_4_3_out1 = bias_add_Add2i1u2_4_2_out1;
            end
            else begin
               bias_add_N_Mux_2_2_3_4_3_out1 = bias_mux_cnt;
            end
         end

         // rtl_process:bias_add/drive_r2_src_valid
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r2_src_valid
         // at: bias_add.h:44:7
         // at: bias_add.h:35:7
         always @(posedge clk or negedge rstn)
          begin :drive_r2_src_valid
            if (rstn == 1'b0) begin
               // op:_delay/OP73
               r2_src_valid <= 1'd0;
            end
            else begin
               // op:_delay/OP92
               r2_src_valid <= r_src_valid;
            end
         end

         // rtl_process:bias_add/drive_r_bias_data
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_bias_data
         // at: bias_add.h:37:7
         // at: bias_add.h:46:7
         // at: bias_add.h:77:36
         always @(posedge clk or negedge rstn)
          begin :drive_r_bias_data
            if (rstn == 1'b0) begin
               // op:_delay/OP75
               r_bias_data <= 512'd0;
            end
            else begin
               // op:_delay/OP90
               r_bias_data <= bias_data;
            end
         end

         // rtl_process:bias_add/drive_r_src_valid
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_r_src_valid
         // at: bias_add.h:56:13
         // at: bias_add.h:34:7
         // at: bias_add.h:43:7
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_valid
            if (rstn == 1'b0) begin
               // op:_delay/OP72
               r_src_valid <= 1'd0;
            end
            else begin
               // op:_delay/OP93
               r_src_valid <= src_valid;
            end
         end

         // rtl_process:bias_add/drive_r_src_0
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_0
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_0
            if (rstn == 1'b0) begin
               // op:_delay/OP64
               r_src_0 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP101
               r_src_0 <= src_0;
            end
         end

         // rtl_process:bias_add/drive_r_src_1
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_1
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_1
            if (rstn == 1'b0) begin
               // op:_delay/OP65
               r_src_1 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP100
               r_src_1 <= src_1;
            end
         end

         // rtl_process:bias_add/drive_r_src_2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_2
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_2
            if (rstn == 1'b0) begin
               // op:_delay/OP66
               r_src_2 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP99
               r_src_2 <= src_2;
            end
         end

         // rtl_process:bias_add/drive_r_src_3
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_3
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_3
            if (rstn == 1'b0) begin
               // op:_delay/OP67
               r_src_3 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP98
               r_src_3 <= src_3;
            end
         end

         // rtl_process:bias_add/drive_r_src_4
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_4
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_4
            if (rstn == 1'b0) begin
               // op:_delay/OP68
               r_src_4 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP97
               r_src_4 <= src_4;
            end
         end

         // rtl_process:bias_add/drive_r_src_5
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_5
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_5
            if (rstn == 1'b0) begin
               // op:_delay/OP69
               r_src_5 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP96
               r_src_5 <= src_5;
            end
         end

         // rtl_process:bias_add/drive_r_src_6
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_6
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_6
            if (rstn == 1'b0) begin
               // op:_delay/OP70
               r_src_6 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP95
               r_src_6 <= src_6;
            end
         end

         // rtl_process:bias_add/drive_r_src_7
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_r_src_7
         // at: bias_add.h:32:14
         // at: bias_add.h:41:14
         // at: bias_add.h:127:28
         always @(posedge clk or negedge rstn)
          begin :drive_r_src_7
            if (rstn == 1'b0) begin
               // op:_delay/OP71
               r_src_7 <= 32'd0000000000;
            end
            else begin
               // op:_delay/OP94
               r_src_7 <= src_7;
            end
         end


endmodule


