
##############################################################################
# Makefile generated by bdw_makegen version 19.10-p100
#      Cadence Design Systems
#      Thu Jan 28 16:06:18 KST 2021
#          Project file was <project.tcl>
##############################################################################

######################################################################
## Exported variables.  
## Each of these variables will be accessible to all child processes.
######################################################################

export BDW_TECH_LIBS	=	/usr/cadence/installs/Stratus/share/stratus/techlibs/GPDK045/gsclib045_svt_v4.4/gsclib045/timing/slow_vdd1v2_basicCells.lib
export BDW_WORKLIB
ifeq ($(BDW_WORKLIB),)
	BDW_WORKLIB = bdw_work
endif

ifeq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
export STRATUS_HOME := $(shell echo "puts [get_install_path]" | bdw_shell)
else
export STRATUS_HOME := /usr/cadence/installs/Stratus
endif
export STRATUS_PLATFORM := lnx86

export BDW_TCL_DIR = $(STRATUS_HOME)/share/stratus/tcl


export BDW_SYSTEMC_VERSION = 2.3.1


# Use internal SystemC 2.3.1 for simulation
export SYSTEMC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/systemc/2.3.1


# Use builtin gcc 4.8 for simulations.
export BDW_CC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/4.8/bin/g++
export BDW_AR := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/4.8/bin/ar rc
export BDW_CCDEP := $(BDW_CC)
export BDW_LINK := $(BDW_CC)


export BDW_USE_ESCLIB = 1
export BDW_VERILOG_DIALECT = 1995
export BDW_OBJDIR		=	$(BDW_WORKLIB)/objs
export BDW_SIMDIR		=	$(BDW_WORKLIB)/sims
export BDW_MODULEDIR	=	$(BDW_WORKLIB)/modules
export BDW_LIBDIR		=	$(BDW_WORKLIB)/libs
export BDW_WRAPDIR		=	$(BDW_WORKLIB)/wrappers
export BDW_HLSLIB_DIRS
export BDW_HLSLIB_NAMES
export BDW_PROJECT_FILE =   project.tcl
export BDW_SIM_CONFIG
export BDW_SIM_CONFIG_DIR
export BDW_LS_CONFIG
export BDW_LS_CONFIG_DIR
export BDW_LS_CONFIG_LOGS
export BDW_VRTL_FILE
export BDW_MODULE
export BDW_HLS_CONFIG
export BDW_HLS_CONFIG_DIR
export BDW_CYNTH_CONFIG
export BDW_CYNTH_CONFIG_DIR
export BDW_LS_INFO

export BDW_COWARE = 0
export BDW_COWARE_LOAD_FLAGS
export BDW_COWARE_PREPROC_FLAGS
export BDW_VISTA = 0
export BDW_NCSC = 0
export BDW_XMSC = 0
export BDW_VLOGSIM_ARGS
export BDW_VLOGCOMP_ARGS
export BDW_VLOG_LIBS
export BDW_VLOG_DEFINES
export BDW_VLOG_DUT_FILES
export BDW_EXTRA_LDFLAGS
export BDW_EXTRA_LIBS
export BDW_EXTRA_LIB_FLAGS
export BDW_COV_LIB_FLAGS
export BDW_EXTRA_CCFLAGS
export BDW_CCOPTIONS
export BDW_SCSIM_ARGS
export BDW_HUB_ARGV
export BDW_USE_SCV
export BDW_FSDBVCSPLATFORM
BDW_FSDBVCSPLATFORM = LINUX64
export BDW_USE_SCV = 0
ifeq ($(CM_USERLOGDIR),)
	export CM_USERLOGDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif
ifeq ($(CM_USERTMPDIR),)
	export CM_USERTMPDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif

# Provide backwards compatibility with CONF variable used in some applications
# to set the configuration on the command line.
ifneq ($(CONF),)
	BDW_SIM_CONFIG = $(CONF)
endif

######################################################################
## Definitions for remote execution
######################################################################
export BDW_EXEC_CMD
export BDW_PMAKE_FLG
ifeq ($(BDW_EXEC_CMD),)
    BDW_EXEC_CMD=
endif

######################################################################
## Definitions for compilation and synthesis
######################################################################

MAKE			   = make --no-print-directory -f $(firstword $(MAKEFILE_LIST))
PERL			   = perl
CYNTHHL			   = ${STRATUS_HOME}/bin/stratus_hls
CYNTHVLG		   = ${STRATUS_HOME}/bin/stratus_vlg --project project.tcl
ifneq ($(BDW_TMPLNK_DIR),)
BDW_TMPLNK_FILE    := $(shell $(STRATUS_HOME)/bin/bdw_tmpfile $(BDW_TMPLNK_DIR)/BDWLNK.$(USER).XXXXXX)
endif

######################################################################
## Set variables for and include BDW common Makefile bdw.mak
######################################################################

export BDW_USEHUB	   = $(BDW_USE_ESCLIB)
export BDW_USECYNTH	   = 1
export BDW_WRITEFSDB   = 0
ifeq ($(BDW_WRITEFSDB),1)
	export BDW_NOVAS_INST_DIR = $(shell $(STRATUS_HOME)/bin/bdw_find_novas_install)
	ifeq ($(wildcard $(BDW_NOVAS_INST_DIR)/share/PLI/VCS*),$(BDW_NOVAS_INST_DIR)/share/PLI/VCS)
		# The PLI/VCS dir is an indication that this is a 2010 or later Novas release, and we can use automatic VCS platform selection.
		BDW_FSDB_VCS_ARGS = -debug_pp -LDFLAGS -Wl,-rpath,$(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM) -P $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/pli.a
	else
		# For older versions of Novas, use vcs_latest, which works with all supported VCS versions.
		BDW_FSDB_VCS_ARGS = -P $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/pli.a
	endif
else
	BDW_FSDB_VCS_ARGS =
endif
BDW_INCLUDE_DIRS = 
BDW_CCFLAGS        = -I./ -I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(addprefix -I,$(BDW_INCLUDE_DIRS))
ifneq ($(BDW_SIM_CONFIG),)
    BDW_SOURCES		   += 
endif
BDW_CCOPTIONS	   = -DCLOCK_PERIOD=2.0 -g 
BDW_COV_LIB_FLAGS = 
BDW_DEP_FILTER	   = | bdw_depfilter project.tcl

VPATH += $(BDW_INCLUDE_DIRS)

vpath %.bdt $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/lib

BDW_LOGOPTIONS_FILE = $(BDW_WRAPDIR)/.logOptions

# rule to create .logOptions if it gets accidentally removed
$(BDW_LOGOPTIONS_FILE): project.tcl
	@bdw_makegen project.tcl -q 

######################################################################
## Start of Configurations
######################################################################
BDW_SHAREDLIB		=	0
BDW_VLOG_DUT_FILES	=	
VLOG_COSIM_TOP	=
BDW_ALL_WRAPPERS    =


HL_FLAGS           = --logfile=stratus_hls.log -I. -I$(BDW_WRAPDIR) -I$(STRATUS_HOME)/share/stratus/include  $(BDW_EXTRA_HLFLAGS) $(addprefix --tl=,$(BDW_TECH_LIBS)) --clock_period=1.500 --default_input_delay=0.100 --flatten_arrays=none --message_detail=3 --path_delay_limit=100.000 --rtl_annotation=op,stack
VLG_FLAGS          = -DBDW_RTL=1 -I$(BDW_WRAPDIR)  $(BDW_EXTRA_VLGFLAGS)

HL_FLAGS_st_feature_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_st_feature_addr_gen_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_feature_addr_gen_BASIC)))
HL_FLAGS_st_feature_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_st_feature_addr_gen_DPA=1 --dpopt_auto=op,expr --flatten_arrays=none $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_feature_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h
HL_FLAGS_st_weight_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_st_weight_addr_gen_BASIC=1 --clock_period=1.500 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_weight_addr_gen_BASIC)))
HL_FLAGS_st_weight_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_st_weight_addr_gen_DPA=1 --clock_period=1.500 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_weight_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h
HL_FLAGS_pw_feature_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_pw_feature_addr_gen_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_feature_addr_gen_BASIC)))
HL_FLAGS_pw_feature_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_pw_feature_addr_gen_DPA=1 --dpopt_auto=op,expr --flatten_arrays=none $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_feature_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h
HL_FLAGS_pw_weight_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_pw_weight_addr_gen_BASIC=1 --clock_period=1.500 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_weight_addr_gen_BASIC)))
HL_FLAGS_pw_weight_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_pw_weight_addr_gen_DPA=1 --clock_period=1.500 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_weight_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h
HL_FLAGS_bias_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_bias_addr_gen_BASIC=1 --clock_period=1.500 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bias_addr_gen_BASIC)))
HL_FLAGS_bias_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_bias_addr_gen_DPA=1 --clock_period=1.500 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bias_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h
HL_FLAGS_bn_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_bn_addr_gen_BASIC=1 --clock_period=1.500 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bn_addr_gen_BASIC)))
HL_FLAGS_bn_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_bn_addr_gen_DPA=1 --clock_period=1.500 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bn_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h
HL_FLAGS_org_bn_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_org_bn_addr_gen_BASIC=1 --clock_period=1.500 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_org_bn_addr_gen_BASIC)))
HL_FLAGS_org_bn_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_org_bn_addr_gen_DPA=1 --clock_period=1.500 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_org_bn_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h
HL_FLAGS_feature_write_addr_gen_BASIC	= -DBASIC=1 -DBDW_RTL_feature_write_addr_gen_BASIC=1 --clock_period=1.500 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_feature_write_addr_gen_BASIC)))
HL_FLAGS_feature_write_addr_gen_DPA	= -DDPA=1 -DBDW_RTL_feature_write_addr_gen_DPA=1 --clock_period=1.500 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_feature_write_addr_gen_DPA)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h
ifeq ($(BDW_SIM_CONFIG),B)



SIM_OBJS			=	$(BDW_WORKLIB)/objs/st_feature_addr_gen.o $(BDW_WORKLIB)/objs/st_weight_addr_gen.o $(BDW_WORKLIB)/objs/pw_feature_addr_gen.o $(BDW_WORKLIB)/objs/pw_weight_addr_gen.o $(BDW_WORKLIB)/objs/bias_addr_gen.o $(BDW_WORKLIB)/objs/bn_addr_gen.o $(BDW_WORKLIB)/objs/org_bn_addr_gen.o $(BDW_WORKLIB)/objs/feature_write_addr_gen.o $(BDW_OBJS)
SIM_RTL_SRCS		=	st_feature_addr_gen.cpp st_weight_addr_gen.cpp pw_feature_addr_gen.cpp pw_weight_addr_gen.cpp bias_addr_gen.cpp bn_addr_gen.cpp org_bn_addr_gen.cpp feature_write_addr_gen.cpp
VLOG_COSIM_TOP		=	
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.d $(BDW_WORKLIB)/modules/st_feature_addr_gen//st_feature_addr_gen.d $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.d $(BDW_WORKLIB)/modules/st_weight_addr_gen//st_weight_addr_gen.d $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.d $(BDW_WORKLIB)/modules/pw_feature_addr_gen//pw_feature_addr_gen.d $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.d $(BDW_WORKLIB)/modules/pw_weight_addr_gen//pw_weight_addr_gen.d $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.d $(BDW_WORKLIB)/modules/bias_addr_gen//bias_addr_gen.d $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.d $(BDW_WORKLIB)/modules/bn_addr_gen//bn_addr_gen.d $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.d $(BDW_WORKLIB)/modules/org_bn_addr_gen//org_bn_addr_gen.d $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.d $(BDW_WORKLIB)/modules/feature_write_addr_gen//feature_write_addr_gen.d $(BDW_OBJDIR)/feature_write_addr_gen.d $(BDW_OBJDIR)/org_bn_addr_gen.d $(BDW_OBJDIR)/bn_addr_gen.d $(BDW_OBJDIR)/bias_addr_gen.d $(BDW_OBJDIR)/pw_weight_addr_gen.d $(BDW_OBJDIR)/pw_feature_addr_gen.d $(BDW_OBJDIR)/st_weight_addr_gen.d $(BDW_OBJDIR)/st_feature_addr_gen.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else

BDW_MISSING_WRAPPERS=	
ifneq ($(BDW_DEP_CYNTH_CONFIG),)
DEP_FILES           =   bdw_work/wrappers/st_feature_addr_gen_wrap.d bdw_work/wrappers/st_weight_addr_gen_wrap.d bdw_work/wrappers/pw_feature_addr_gen_wrap.d bdw_work/wrappers/pw_weight_addr_gen_wrap.d bdw_work/wrappers/bias_addr_gen_wrap.d bdw_work/wrappers/bn_addr_gen_wrap.d bdw_work/wrappers/org_bn_addr_gen_wrap.d bdw_work/wrappers/feature_write_addr_gen_wrap.d
endif
endif

################################################################
# start of logicSynth Configurations
################################################################

# global logicSynth definitions


        
# logicSynthConfig specific definitions

ifeq ($(BDW_LS_CONFIG),G_ST_FEATRE_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC/st_feature_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC/st_feature_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),st_feature_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC/st_feature_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_ST_FEATRE_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA/st_feature_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA/st_feature_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),st_feature_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA/st_feature_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_ST_WEIGHT_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC/st_weight_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC/st_weight_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),st_weight_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC/st_weight_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_ST_WEIGHT_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA/st_weight_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA/st_weight_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),st_weight_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA/st_weight_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_PW_FEATRE_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC/pw_feature_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC/pw_feature_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),pw_feature_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC/pw_feature_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_PW_FEATRE_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA/pw_feature_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA/pw_feature_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),pw_feature_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA/pw_feature_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_PW_WEIGHT_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC/pw_weight_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC/pw_weight_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),pw_weight_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC/pw_weight_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_PW_WEIGHT_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA/pw_weight_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA/pw_weight_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),pw_weight_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA/pw_weight_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_BIAS_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC/bias_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC/bias_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),bias_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC/bias_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_BIAS_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA/bias_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA/bias_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),bias_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA/bias_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/bias_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/bias_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_BN_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC/bn_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC/bn_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),bn_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC/bn_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_BN_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA/bn_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA/bn_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),bn_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA/bn_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/bn_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/bn_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_ORG_BN_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC/org_bn_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC/org_bn_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),org_bn_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC/org_bn_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_ORG_BN_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA/org_bn_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA/org_bn_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),org_bn_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA/org_bn_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),G_FEATURE_WRITE_ADDR_GEN_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC/feature_write_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC/feature_write_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),feature_write_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC/feature_write_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),G_FEATURE_WRITE_ADDR_GEN_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA/feature_write_addr_gen.log} {$(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA/feature_write_addr_gen.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),feature_write_addr_gen)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA/feature_write_addr_gen.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif

################################################################
# start of analysis Configurations
################################################################

# global analysis definitions


        
# analysisConfig specific definitions


ifeq ($(BDW_SHAREDLIB),0)
	EXECUTABLE			= scsim_$(BDW_SIM_CONFIG)
	SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
else
	EXECUTABLE			= $(BDW_VLOG_SIM)
	COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
	SIM_BUILD			= $(COSIM_FILES)
endif


################################################################
# start of place and route configurations
################################################################

# pnrConfig specific definitions 


######################################################################
# Include dependency files for this configuration.
# These will be automatically generted if they do not exist.
# Avoid including (and so generating) these files for 'clean' and
# 'help' commands.
######################################################################
ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
    ifeq ($(findstring clean,$(MAKECMDGOALS)),)
        ifeq ($(findstring help,$(MAKECMDGOALS)),)
            ifneq ($(DEP_FILES),)
                -include $(DEP_FILES)
            endif
        endif
    endif
endif

######################################################################
## Include pre-defined variables and rules provided with BDW
######################################################################
include ${STRATUS_HOME}/share/stratus/source/bdw.mak

######################################################################
## Error checking rules for variable and environment settings.
######################################################################
vista_needs_gcc3:
ifeq ($(BDW_GCC_VERSION),2.95.3)
	@echo "*** You must use GCC 3 to use Vista." ;  exit
endif

#########################################################
## Start of the "ALL" rule set
#########################################################

pnr_all:


kill_pnr_all:


clean_pnr_all:


power_all:


kill_power_all:


clean_power_all:


equiv_all:


kill_equiv_all:


clean_equiv_all:


ls_all: ls_G_ST_FEATRE_ADDR_GEN_BASIC ls_G_ST_FEATRE_ADDR_GEN_DPA ls_G_ST_WEIGHT_ADDR_GEN_BASIC ls_G_ST_WEIGHT_ADDR_GEN_DPA ls_G_PW_FEATRE_ADDR_GEN_BASIC ls_G_PW_FEATRE_ADDR_GEN_DPA ls_G_PW_WEIGHT_ADDR_GEN_BASIC ls_G_PW_WEIGHT_ADDR_GEN_DPA ls_G_BIAS_ADDR_GEN_BASIC ls_G_BIAS_ADDR_GEN_DPA ls_G_BN_ADDR_GEN_BASIC ls_G_BN_ADDR_GEN_DPA ls_G_ORG_BN_ADDR_GEN_BASIC ls_G_ORG_BN_ADDR_GEN_DPA ls_G_FEATURE_WRITE_ADDR_GEN_BASIC ls_G_FEATURE_WRITE_ADDR_GEN_DPA


kill_ls_all: kill_ls_G_ST_FEATRE_ADDR_GEN_BASIC kill_ls_G_ST_FEATRE_ADDR_GEN_DPA kill_ls_G_ST_WEIGHT_ADDR_GEN_BASIC kill_ls_G_ST_WEIGHT_ADDR_GEN_DPA kill_ls_G_PW_FEATRE_ADDR_GEN_BASIC kill_ls_G_PW_FEATRE_ADDR_GEN_DPA kill_ls_G_PW_WEIGHT_ADDR_GEN_BASIC kill_ls_G_PW_WEIGHT_ADDR_GEN_DPA kill_ls_G_BIAS_ADDR_GEN_BASIC kill_ls_G_BIAS_ADDR_GEN_DPA kill_ls_G_BN_ADDR_GEN_BASIC kill_ls_G_BN_ADDR_GEN_DPA kill_ls_G_ORG_BN_ADDR_GEN_BASIC kill_ls_G_ORG_BN_ADDR_GEN_DPA kill_ls_G_FEATURE_WRITE_ADDR_GEN_BASIC kill_ls_G_FEATURE_WRITE_ADDR_GEN_DPA


clean_ls_all: clean_ls_G_ST_FEATRE_ADDR_GEN_BASIC clean_ls_G_ST_FEATRE_ADDR_GEN_DPA clean_ls_G_ST_WEIGHT_ADDR_GEN_BASIC clean_ls_G_ST_WEIGHT_ADDR_GEN_DPA clean_ls_G_PW_FEATRE_ADDR_GEN_BASIC clean_ls_G_PW_FEATRE_ADDR_GEN_DPA clean_ls_G_PW_WEIGHT_ADDR_GEN_BASIC clean_ls_G_PW_WEIGHT_ADDR_GEN_DPA clean_ls_G_BIAS_ADDR_GEN_BASIC clean_ls_G_BIAS_ADDR_GEN_DPA clean_ls_G_BN_ADDR_GEN_BASIC clean_ls_G_BN_ADDR_GEN_DPA clean_ls_G_ORG_BN_ADDR_GEN_BASIC clean_ls_G_ORG_BN_ADDR_GEN_DPA clean_ls_G_FEATURE_WRITE_ADDR_GEN_BASIC clean_ls_G_FEATURE_WRITE_ADDR_GEN_DPA


analysis_all:


kill_analysis_all:


clean_analysis_all:


hls_all: hls_B


hls_st_feature_addr_gen_all: hls_st_feature_addr_gen_BASIC hls_st_feature_addr_gen_DPA


hls_st_weight_addr_gen_all: hls_st_weight_addr_gen_BASIC hls_st_weight_addr_gen_DPA


hls_pw_feature_addr_gen_all: hls_pw_feature_addr_gen_BASIC hls_pw_feature_addr_gen_DPA


hls_pw_weight_addr_gen_all: hls_pw_weight_addr_gen_BASIC hls_pw_weight_addr_gen_DPA


hls_bias_addr_gen_all: hls_bias_addr_gen_BASIC hls_bias_addr_gen_DPA


hls_bn_addr_gen_all: hls_bn_addr_gen_BASIC hls_bn_addr_gen_DPA


hls_org_bn_addr_gen_all: hls_org_bn_addr_gen_BASIC hls_org_bn_addr_gen_DPA


hls_feature_write_addr_gen_all: hls_feature_write_addr_gen_BASIC hls_feature_write_addr_gen_DPA


cynth_all: cynth_B


kill_hls_all kill_cynth_all: kill_hls_st_feature_addr_gen_BASIC kill_hls_st_feature_addr_gen_DPA kill_hls_st_weight_addr_gen_BASIC kill_hls_st_weight_addr_gen_DPA kill_hls_pw_feature_addr_gen_BASIC kill_hls_pw_feature_addr_gen_DPA kill_hls_pw_weight_addr_gen_BASIC kill_hls_pw_weight_addr_gen_DPA kill_hls_bias_addr_gen_BASIC kill_hls_bias_addr_gen_DPA kill_hls_bn_addr_gen_BASIC kill_hls_bn_addr_gen_DPA kill_hls_org_bn_addr_gen_BASIC kill_hls_org_bn_addr_gen_DPA kill_hls_feature_write_addr_gen_BASIC kill_hls_feature_write_addr_gen_DPA


all_deps: clean_deps
	-@$(MAKE) gen_all_deps >& /dev/null



gen_all_deps: 
	-@$(MAKE) deps BDW_SIM_CONFIG=B >& /dev/null


.PHONY: gen_all_deps
.PHONY: all_deps


all_wrappers : prebuild_wrappers

prebuild_wrappers:
ifneq ($(BDW_ALL_WRAPPERS),)
	@$(MAKE) -j 1 $(BDW_ALL_WRAPPERS)
endif

prebuild_rtl:
ifneq ($(SIM_RTL_TARGETS),)
	@$(MAKE) $(SIM_RTL_TARGETS)
endif


clean_hls_all: clean_hls_B

hls_clean_all: clean_hls_all
cynth_clean_all: clean_hls_all
clean_cynth_all: clean_hls_all
prebuild_all: prebuild_B

build_all: build_B

sim_all: sim_B

kill_sim_all: kill_sim_B

clean_wrap_all: clean_wrap_B

kill_all: 
	@bdw_kill -all


clean_cachelib:
	@rm -rf /home/hanji/stratus/mv1/train_npu/to_addr_gen/cachelib

clean_all:
	@if [ -d $(BDW_WORKLIB) ] ; then \
		td=`mktemp -d $(BDW_WORKLIB).XXXXXXXX` ; \
		mv $(BDW_WORKLIB) $${td} ; \
		for f in *.vcd *.fsdb ; do \
			if [ -f $$f ] ; then \
				mv $$f $${td} ; \
			fi ; \
		done ; \
		rm -rf $${td} & \
	fi

clean_sim_all: clean_B clean_deps
	@rm -rf *.vcd *.fsdb $(BDW_OBJDIR) $(BDW_SIMDIR) $(BDW_MODULEDIR) $(BDW_WRAPDIR)

jobs:
	@bdw_ps

clean_libs:
	@rm -rf $(BDW_LIBDIR)

clean_deps:
	@if [ -d $(BDW_WORKLIB) ]; then find $(BDW_WORKLIB) -name '*.d' -exec rm {} \; ; fi

deps : $(DEP_FILES)

#########################################################
## End of the "ALL" rule set
#########################################################



help:
	@echo 
	@echo "Makefile generated by bdw_makegen version 19.10-p100 from project.tcl"
	@echo 
	@echo "PROJECT-WIDE RULES:"
	@echo "    workbench   - Stratus Workbench for the project."
	@echo 
	@echo "GROUP RULES:"
	@echo "    hls_all             - Run stratus_hls for all modules for all configurations."
	@echo "    clean_hls_all       - Clear all RTL files generated for all stratus_hls runs for each configuration."
	@echo "    ls_all      - Run logic synthesis for all logicSynthConfigs "
	@echo "    clean_ls_all- Removes logic synthesis results for all logicSynthConfigs "
	@echo "    build_all           - Build all simulation executables or shared libraries (but don't run them)."
	@echo "    sim_all             - Build AND run all simulation configurations."
	@echo "    power_all           - Run all Power configurations."
	@echo "    pnr_all             - Run all place and route configurations."
	@echo "    equiv_all           - Run all whole-design equivalence checking configurations."
	@echo "    clean_all           - Removes the $(BDW_WORKLIB) directory, thus cleaning up everything."
	@echo "    clean_sim_all       - Clean up all modules for all simulation configurations."
	@echo "    clean_power_all     - Clean all files generated for all power estimation configs."
	@echo "    clean_pnr_all       - Clean all files generated for all place and route configs."
	@echo "    clean_equiv_all     - Clean all files generated for all equivalence checking configs."
	@echo "    clean_libs          - Clean up all locally built items for cynthLibs."
	@echo "    clean_cachelib      - Clean up the local Cache Library."
	@echo "    clean_deps          - Clean up auto-generated dependencies so they will be re-generated."
	@echo "    clean_wrap_all      - Clean all generated wrapper files."
	@echo "    all_deps            - Re-creates all dependencies."
	@echo "    all_wrappers        - Generates all out of data cynthModule wrappers."
	@echo "    jobs                - List all current jobs for this project."
	@echo "    kill_all            - Kills alls current jobs for this project."
	@echo "    kill_hls_all        - Kills alls stratus_hls jobs for this project."
	@echo "    kill_ls_all         - Kill all logic synthesis jobs for this project."
	@echo "    kill_sim_all        - Kill all simulation jobs for this project."
	@echo "    kill_pnr_all        - Kill all place and route jobs for this project."
	@echo "    kill_power_all      - Kill all power estimation jobs for this project."
	@echo "    kill_equiv_all      - Kill all equivalence checking jobs for this project."
	@echo 
	@echo "PER-hls_config RULES:"
	@echo "    hls_<hls_config>   - Run stratus_hls on all modules that have a hls_config with the given name to Verilog"
	@echo "    clean_<hls_config> - Clean the given hls_config from all modules that have it"
	@echo "    view_<hls_config>  - View schematics all modules that have a hls_config with the given name"
	@echo 
	@echo "PER-module-and-hls_config RULES:"
	@echo "    hls_<module>_all           - Run stratus_hls on the given module and all its hls_configs to Verilog"
	@echo "    hls_<module>_<hls_config>  - Run stratus_hls on the given module and hls_config to Verilog"
	@echo "    clean_hls_<module>_<hls_config>  - Clean synthesis results for the given module and hls_config"
	@echo "    view_<module>_<hls_config> - View schematic for the given module and cynhtConfig"
	@echo "    kill_<module>_<hls_config> - Kill stratus_hls job for this module and hls_config"
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module st_feature_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module st_weight_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module pw_feature_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module pw_weight_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module bias_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module bn_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module org_bn_addr_gen:"
	@echo "		BASIC	DPA"
	@echo "	hls_config for module feature_write_addr_gen:"
	@echo "		BASIC	DPA"
	@echo 
	@echo "PER-sim_config RULES:"
	@echo "    clean_hls_<sim_config> - Clean stratus_hls output files for all modules required by the named sim_config"
	@echo "    build_<sim_config>   - Build the simulation executable for the named sim_config"
	@echo "    sim_<sim_config>     - Builds and executes a simulation for the named sim_config"
	@echo "    kill_sim_<sim_config> - Kills the simulation for the  named sim_config"
	@echo "    debug_<sim_config>   - Builds a simulation for the named sim_config for use with the gdb debugger under stratus_ide"
	@echo "    view_<sim_config>    - View schematics for all modules required by the named sim_config"
	@echo "    clean_<sim_config>   - Clean up files built for the named sim_config"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B"

	@echo
	@echo "PER-logicSynthConfig Rules:"
	@echo "    ls_<logicSynthConfig> - Run logic synthesis for the modules in this logicSynthConfig"
	@echo "    view_ls_<logicSynthConfig> - View schematics for the modules in this logicSynthConfig"
	@echo "    clean_ls_<logicSynthConfig> - Removes logic synthesis results for this logicSynthConfig"
	@echo "    kill_ls_<logicSynthConfig> - Kills the logic synthesis job for this logicSynthConfig"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo "	G_ST_FEATRE_ADDR_GEN_BASIC	G_ST_FEATRE_ADDR_GEN_DPA	G_ST_WEIGHT_ADDR_GEN_BASIC	G_ST_WEIGHT_ADDR_GEN_DPA"
	@echo "	G_PW_FEATRE_ADDR_GEN_BASIC	G_PW_FEATRE_ADDR_GEN_DPA	G_PW_WEIGHT_ADDR_GEN_BASIC	G_PW_WEIGHT_ADDR_GEN_DPA"
	@echo "	G_BIAS_ADDR_GEN_BASIC	G_BIAS_ADDR_GEN_DPA	G_BN_ADDR_GEN_BASIC	G_BN_ADDR_GEN_DPA"
	@echo "	G_ORG_BN_ADDR_GEN_BASIC	G_ORG_BN_ADDR_GEN_DPA	G_FEATURE_WRITE_ADDR_GEN_BASIC	G_FEATURE_WRITE_ADDR_GEN_DPA"

#########################################################
## Start of the rule set for sim_config B
#########################################################


hls_B: 



cynth_B: 

hls_clean_B: clean_hls_B

cynth_clean_B: hls_clean_B

clean_hls_B: $(addprefix clean_, ) 

clean_cynth_B: clean_hls_B

prebuild_B: 

ifeq ($(CWBExec),1)

dbg_build_B:
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(MAKE) BDW_DEBUG=1 build_B


build_B: 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B

else
.PHONY: build_B

dbg_build_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.B $(MAKE) CWBExec=1 BDW_DEBUG=1 build_B

build_B:
	@bdw_exec -jobproject project.tcl -job build.B $(MAKE) CWBExec=1 build_B
endif


ifeq ($(CWBExec),1)
sim_B: build_B
	@$(MAKE) run_sim BDW_SIM_CONFIG=B

else
.PHONY: sim_B

sim_B:
	@bdw_exec -jobproject project.tcl -job sim.B $(MAKE) CWBExec=1 sim_B
endif


kill_sim_B:
	@bdw_kill -job sim.B
	@bdw_kill -job sim.B.s


catlog_B: 
debug_B: 
	@$(MAKE) BDW_DEBUG=1 build_B
	@$(MAKE) run_sim BDW_SIM_CONFIG=B RUN_DEBUGGER=1
    
view_B: build_B
	@bdw_view_verdi -project project.tcl -simconfig B

clean_wrap_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B

clean_B: clean_hls_B clean_sim_B

clean_sim_B: clean_wrap_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B
	@rm -rf $(BDW_WORKLIB)/jobs/build.B

#############################################################################
# libesc building rules
#############################################################################
libesc_WORKDIR = $(BDW_WORKLIB)/libesc

BDW_ESC_SOURCES = libesc.o esc_elab.o esc_cleanup.o
BDW_ESC_OBJS = $(addprefix $(libesc_WORKDIR)/, $(BDW_ESC_SOURCES))

ifeq ($(BDW_PRECOMP_ESC),1)
export BDW_ESC_LIB = 
else
export BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
endif

$(libesc_WORKDIR)/libesc.a : $(BDW_ESC_OBJS)
	$(BDW_AR) $(libesc_WORKDIR)/libesc.a $(BDW_ESC_OBJS)

${libesc_WORKDIR}/%.o   :   ${STRATUS_HOME}/share/stratus/source/%.cc 
	@if [ ! -d ${libesc_WORKDIR} ]; then mkdir -p ${libesc_WORKDIR}; fi
ifeq ($(BDW_NCSC),1)
	${BDW_CC} "-TP ${BDW_CCFLAGS} ${BDW_COUT}$@ " $<
else
	${BDW_CC} -TP ${BDW_CCFLAGS} ${BDW_COUT}$@ $<
endif



##############################################################
## Rule for building all Cynth libraries external to the project
##############################################################

build_all_cynthLibs: $(BDW_BOTH_LIBPREP_EXTERNAL)

list_cynthLibs:


##############################################################
## START OF HLS MODULE RULES
##############################################################



##############################################################
## HLS Module "st_feature_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/st_feature_addr_gen.d :  st_feature_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  st_feature_addr_gen.cpp \
	| sed 's|st_feature_addr_gen\.o[ :]*|$(BDW_OBJDIR)/st_feature_addr_gen.o $(BDW_OBJDIR)/st_feature_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h.updated :  st_feature_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_feature_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/st_feature_addr_gen.o:  st_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/st_feature_addr_gen.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp

.INTERMEDIATE : st_feature_addr_gen_wrap.h

st_feature_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.v   : $(BDW_WRAPDIR)/st_feature_addr_gen.updated

$(BDW_WRAPDIR)/st_feature_addr_gen.updated :  st_feature_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module st_feature_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/st_feature_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_feature_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.d :  st_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   st_feature_addr_gen.cpp \
		| sed 's|st_feature_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/st_feature_addr_gen.updated $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.d 




##############################################################
## HLS Module "st_feature_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_st_feature_addr_gen_BASIC = 
LIB_INCLUDES_st_feature_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_feature_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_st_feature_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_st_feature_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_st_feature_addr_gen_BASIC = 
CCFLAGS_st_feature_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_st_feature_addr_gen_BASIC=1  $(LIB_INCLUDES_st_feature_addr_gen_BASIC)
CCFLAGS_st_feature_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_st_feature_addr_gen_BASIC : hlsc_st_feature_addr_gen_BASIC

cynth_st_feature_addr_gen_BASIC : hlsc_st_feature_addr_gen_BASIC 

elab_st_feature_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.bdr

optim_st_feature_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.bdr

sched_st_feature_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.bdr

hlsc_st_feature_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=st_feature_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.st_feature_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=st_feature_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_st_feature_addr_gen_BASIC: clean_hls_st_feature_addr_gen_BASIC

clean_st_feature_addr_gen_BASIC: clean_hls_st_feature_addr_gen_BASIC

clean_hls_st_feature_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_feature_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_feature_addr_gen.BASIC.s

kill_hls_st_feature_addr_gen_BASIC:
	@bdw_kill -job hls.st_feature_addr_gen.BASIC
	@bdw_kill -job hls.st_feature_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_st_feature_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module st_feature_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.v $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.bdr :  st_feature_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.st_feature_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_st_feature_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC -o st_feature_addr_gen_rtl.cpp \
		--hls_module=st_feature_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_st_feature_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_st_feature_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_st_feature_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 st_feature_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_trace.h : $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_feature_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_trace.h.updated

catHLLog_st_feature_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_st_feature_addr_gen_BASIC : hls_st_feature_addr_gen_BASIC 


hls_st_feature_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_st_feature_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.v prep_vlog_st_feature_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.st_feature_addr_gen.BASIC $(MAKE) CWBExec=1 hls_st_feature_addr_gen_BASIC
endif

catVLGLog_st_feature_addr_gen_BASIC : catHLLog_st_feature_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_st_feature_addr_gen_BASIC : hls_st_feature_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules st_feature_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl st_feature_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC -I./ $(CCFLAGS_st_feature_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl st_feature_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen.o :  st_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC -I./ $(CCFLAGS_st_feature_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_hoist.o :  st_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC -I./ $(CCFLAGS_st_feature_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl st_feature_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen.d :  st_feature_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_st_feature_addr_gen_BASIC)  st_feature_addr_gen.cpp \
	| sed 's|st_feature_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen.o $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC"
##############################################################

st_feature_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC
st_feature_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/st_feature_addr_gen_BASIC
st_feature_addr_gen_BASIC_LIBNAME = st_feature_addr_gen_BASIC
st_feature_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC
st_feature_addr_gen_BASIC_C_PARTS_A = $(st_feature_addr_gen_BASIC_WORKLIB)/objs/libst_feature_addr_gen_BASIC.a

prep_c_st_feature_addr_gen_BASIC : $(st_feature_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_feature_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_st_feature_addr_gen_BASIC : $(st_feature_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_feature_addr_gen_BASIC_WORKLIB) prep_vlog

prep_st_feature_addr_gen_BASIC : $(st_feature_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_feature_addr_gen_BASIC_WORKLIB) prep

$(st_feature_addr_gen_BASIC_WORKLIB)/Makefile : $(st_feature_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(st_feature_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(st_feature_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(st_feature_addr_gen_BASIC_SRCDIR) -o $(st_feature_addr_gen_BASIC_WORKLIB)/Makefile -module st_feature_addr_gen -cynthconfig BASIC  

$(st_feature_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(st_feature_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(st_feature_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(st_feature_addr_gen_BASIC_WORKLIB)/st_feature_addr_gen_BASIC.d :
	@if [ ! -d $(st_feature_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(st_feature_addr_gen_BASIC_WORKLIB); fi
	@touch $(st_feature_addr_gen_BASIC_WORKLIB)/st_feature_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_st_feature_addr_gen_DPA = 
LIB_INCLUDES_st_feature_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_feature_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_st_feature_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_st_feature_addr_gen_DPA = 
PREFIXED_LIB_NAMES_st_feature_addr_gen_DPA = 
CCFLAGS_st_feature_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_st_feature_addr_gen_DPA=1  $(LIB_INCLUDES_st_feature_addr_gen_DPA)
CCFLAGS_st_feature_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_st_feature_addr_gen_DPA : hlsc_st_feature_addr_gen_DPA

cynth_st_feature_addr_gen_DPA : hlsc_st_feature_addr_gen_DPA 

elab_st_feature_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.bdr

optim_st_feature_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.bdr

sched_st_feature_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.bdr

hlsc_st_feature_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=st_feature_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.st_feature_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=st_feature_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_st_feature_addr_gen_DPA: clean_hls_st_feature_addr_gen_DPA

clean_st_feature_addr_gen_DPA: clean_hls_st_feature_addr_gen_DPA

clean_hls_st_feature_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_feature_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_feature_addr_gen.DPA.s

kill_hls_st_feature_addr_gen_DPA:
	@bdw_kill -job hls.st_feature_addr_gen.DPA
	@bdw_kill -job hls.st_feature_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_st_feature_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module st_feature_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.v $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.bdr :  st_feature_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.st_feature_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_st_feature_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA -o st_feature_addr_gen_rtl.cpp \
		--hls_module=st_feature_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_st_feature_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_st_feature_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_st_feature_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 st_feature_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_trace.h : $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_feature_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_trace.h.updated

catHLLog_st_feature_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_st_feature_addr_gen_DPA : hls_st_feature_addr_gen_DPA 


hls_st_feature_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_st_feature_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.v prep_vlog_st_feature_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.st_feature_addr_gen.DPA $(MAKE) CWBExec=1 hls_st_feature_addr_gen_DPA
endif

catVLGLog_st_feature_addr_gen_DPA : catHLLog_st_feature_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_st_feature_addr_gen_DPA : hls_st_feature_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules st_feature_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl st_feature_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA -I./ $(CCFLAGS_st_feature_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl st_feature_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen.o :  st_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA -I./ $(CCFLAGS_st_feature_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_hoist.o :  st_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA -I./ $(CCFLAGS_st_feature_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl st_feature_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/st_feature_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen.d :  st_feature_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_st_feature_addr_gen_DPA)  st_feature_addr_gen.cpp \
	| sed 's|st_feature_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen.o $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA"
##############################################################

st_feature_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA
st_feature_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/st_feature_addr_gen_DPA
st_feature_addr_gen_DPA_LIBNAME = st_feature_addr_gen_DPA
st_feature_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA
st_feature_addr_gen_DPA_C_PARTS_A = $(st_feature_addr_gen_DPA_WORKLIB)/objs/libst_feature_addr_gen_DPA.a

prep_c_st_feature_addr_gen_DPA : $(st_feature_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_feature_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_st_feature_addr_gen_DPA : $(st_feature_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_feature_addr_gen_DPA_WORKLIB) prep_vlog

prep_st_feature_addr_gen_DPA : $(st_feature_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_feature_addr_gen_DPA_WORKLIB) prep

$(st_feature_addr_gen_DPA_WORKLIB)/Makefile : $(st_feature_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(st_feature_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(st_feature_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(st_feature_addr_gen_DPA_SRCDIR) -o $(st_feature_addr_gen_DPA_WORKLIB)/Makefile -module st_feature_addr_gen -cynthconfig DPA  

$(st_feature_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(st_feature_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(st_feature_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(st_feature_addr_gen_DPA_WORKLIB)/st_feature_addr_gen_DPA.d :
	@if [ ! -d $(st_feature_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(st_feature_addr_gen_DPA_WORKLIB); fi
	@touch $(st_feature_addr_gen_DPA_WORKLIB)/st_feature_addr_gen_DPA.d



##############################################################
## HLS Module "st_weight_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/st_weight_addr_gen.d :  st_weight_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  st_weight_addr_gen.cpp \
	| sed 's|st_weight_addr_gen\.o[ :]*|$(BDW_OBJDIR)/st_weight_addr_gen.o $(BDW_OBJDIR)/st_weight_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h.updated :  st_weight_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_weight_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/st_weight_addr_gen.o:  st_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/st_weight_addr_gen.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp

.INTERMEDIATE : st_weight_addr_gen_wrap.h

st_weight_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.v   : $(BDW_WRAPDIR)/st_weight_addr_gen.updated

$(BDW_WRAPDIR)/st_weight_addr_gen.updated :  st_weight_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module st_weight_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/st_weight_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_weight_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.d :  st_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   st_weight_addr_gen.cpp \
		| sed 's|st_weight_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/st_weight_addr_gen.updated $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.d 




##############################################################
## HLS Module "st_weight_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_st_weight_addr_gen_BASIC = 
LIB_INCLUDES_st_weight_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_weight_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_st_weight_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_st_weight_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_st_weight_addr_gen_BASIC = 
CCFLAGS_st_weight_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_st_weight_addr_gen_BASIC=1  $(LIB_INCLUDES_st_weight_addr_gen_BASIC)
CCFLAGS_st_weight_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_st_weight_addr_gen_BASIC : hlsc_st_weight_addr_gen_BASIC

cynth_st_weight_addr_gen_BASIC : hlsc_st_weight_addr_gen_BASIC 

elab_st_weight_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.bdr

optim_st_weight_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.bdr

sched_st_weight_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.bdr

hlsc_st_weight_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=st_weight_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.st_weight_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=st_weight_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_st_weight_addr_gen_BASIC: clean_hls_st_weight_addr_gen_BASIC

clean_st_weight_addr_gen_BASIC: clean_hls_st_weight_addr_gen_BASIC

clean_hls_st_weight_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_weight_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_weight_addr_gen.BASIC.s

kill_hls_st_weight_addr_gen_BASIC:
	@bdw_kill -job hls.st_weight_addr_gen.BASIC
	@bdw_kill -job hls.st_weight_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_st_weight_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module st_weight_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.v $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.bdr :  st_weight_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.st_weight_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_st_weight_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC -o st_weight_addr_gen_rtl.cpp \
		--hls_module=st_weight_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_st_weight_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_st_weight_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_st_weight_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 st_weight_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_trace.h : $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_weight_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_trace.h.updated

catHLLog_st_weight_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_st_weight_addr_gen_BASIC : hls_st_weight_addr_gen_BASIC 


hls_st_weight_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_st_weight_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.v prep_vlog_st_weight_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.st_weight_addr_gen.BASIC $(MAKE) CWBExec=1 hls_st_weight_addr_gen_BASIC
endif

catVLGLog_st_weight_addr_gen_BASIC : catHLLog_st_weight_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_st_weight_addr_gen_BASIC : hls_st_weight_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules st_weight_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl st_weight_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC -I./ $(CCFLAGS_st_weight_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl st_weight_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen.o :  st_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC -I./ $(CCFLAGS_st_weight_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_hoist.o :  st_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC -I./ $(CCFLAGS_st_weight_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl st_weight_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen.d :  st_weight_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_st_weight_addr_gen_BASIC)  st_weight_addr_gen.cpp \
	| sed 's|st_weight_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen.o $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC"
##############################################################

st_weight_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC
st_weight_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/st_weight_addr_gen_BASIC
st_weight_addr_gen_BASIC_LIBNAME = st_weight_addr_gen_BASIC
st_weight_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC
st_weight_addr_gen_BASIC_C_PARTS_A = $(st_weight_addr_gen_BASIC_WORKLIB)/objs/libst_weight_addr_gen_BASIC.a

prep_c_st_weight_addr_gen_BASIC : $(st_weight_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_weight_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_st_weight_addr_gen_BASIC : $(st_weight_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_weight_addr_gen_BASIC_WORKLIB) prep_vlog

prep_st_weight_addr_gen_BASIC : $(st_weight_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_weight_addr_gen_BASIC_WORKLIB) prep

$(st_weight_addr_gen_BASIC_WORKLIB)/Makefile : $(st_weight_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(st_weight_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(st_weight_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(st_weight_addr_gen_BASIC_SRCDIR) -o $(st_weight_addr_gen_BASIC_WORKLIB)/Makefile -module st_weight_addr_gen -cynthconfig BASIC  

$(st_weight_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(st_weight_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(st_weight_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(st_weight_addr_gen_BASIC_WORKLIB)/st_weight_addr_gen_BASIC.d :
	@if [ ! -d $(st_weight_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(st_weight_addr_gen_BASIC_WORKLIB); fi
	@touch $(st_weight_addr_gen_BASIC_WORKLIB)/st_weight_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_st_weight_addr_gen_DPA = 
LIB_INCLUDES_st_weight_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_st_weight_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_st_weight_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_st_weight_addr_gen_DPA = 
PREFIXED_LIB_NAMES_st_weight_addr_gen_DPA = 
CCFLAGS_st_weight_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_st_weight_addr_gen_DPA=1  $(LIB_INCLUDES_st_weight_addr_gen_DPA)
CCFLAGS_st_weight_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_st_weight_addr_gen_DPA : hlsc_st_weight_addr_gen_DPA

cynth_st_weight_addr_gen_DPA : hlsc_st_weight_addr_gen_DPA 

elab_st_weight_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.bdr

optim_st_weight_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.bdr

sched_st_weight_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.bdr

hlsc_st_weight_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=st_weight_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.st_weight_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=st_weight_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_st_weight_addr_gen_DPA: clean_hls_st_weight_addr_gen_DPA

clean_st_weight_addr_gen_DPA: clean_hls_st_weight_addr_gen_DPA

clean_hls_st_weight_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_weight_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.st_weight_addr_gen.DPA.s

kill_hls_st_weight_addr_gen_DPA:
	@bdw_kill -job hls.st_weight_addr_gen.DPA
	@bdw_kill -job hls.st_weight_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_st_weight_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module st_weight_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.v $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.bdr :  st_weight_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.st_weight_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_st_weight_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA -o st_weight_addr_gen_rtl.cpp \
		--hls_module=st_weight_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_st_weight_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_st_weight_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_st_weight_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 st_weight_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_trace.h : $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module st_weight_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_trace.h.updated

catHLLog_st_weight_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_st_weight_addr_gen_DPA : hls_st_weight_addr_gen_DPA 


hls_st_weight_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_st_weight_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.v prep_vlog_st_weight_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.st_weight_addr_gen.DPA $(MAKE) CWBExec=1 hls_st_weight_addr_gen_DPA
endif

catVLGLog_st_weight_addr_gen_DPA : catHLLog_st_weight_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_st_weight_addr_gen_DPA : hls_st_weight_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules st_weight_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl st_weight_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA -I./ $(CCFLAGS_st_weight_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl st_weight_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen.o :  st_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA -I./ $(CCFLAGS_st_weight_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_hoist.o :  st_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA -I./ $(CCFLAGS_st_weight_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl st_weight_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/st_weight_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen.d :  st_weight_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_st_weight_addr_gen_DPA)  st_weight_addr_gen.cpp \
	| sed 's|st_weight_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen.o $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA"
##############################################################

st_weight_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA
st_weight_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/st_weight_addr_gen_DPA
st_weight_addr_gen_DPA_LIBNAME = st_weight_addr_gen_DPA
st_weight_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA
st_weight_addr_gen_DPA_C_PARTS_A = $(st_weight_addr_gen_DPA_WORKLIB)/objs/libst_weight_addr_gen_DPA.a

prep_c_st_weight_addr_gen_DPA : $(st_weight_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_weight_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_st_weight_addr_gen_DPA : $(st_weight_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_weight_addr_gen_DPA_WORKLIB) prep_vlog

prep_st_weight_addr_gen_DPA : $(st_weight_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(st_weight_addr_gen_DPA_WORKLIB) prep

$(st_weight_addr_gen_DPA_WORKLIB)/Makefile : $(st_weight_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(st_weight_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(st_weight_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(st_weight_addr_gen_DPA_SRCDIR) -o $(st_weight_addr_gen_DPA_WORKLIB)/Makefile -module st_weight_addr_gen -cynthconfig DPA  

$(st_weight_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(st_weight_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(st_weight_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(st_weight_addr_gen_DPA_WORKLIB)/st_weight_addr_gen_DPA.d :
	@if [ ! -d $(st_weight_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(st_weight_addr_gen_DPA_WORKLIB); fi
	@touch $(st_weight_addr_gen_DPA_WORKLIB)/st_weight_addr_gen_DPA.d



##############################################################
## HLS Module "pw_feature_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/pw_feature_addr_gen.d :  pw_feature_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  pw_feature_addr_gen.cpp \
	| sed 's|pw_feature_addr_gen\.o[ :]*|$(BDW_OBJDIR)/pw_feature_addr_gen.o $(BDW_OBJDIR)/pw_feature_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h.updated :  pw_feature_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_feature_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/pw_feature_addr_gen.o:  pw_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/pw_feature_addr_gen.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp

.INTERMEDIATE : pw_feature_addr_gen_wrap.h

pw_feature_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.v   : $(BDW_WRAPDIR)/pw_feature_addr_gen.updated

$(BDW_WRAPDIR)/pw_feature_addr_gen.updated :  pw_feature_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module pw_feature_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/pw_feature_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_feature_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.d :  pw_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   pw_feature_addr_gen.cpp \
		| sed 's|pw_feature_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/pw_feature_addr_gen.updated $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.d 




##############################################################
## HLS Module "pw_feature_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_pw_feature_addr_gen_BASIC = 
LIB_INCLUDES_pw_feature_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_feature_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_pw_feature_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_pw_feature_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_pw_feature_addr_gen_BASIC = 
CCFLAGS_pw_feature_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_pw_feature_addr_gen_BASIC=1  $(LIB_INCLUDES_pw_feature_addr_gen_BASIC)
CCFLAGS_pw_feature_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_pw_feature_addr_gen_BASIC : hlsc_pw_feature_addr_gen_BASIC

cynth_pw_feature_addr_gen_BASIC : hlsc_pw_feature_addr_gen_BASIC 

elab_pw_feature_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.bdr

optim_pw_feature_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.bdr

sched_pw_feature_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.bdr

hlsc_pw_feature_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=pw_feature_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.pw_feature_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=pw_feature_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_pw_feature_addr_gen_BASIC: clean_hls_pw_feature_addr_gen_BASIC

clean_pw_feature_addr_gen_BASIC: clean_hls_pw_feature_addr_gen_BASIC

clean_hls_pw_feature_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_feature_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_feature_addr_gen.BASIC.s

kill_hls_pw_feature_addr_gen_BASIC:
	@bdw_kill -job hls.pw_feature_addr_gen.BASIC
	@bdw_kill -job hls.pw_feature_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_pw_feature_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module pw_feature_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.v $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.bdr :  pw_feature_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.pw_feature_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_pw_feature_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC -o pw_feature_addr_gen_rtl.cpp \
		--hls_module=pw_feature_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_pw_feature_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_pw_feature_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_pw_feature_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 pw_feature_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_trace.h : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_feature_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_trace.h.updated

catHLLog_pw_feature_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_pw_feature_addr_gen_BASIC : hls_pw_feature_addr_gen_BASIC 


hls_pw_feature_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_pw_feature_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.v prep_vlog_pw_feature_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.pw_feature_addr_gen.BASIC $(MAKE) CWBExec=1 hls_pw_feature_addr_gen_BASIC
endif

catVLGLog_pw_feature_addr_gen_BASIC : catHLLog_pw_feature_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_pw_feature_addr_gen_BASIC : hls_pw_feature_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules pw_feature_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl pw_feature_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC -I./ $(CCFLAGS_pw_feature_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_feature_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen.o :  pw_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC -I./ $(CCFLAGS_pw_feature_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_hoist.o :  pw_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC -I./ $(CCFLAGS_pw_feature_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_feature_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen.d :  pw_feature_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_pw_feature_addr_gen_BASIC)  pw_feature_addr_gen.cpp \
	| sed 's|pw_feature_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen.o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC"
##############################################################

pw_feature_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC
pw_feature_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/pw_feature_addr_gen_BASIC
pw_feature_addr_gen_BASIC_LIBNAME = pw_feature_addr_gen_BASIC
pw_feature_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC
pw_feature_addr_gen_BASIC_C_PARTS_A = $(pw_feature_addr_gen_BASIC_WORKLIB)/objs/libpw_feature_addr_gen_BASIC.a

prep_c_pw_feature_addr_gen_BASIC : $(pw_feature_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_feature_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_pw_feature_addr_gen_BASIC : $(pw_feature_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_feature_addr_gen_BASIC_WORKLIB) prep_vlog

prep_pw_feature_addr_gen_BASIC : $(pw_feature_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_feature_addr_gen_BASIC_WORKLIB) prep

$(pw_feature_addr_gen_BASIC_WORKLIB)/Makefile : $(pw_feature_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(pw_feature_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(pw_feature_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(pw_feature_addr_gen_BASIC_SRCDIR) -o $(pw_feature_addr_gen_BASIC_WORKLIB)/Makefile -module pw_feature_addr_gen -cynthconfig BASIC  

$(pw_feature_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(pw_feature_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(pw_feature_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(pw_feature_addr_gen_BASIC_WORKLIB)/pw_feature_addr_gen_BASIC.d :
	@if [ ! -d $(pw_feature_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(pw_feature_addr_gen_BASIC_WORKLIB); fi
	@touch $(pw_feature_addr_gen_BASIC_WORKLIB)/pw_feature_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_pw_feature_addr_gen_DPA = 
LIB_INCLUDES_pw_feature_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_feature_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_pw_feature_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_pw_feature_addr_gen_DPA = 
PREFIXED_LIB_NAMES_pw_feature_addr_gen_DPA = 
CCFLAGS_pw_feature_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_pw_feature_addr_gen_DPA=1  $(LIB_INCLUDES_pw_feature_addr_gen_DPA)
CCFLAGS_pw_feature_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_pw_feature_addr_gen_DPA : hlsc_pw_feature_addr_gen_DPA

cynth_pw_feature_addr_gen_DPA : hlsc_pw_feature_addr_gen_DPA 

elab_pw_feature_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.bdr

optim_pw_feature_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.bdr

sched_pw_feature_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.bdr

hlsc_pw_feature_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=pw_feature_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.pw_feature_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=pw_feature_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_pw_feature_addr_gen_DPA: clean_hls_pw_feature_addr_gen_DPA

clean_pw_feature_addr_gen_DPA: clean_hls_pw_feature_addr_gen_DPA

clean_hls_pw_feature_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_feature_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_feature_addr_gen.DPA.s

kill_hls_pw_feature_addr_gen_DPA:
	@bdw_kill -job hls.pw_feature_addr_gen.DPA
	@bdw_kill -job hls.pw_feature_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_pw_feature_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module pw_feature_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.v $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.bdr :  pw_feature_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.pw_feature_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_pw_feature_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA -o pw_feature_addr_gen_rtl.cpp \
		--hls_module=pw_feature_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_pw_feature_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_pw_feature_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_pw_feature_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 pw_feature_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_trace.h : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_feature_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_trace.h.updated

catHLLog_pw_feature_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_pw_feature_addr_gen_DPA : hls_pw_feature_addr_gen_DPA 


hls_pw_feature_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_pw_feature_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.v prep_vlog_pw_feature_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.pw_feature_addr_gen.DPA $(MAKE) CWBExec=1 hls_pw_feature_addr_gen_DPA
endif

catVLGLog_pw_feature_addr_gen_DPA : catHLLog_pw_feature_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_pw_feature_addr_gen_DPA : hls_pw_feature_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules pw_feature_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl pw_feature_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA -I./ $(CCFLAGS_pw_feature_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_feature_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen.o :  pw_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA -I./ $(CCFLAGS_pw_feature_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_hoist.o :  pw_feature_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA -I./ $(CCFLAGS_pw_feature_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_feature_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/pw_feature_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen.d :  pw_feature_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_pw_feature_addr_gen_DPA)  pw_feature_addr_gen.cpp \
	| sed 's|pw_feature_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen.o $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA"
##############################################################

pw_feature_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA
pw_feature_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/pw_feature_addr_gen_DPA
pw_feature_addr_gen_DPA_LIBNAME = pw_feature_addr_gen_DPA
pw_feature_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA
pw_feature_addr_gen_DPA_C_PARTS_A = $(pw_feature_addr_gen_DPA_WORKLIB)/objs/libpw_feature_addr_gen_DPA.a

prep_c_pw_feature_addr_gen_DPA : $(pw_feature_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_feature_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_pw_feature_addr_gen_DPA : $(pw_feature_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_feature_addr_gen_DPA_WORKLIB) prep_vlog

prep_pw_feature_addr_gen_DPA : $(pw_feature_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_feature_addr_gen_DPA_WORKLIB) prep

$(pw_feature_addr_gen_DPA_WORKLIB)/Makefile : $(pw_feature_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(pw_feature_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(pw_feature_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(pw_feature_addr_gen_DPA_SRCDIR) -o $(pw_feature_addr_gen_DPA_WORKLIB)/Makefile -module pw_feature_addr_gen -cynthconfig DPA  

$(pw_feature_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(pw_feature_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(pw_feature_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(pw_feature_addr_gen_DPA_WORKLIB)/pw_feature_addr_gen_DPA.d :
	@if [ ! -d $(pw_feature_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(pw_feature_addr_gen_DPA_WORKLIB); fi
	@touch $(pw_feature_addr_gen_DPA_WORKLIB)/pw_feature_addr_gen_DPA.d



##############################################################
## HLS Module "pw_weight_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/pw_weight_addr_gen.d :  pw_weight_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  pw_weight_addr_gen.cpp \
	| sed 's|pw_weight_addr_gen\.o[ :]*|$(BDW_OBJDIR)/pw_weight_addr_gen.o $(BDW_OBJDIR)/pw_weight_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h.updated :  pw_weight_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_weight_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/pw_weight_addr_gen.o:  pw_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/pw_weight_addr_gen.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp

.INTERMEDIATE : pw_weight_addr_gen_wrap.h

pw_weight_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.v   : $(BDW_WRAPDIR)/pw_weight_addr_gen.updated

$(BDW_WRAPDIR)/pw_weight_addr_gen.updated :  pw_weight_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module pw_weight_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/pw_weight_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_weight_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.d :  pw_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   pw_weight_addr_gen.cpp \
		| sed 's|pw_weight_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/pw_weight_addr_gen.updated $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.d 




##############################################################
## HLS Module "pw_weight_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_pw_weight_addr_gen_BASIC = 
LIB_INCLUDES_pw_weight_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_weight_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_pw_weight_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_pw_weight_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_pw_weight_addr_gen_BASIC = 
CCFLAGS_pw_weight_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_pw_weight_addr_gen_BASIC=1  $(LIB_INCLUDES_pw_weight_addr_gen_BASIC)
CCFLAGS_pw_weight_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_pw_weight_addr_gen_BASIC : hlsc_pw_weight_addr_gen_BASIC

cynth_pw_weight_addr_gen_BASIC : hlsc_pw_weight_addr_gen_BASIC 

elab_pw_weight_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.bdr

optim_pw_weight_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.bdr

sched_pw_weight_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.bdr

hlsc_pw_weight_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=pw_weight_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.pw_weight_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=pw_weight_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_pw_weight_addr_gen_BASIC: clean_hls_pw_weight_addr_gen_BASIC

clean_pw_weight_addr_gen_BASIC: clean_hls_pw_weight_addr_gen_BASIC

clean_hls_pw_weight_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_weight_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_weight_addr_gen.BASIC.s

kill_hls_pw_weight_addr_gen_BASIC:
	@bdw_kill -job hls.pw_weight_addr_gen.BASIC
	@bdw_kill -job hls.pw_weight_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_pw_weight_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module pw_weight_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.v $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.bdr :  pw_weight_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.pw_weight_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_pw_weight_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC -o pw_weight_addr_gen_rtl.cpp \
		--hls_module=pw_weight_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_pw_weight_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_pw_weight_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_pw_weight_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 pw_weight_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_trace.h : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_weight_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_trace.h.updated

catHLLog_pw_weight_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_pw_weight_addr_gen_BASIC : hls_pw_weight_addr_gen_BASIC 


hls_pw_weight_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_pw_weight_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.v prep_vlog_pw_weight_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.pw_weight_addr_gen.BASIC $(MAKE) CWBExec=1 hls_pw_weight_addr_gen_BASIC
endif

catVLGLog_pw_weight_addr_gen_BASIC : catHLLog_pw_weight_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_pw_weight_addr_gen_BASIC : hls_pw_weight_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules pw_weight_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl pw_weight_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC -I./ $(CCFLAGS_pw_weight_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_weight_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen.o :  pw_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC -I./ $(CCFLAGS_pw_weight_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_hoist.o :  pw_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC -I./ $(CCFLAGS_pw_weight_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_weight_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen.d :  pw_weight_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_pw_weight_addr_gen_BASIC)  pw_weight_addr_gen.cpp \
	| sed 's|pw_weight_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen.o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC"
##############################################################

pw_weight_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC
pw_weight_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/pw_weight_addr_gen_BASIC
pw_weight_addr_gen_BASIC_LIBNAME = pw_weight_addr_gen_BASIC
pw_weight_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC
pw_weight_addr_gen_BASIC_C_PARTS_A = $(pw_weight_addr_gen_BASIC_WORKLIB)/objs/libpw_weight_addr_gen_BASIC.a

prep_c_pw_weight_addr_gen_BASIC : $(pw_weight_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_weight_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_pw_weight_addr_gen_BASIC : $(pw_weight_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_weight_addr_gen_BASIC_WORKLIB) prep_vlog

prep_pw_weight_addr_gen_BASIC : $(pw_weight_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_weight_addr_gen_BASIC_WORKLIB) prep

$(pw_weight_addr_gen_BASIC_WORKLIB)/Makefile : $(pw_weight_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(pw_weight_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(pw_weight_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(pw_weight_addr_gen_BASIC_SRCDIR) -o $(pw_weight_addr_gen_BASIC_WORKLIB)/Makefile -module pw_weight_addr_gen -cynthconfig BASIC  

$(pw_weight_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(pw_weight_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(pw_weight_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(pw_weight_addr_gen_BASIC_WORKLIB)/pw_weight_addr_gen_BASIC.d :
	@if [ ! -d $(pw_weight_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(pw_weight_addr_gen_BASIC_WORKLIB); fi
	@touch $(pw_weight_addr_gen_BASIC_WORKLIB)/pw_weight_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_pw_weight_addr_gen_DPA = 
LIB_INCLUDES_pw_weight_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_pw_weight_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_pw_weight_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_pw_weight_addr_gen_DPA = 
PREFIXED_LIB_NAMES_pw_weight_addr_gen_DPA = 
CCFLAGS_pw_weight_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_pw_weight_addr_gen_DPA=1  $(LIB_INCLUDES_pw_weight_addr_gen_DPA)
CCFLAGS_pw_weight_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_pw_weight_addr_gen_DPA : hlsc_pw_weight_addr_gen_DPA

cynth_pw_weight_addr_gen_DPA : hlsc_pw_weight_addr_gen_DPA 

elab_pw_weight_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.bdr

optim_pw_weight_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.bdr

sched_pw_weight_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.bdr

hlsc_pw_weight_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=pw_weight_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.pw_weight_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=pw_weight_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_pw_weight_addr_gen_DPA: clean_hls_pw_weight_addr_gen_DPA

clean_pw_weight_addr_gen_DPA: clean_hls_pw_weight_addr_gen_DPA

clean_hls_pw_weight_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_weight_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.pw_weight_addr_gen.DPA.s

kill_hls_pw_weight_addr_gen_DPA:
	@bdw_kill -job hls.pw_weight_addr_gen.DPA
	@bdw_kill -job hls.pw_weight_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_pw_weight_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module pw_weight_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.v $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.bdr :  pw_weight_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.pw_weight_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_pw_weight_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA -o pw_weight_addr_gen_rtl.cpp \
		--hls_module=pw_weight_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_pw_weight_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_pw_weight_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_pw_weight_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 pw_weight_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_trace.h : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module pw_weight_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_trace.h.updated

catHLLog_pw_weight_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_pw_weight_addr_gen_DPA : hls_pw_weight_addr_gen_DPA 


hls_pw_weight_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_pw_weight_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.v prep_vlog_pw_weight_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.pw_weight_addr_gen.DPA $(MAKE) CWBExec=1 hls_pw_weight_addr_gen_DPA
endif

catVLGLog_pw_weight_addr_gen_DPA : catHLLog_pw_weight_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_pw_weight_addr_gen_DPA : hls_pw_weight_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules pw_weight_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl pw_weight_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA -I./ $(CCFLAGS_pw_weight_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_weight_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen.o :  pw_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA -I./ $(CCFLAGS_pw_weight_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_hoist.o :  pw_weight_addr_gen.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA -I./ $(CCFLAGS_pw_weight_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl pw_weight_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/pw_weight_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen.d :  pw_weight_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_pw_weight_addr_gen_DPA)  pw_weight_addr_gen.cpp \
	| sed 's|pw_weight_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen.o $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA"
##############################################################

pw_weight_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA
pw_weight_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/pw_weight_addr_gen_DPA
pw_weight_addr_gen_DPA_LIBNAME = pw_weight_addr_gen_DPA
pw_weight_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA
pw_weight_addr_gen_DPA_C_PARTS_A = $(pw_weight_addr_gen_DPA_WORKLIB)/objs/libpw_weight_addr_gen_DPA.a

prep_c_pw_weight_addr_gen_DPA : $(pw_weight_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_weight_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_pw_weight_addr_gen_DPA : $(pw_weight_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_weight_addr_gen_DPA_WORKLIB) prep_vlog

prep_pw_weight_addr_gen_DPA : $(pw_weight_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(pw_weight_addr_gen_DPA_WORKLIB) prep

$(pw_weight_addr_gen_DPA_WORKLIB)/Makefile : $(pw_weight_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(pw_weight_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(pw_weight_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(pw_weight_addr_gen_DPA_SRCDIR) -o $(pw_weight_addr_gen_DPA_WORKLIB)/Makefile -module pw_weight_addr_gen -cynthconfig DPA  

$(pw_weight_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(pw_weight_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(pw_weight_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(pw_weight_addr_gen_DPA_WORKLIB)/pw_weight_addr_gen_DPA.d :
	@if [ ! -d $(pw_weight_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(pw_weight_addr_gen_DPA_WORKLIB); fi
	@touch $(pw_weight_addr_gen_DPA_WORKLIB)/pw_weight_addr_gen_DPA.d



##############################################################
## HLS Module "bias_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/bias_addr_gen.d :  bias_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  bias_addr_gen.cpp \
	| sed 's|bias_addr_gen\.o[ :]*|$(BDW_OBJDIR)/bias_addr_gen.o $(BDW_OBJDIR)/bias_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h.updated :  bias_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module bias_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/bias_addr_gen.o:  bias_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/bias_addr_gen.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp

.INTERMEDIATE : bias_addr_gen_wrap.h

bias_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.v   : $(BDW_WRAPDIR)/bias_addr_gen.updated

$(BDW_WRAPDIR)/bias_addr_gen.updated :  bias_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module bias_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/bias_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module bias_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.d :  bias_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   bias_addr_gen.cpp \
		| sed 's|bias_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/bias_addr_gen.updated $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.d 




##############################################################
## HLS Module "bias_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_bias_addr_gen_BASIC = 
LIB_INCLUDES_bias_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bias_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_bias_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_bias_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_bias_addr_gen_BASIC = 
CCFLAGS_bias_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_bias_addr_gen_BASIC=1  $(LIB_INCLUDES_bias_addr_gen_BASIC)
CCFLAGS_bias_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_bias_addr_gen_BASIC : hlsc_bias_addr_gen_BASIC

cynth_bias_addr_gen_BASIC : hlsc_bias_addr_gen_BASIC 

elab_bias_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.bdr

optim_bias_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.bdr

sched_bias_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.bdr

hlsc_bias_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=bias_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.bias_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=bias_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_bias_addr_gen_BASIC: clean_hls_bias_addr_gen_BASIC

clean_bias_addr_gen_BASIC: clean_hls_bias_addr_gen_BASIC

clean_hls_bias_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bias_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bias_addr_gen.BASIC.s

kill_hls_bias_addr_gen_BASIC:
	@bdw_kill -job hls.bias_addr_gen.BASIC
	@bdw_kill -job hls.bias_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_bias_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module bias_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.v $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.bdr :  bias_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.bias_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_bias_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC -o bias_addr_gen_rtl.cpp \
		--hls_module=bias_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_bias_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_bias_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_bias_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 bias_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_trace.h : $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module bias_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_trace.h.updated

catHLLog_bias_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_bias_addr_gen_BASIC : hls_bias_addr_gen_BASIC 


hls_bias_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_bias_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.v prep_vlog_bias_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.bias_addr_gen.BASIC $(MAKE) CWBExec=1 hls_bias_addr_gen_BASIC
endif

catVLGLog_bias_addr_gen_BASIC : catHLLog_bias_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_bias_addr_gen_BASIC : hls_bias_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules bias_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl bias_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC -I./ $(CCFLAGS_bias_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl bias_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen.o :  bias_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC -I./ $(CCFLAGS_bias_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_hoist.o :  bias_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC -I./ $(CCFLAGS_bias_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl bias_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen.d :  bias_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_bias_addr_gen_BASIC)  bias_addr_gen.cpp \
	| sed 's|bias_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen.o $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/bias_addr_gen/BASIC"
##############################################################

bias_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC
bias_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/bias_addr_gen_BASIC
bias_addr_gen_BASIC_LIBNAME = bias_addr_gen_BASIC
bias_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC
bias_addr_gen_BASIC_C_PARTS_A = $(bias_addr_gen_BASIC_WORKLIB)/objs/libbias_addr_gen_BASIC.a

prep_c_bias_addr_gen_BASIC : $(bias_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bias_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_bias_addr_gen_BASIC : $(bias_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bias_addr_gen_BASIC_WORKLIB) prep_vlog

prep_bias_addr_gen_BASIC : $(bias_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bias_addr_gen_BASIC_WORKLIB) prep

$(bias_addr_gen_BASIC_WORKLIB)/Makefile : $(bias_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(bias_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(bias_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(bias_addr_gen_BASIC_SRCDIR) -o $(bias_addr_gen_BASIC_WORKLIB)/Makefile -module bias_addr_gen -cynthconfig BASIC  

$(bias_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(bias_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(bias_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(bias_addr_gen_BASIC_WORKLIB)/bias_addr_gen_BASIC.d :
	@if [ ! -d $(bias_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(bias_addr_gen_BASIC_WORKLIB); fi
	@touch $(bias_addr_gen_BASIC_WORKLIB)/bias_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_bias_addr_gen_DPA = 
LIB_INCLUDES_bias_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bias_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_bias_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_bias_addr_gen_DPA = 
PREFIXED_LIB_NAMES_bias_addr_gen_DPA = 
CCFLAGS_bias_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_bias_addr_gen_DPA=1  $(LIB_INCLUDES_bias_addr_gen_DPA)
CCFLAGS_bias_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_bias_addr_gen_DPA : hlsc_bias_addr_gen_DPA

cynth_bias_addr_gen_DPA : hlsc_bias_addr_gen_DPA 

elab_bias_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.bdr

optim_bias_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.bdr

sched_bias_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.bdr

hlsc_bias_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=bias_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.bias_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=bias_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_bias_addr_gen_DPA: clean_hls_bias_addr_gen_DPA

clean_bias_addr_gen_DPA: clean_hls_bias_addr_gen_DPA

clean_hls_bias_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/bias_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bias_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bias_addr_gen.DPA.s

kill_hls_bias_addr_gen_DPA:
	@bdw_kill -job hls.bias_addr_gen.DPA
	@bdw_kill -job hls.bias_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_bias_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module bias_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.v $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.bdr :  bias_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/bias_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/bias_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.bias_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_bias_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/bias_addr_gen/DPA -o bias_addr_gen_rtl.cpp \
		--hls_module=bias_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_bias_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_bias_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_bias_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 bias_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_trace.h : $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module bias_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_trace.h.updated

catHLLog_bias_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_bias_addr_gen_DPA : hls_bias_addr_gen_DPA 


hls_bias_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_bias_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.v prep_vlog_bias_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.bias_addr_gen.DPA $(MAKE) CWBExec=1 hls_bias_addr_gen_DPA
endif

catVLGLog_bias_addr_gen_DPA : catHLLog_bias_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_bias_addr_gen_DPA : hls_bias_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules bias_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl bias_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bias_addr_gen/DPA -I./ $(CCFLAGS_bias_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl bias_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen.o :  bias_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bias_addr_gen/DPA -I./ $(CCFLAGS_bias_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_hoist.o :  bias_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bias_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bias_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bias_addr_gen/DPA -I./ $(CCFLAGS_bias_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl bias_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/bias_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen.d :  bias_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_bias_addr_gen_DPA)  bias_addr_gen.cpp \
	| sed 's|bias_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen.o $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/bias_addr_gen/DPA"
##############################################################

bias_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/bias_addr_gen/DPA
bias_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/bias_addr_gen_DPA
bias_addr_gen_DPA_LIBNAME = bias_addr_gen_DPA
bias_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/bias_addr_gen/DPA
bias_addr_gen_DPA_C_PARTS_A = $(bias_addr_gen_DPA_WORKLIB)/objs/libbias_addr_gen_DPA.a

prep_c_bias_addr_gen_DPA : $(bias_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bias_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_bias_addr_gen_DPA : $(bias_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bias_addr_gen_DPA_WORKLIB) prep_vlog

prep_bias_addr_gen_DPA : $(bias_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bias_addr_gen_DPA_WORKLIB) prep

$(bias_addr_gen_DPA_WORKLIB)/Makefile : $(bias_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(bias_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(bias_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(bias_addr_gen_DPA_SRCDIR) -o $(bias_addr_gen_DPA_WORKLIB)/Makefile -module bias_addr_gen -cynthconfig DPA  

$(bias_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(bias_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(bias_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(bias_addr_gen_DPA_WORKLIB)/bias_addr_gen_DPA.d :
	@if [ ! -d $(bias_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(bias_addr_gen_DPA_WORKLIB); fi
	@touch $(bias_addr_gen_DPA_WORKLIB)/bias_addr_gen_DPA.d



##############################################################
## HLS Module "bn_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/bn_addr_gen.d :  bn_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  bn_addr_gen.cpp \
	| sed 's|bn_addr_gen\.o[ :]*|$(BDW_OBJDIR)/bn_addr_gen.o $(BDW_OBJDIR)/bn_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h.updated :  bn_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module bn_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/bn_addr_gen.o:  bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/bn_addr_gen.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp

.INTERMEDIATE : bn_addr_gen_wrap.h

bn_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.v   : $(BDW_WRAPDIR)/bn_addr_gen.updated

$(BDW_WRAPDIR)/bn_addr_gen.updated :  bn_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module bn_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/bn_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module bn_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.d :  bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   bn_addr_gen.cpp \
		| sed 's|bn_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/bn_addr_gen.updated $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.d 




##############################################################
## HLS Module "bn_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_bn_addr_gen_BASIC = 
LIB_INCLUDES_bn_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bn_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_bn_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_bn_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_bn_addr_gen_BASIC = 
CCFLAGS_bn_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_bn_addr_gen_BASIC=1  $(LIB_INCLUDES_bn_addr_gen_BASIC)
CCFLAGS_bn_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_bn_addr_gen_BASIC : hlsc_bn_addr_gen_BASIC

cynth_bn_addr_gen_BASIC : hlsc_bn_addr_gen_BASIC 

elab_bn_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.bdr

optim_bn_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.bdr

sched_bn_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.bdr

hlsc_bn_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=bn_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.bn_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=bn_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_bn_addr_gen_BASIC: clean_hls_bn_addr_gen_BASIC

clean_bn_addr_gen_BASIC: clean_hls_bn_addr_gen_BASIC

clean_hls_bn_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bn_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bn_addr_gen.BASIC.s

kill_hls_bn_addr_gen_BASIC:
	@bdw_kill -job hls.bn_addr_gen.BASIC
	@bdw_kill -job hls.bn_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_bn_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module bn_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.v $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.bdr :  bn_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.bn_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_bn_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC -o bn_addr_gen_rtl.cpp \
		--hls_module=bn_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_bn_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_bn_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_bn_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 bn_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_trace.h : $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module bn_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_trace.h.updated

catHLLog_bn_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_bn_addr_gen_BASIC : hls_bn_addr_gen_BASIC 


hls_bn_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_bn_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.v prep_vlog_bn_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.bn_addr_gen.BASIC $(MAKE) CWBExec=1 hls_bn_addr_gen_BASIC
endif

catVLGLog_bn_addr_gen_BASIC : catHLLog_bn_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_bn_addr_gen_BASIC : hls_bn_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules bn_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl bn_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC -I./ $(CCFLAGS_bn_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl bn_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen.o :  bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC -I./ $(CCFLAGS_bn_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_hoist.o :  bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC -I./ $(CCFLAGS_bn_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl bn_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen.d :  bn_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_bn_addr_gen_BASIC)  bn_addr_gen.cpp \
	| sed 's|bn_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen.o $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/bn_addr_gen/BASIC"
##############################################################

bn_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC
bn_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/bn_addr_gen_BASIC
bn_addr_gen_BASIC_LIBNAME = bn_addr_gen_BASIC
bn_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC
bn_addr_gen_BASIC_C_PARTS_A = $(bn_addr_gen_BASIC_WORKLIB)/objs/libbn_addr_gen_BASIC.a

prep_c_bn_addr_gen_BASIC : $(bn_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bn_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_bn_addr_gen_BASIC : $(bn_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bn_addr_gen_BASIC_WORKLIB) prep_vlog

prep_bn_addr_gen_BASIC : $(bn_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bn_addr_gen_BASIC_WORKLIB) prep

$(bn_addr_gen_BASIC_WORKLIB)/Makefile : $(bn_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(bn_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(bn_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(bn_addr_gen_BASIC_SRCDIR) -o $(bn_addr_gen_BASIC_WORKLIB)/Makefile -module bn_addr_gen -cynthconfig BASIC  

$(bn_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(bn_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(bn_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(bn_addr_gen_BASIC_WORKLIB)/bn_addr_gen_BASIC.d :
	@if [ ! -d $(bn_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(bn_addr_gen_BASIC_WORKLIB); fi
	@touch $(bn_addr_gen_BASIC_WORKLIB)/bn_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_bn_addr_gen_DPA = 
LIB_INCLUDES_bn_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_bn_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_bn_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_bn_addr_gen_DPA = 
PREFIXED_LIB_NAMES_bn_addr_gen_DPA = 
CCFLAGS_bn_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_bn_addr_gen_DPA=1  $(LIB_INCLUDES_bn_addr_gen_DPA)
CCFLAGS_bn_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_bn_addr_gen_DPA : hlsc_bn_addr_gen_DPA

cynth_bn_addr_gen_DPA : hlsc_bn_addr_gen_DPA 

elab_bn_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.bdr

optim_bn_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.bdr

sched_bn_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.bdr

hlsc_bn_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=bn_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.bn_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=bn_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_bn_addr_gen_DPA: clean_hls_bn_addr_gen_DPA

clean_bn_addr_gen_DPA: clean_hls_bn_addr_gen_DPA

clean_hls_bn_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/bn_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bn_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.bn_addr_gen.DPA.s

kill_hls_bn_addr_gen_DPA:
	@bdw_kill -job hls.bn_addr_gen.DPA
	@bdw_kill -job hls.bn_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_bn_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module bn_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.v $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.bdr :  bn_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/bn_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/bn_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.bn_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_bn_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/bn_addr_gen/DPA -o bn_addr_gen_rtl.cpp \
		--hls_module=bn_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_bn_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_bn_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_bn_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 bn_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_trace.h : $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module bn_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_trace.h.updated

catHLLog_bn_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_bn_addr_gen_DPA : hls_bn_addr_gen_DPA 


hls_bn_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_bn_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.v prep_vlog_bn_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.bn_addr_gen.DPA $(MAKE) CWBExec=1 hls_bn_addr_gen_DPA
endif

catVLGLog_bn_addr_gen_DPA : catHLLog_bn_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_bn_addr_gen_DPA : hls_bn_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules bn_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl bn_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bn_addr_gen/DPA -I./ $(CCFLAGS_bn_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl bn_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen.o :  bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bn_addr_gen/DPA -I./ $(CCFLAGS_bn_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_hoist.o :  bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/bn_addr_gen/DPA -I./ $(CCFLAGS_bn_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl bn_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/bn_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen.d :  bn_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_bn_addr_gen_DPA)  bn_addr_gen.cpp \
	| sed 's|bn_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen.o $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/bn_addr_gen/DPA"
##############################################################

bn_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/bn_addr_gen/DPA
bn_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/bn_addr_gen_DPA
bn_addr_gen_DPA_LIBNAME = bn_addr_gen_DPA
bn_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/bn_addr_gen/DPA
bn_addr_gen_DPA_C_PARTS_A = $(bn_addr_gen_DPA_WORKLIB)/objs/libbn_addr_gen_DPA.a

prep_c_bn_addr_gen_DPA : $(bn_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bn_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_bn_addr_gen_DPA : $(bn_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bn_addr_gen_DPA_WORKLIB) prep_vlog

prep_bn_addr_gen_DPA : $(bn_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(bn_addr_gen_DPA_WORKLIB) prep

$(bn_addr_gen_DPA_WORKLIB)/Makefile : $(bn_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(bn_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(bn_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(bn_addr_gen_DPA_SRCDIR) -o $(bn_addr_gen_DPA_WORKLIB)/Makefile -module bn_addr_gen -cynthconfig DPA  

$(bn_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(bn_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(bn_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(bn_addr_gen_DPA_WORKLIB)/bn_addr_gen_DPA.d :
	@if [ ! -d $(bn_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(bn_addr_gen_DPA_WORKLIB); fi
	@touch $(bn_addr_gen_DPA_WORKLIB)/bn_addr_gen_DPA.d



##############################################################
## HLS Module "org_bn_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/org_bn_addr_gen.d :  org_bn_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  org_bn_addr_gen.cpp \
	| sed 's|org_bn_addr_gen\.o[ :]*|$(BDW_OBJDIR)/org_bn_addr_gen.o $(BDW_OBJDIR)/org_bn_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h.updated :  org_bn_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module org_bn_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/org_bn_addr_gen.o:  org_bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/org_bn_addr_gen.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp

.INTERMEDIATE : org_bn_addr_gen_wrap.h

org_bn_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.v   : $(BDW_WRAPDIR)/org_bn_addr_gen.updated

$(BDW_WRAPDIR)/org_bn_addr_gen.updated :  org_bn_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module org_bn_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/org_bn_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module org_bn_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.d :  org_bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   org_bn_addr_gen.cpp \
		| sed 's|org_bn_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/org_bn_addr_gen.updated $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.d 




##############################################################
## HLS Module "org_bn_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_org_bn_addr_gen_BASIC = 
LIB_INCLUDES_org_bn_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_org_bn_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_org_bn_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_org_bn_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_org_bn_addr_gen_BASIC = 
CCFLAGS_org_bn_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_org_bn_addr_gen_BASIC=1  $(LIB_INCLUDES_org_bn_addr_gen_BASIC)
CCFLAGS_org_bn_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_org_bn_addr_gen_BASIC : hlsc_org_bn_addr_gen_BASIC

cynth_org_bn_addr_gen_BASIC : hlsc_org_bn_addr_gen_BASIC 

elab_org_bn_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.bdr

optim_org_bn_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.bdr

sched_org_bn_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.bdr

hlsc_org_bn_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=org_bn_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.org_bn_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=org_bn_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_org_bn_addr_gen_BASIC: clean_hls_org_bn_addr_gen_BASIC

clean_org_bn_addr_gen_BASIC: clean_hls_org_bn_addr_gen_BASIC

clean_hls_org_bn_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.org_bn_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.org_bn_addr_gen.BASIC.s

kill_hls_org_bn_addr_gen_BASIC:
	@bdw_kill -job hls.org_bn_addr_gen.BASIC
	@bdw_kill -job hls.org_bn_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_org_bn_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module org_bn_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.v $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.bdr :  org_bn_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.org_bn_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_org_bn_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC -o org_bn_addr_gen_rtl.cpp \
		--hls_module=org_bn_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_org_bn_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_org_bn_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_org_bn_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 org_bn_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_trace.h : $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module org_bn_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_trace.h.updated

catHLLog_org_bn_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_org_bn_addr_gen_BASIC : hls_org_bn_addr_gen_BASIC 


hls_org_bn_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_org_bn_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.v prep_vlog_org_bn_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.org_bn_addr_gen.BASIC $(MAKE) CWBExec=1 hls_org_bn_addr_gen_BASIC
endif

catVLGLog_org_bn_addr_gen_BASIC : catHLLog_org_bn_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_org_bn_addr_gen_BASIC : hls_org_bn_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules org_bn_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl org_bn_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC -I./ $(CCFLAGS_org_bn_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl org_bn_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen.o :  org_bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC -I./ $(CCFLAGS_org_bn_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_hoist.o :  org_bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC -I./ $(CCFLAGS_org_bn_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl org_bn_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen.d :  org_bn_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_org_bn_addr_gen_BASIC)  org_bn_addr_gen.cpp \
	| sed 's|org_bn_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen.o $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC"
##############################################################

org_bn_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC
org_bn_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/org_bn_addr_gen_BASIC
org_bn_addr_gen_BASIC_LIBNAME = org_bn_addr_gen_BASIC
org_bn_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC
org_bn_addr_gen_BASIC_C_PARTS_A = $(org_bn_addr_gen_BASIC_WORKLIB)/objs/liborg_bn_addr_gen_BASIC.a

prep_c_org_bn_addr_gen_BASIC : $(org_bn_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(org_bn_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_org_bn_addr_gen_BASIC : $(org_bn_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(org_bn_addr_gen_BASIC_WORKLIB) prep_vlog

prep_org_bn_addr_gen_BASIC : $(org_bn_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(org_bn_addr_gen_BASIC_WORKLIB) prep

$(org_bn_addr_gen_BASIC_WORKLIB)/Makefile : $(org_bn_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(org_bn_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(org_bn_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(org_bn_addr_gen_BASIC_SRCDIR) -o $(org_bn_addr_gen_BASIC_WORKLIB)/Makefile -module org_bn_addr_gen -cynthconfig BASIC  

$(org_bn_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(org_bn_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(org_bn_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(org_bn_addr_gen_BASIC_WORKLIB)/org_bn_addr_gen_BASIC.d :
	@if [ ! -d $(org_bn_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(org_bn_addr_gen_BASIC_WORKLIB); fi
	@touch $(org_bn_addr_gen_BASIC_WORKLIB)/org_bn_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_org_bn_addr_gen_DPA = 
LIB_INCLUDES_org_bn_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_org_bn_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_org_bn_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_org_bn_addr_gen_DPA = 
PREFIXED_LIB_NAMES_org_bn_addr_gen_DPA = 
CCFLAGS_org_bn_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_org_bn_addr_gen_DPA=1  $(LIB_INCLUDES_org_bn_addr_gen_DPA)
CCFLAGS_org_bn_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_org_bn_addr_gen_DPA : hlsc_org_bn_addr_gen_DPA

cynth_org_bn_addr_gen_DPA : hlsc_org_bn_addr_gen_DPA 

elab_org_bn_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.bdr

optim_org_bn_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.bdr

sched_org_bn_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.bdr

hlsc_org_bn_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=org_bn_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.org_bn_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=org_bn_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_org_bn_addr_gen_DPA: clean_hls_org_bn_addr_gen_DPA

clean_org_bn_addr_gen_DPA: clean_hls_org_bn_addr_gen_DPA

clean_hls_org_bn_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.org_bn_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.org_bn_addr_gen.DPA.s

kill_hls_org_bn_addr_gen_DPA:
	@bdw_kill -job hls.org_bn_addr_gen.DPA
	@bdw_kill -job hls.org_bn_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_org_bn_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module org_bn_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.v $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.bdr :  org_bn_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.org_bn_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_org_bn_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA -o org_bn_addr_gen_rtl.cpp \
		--hls_module=org_bn_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_org_bn_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_org_bn_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_org_bn_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 org_bn_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_trace.h : $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module org_bn_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_trace.h.updated

catHLLog_org_bn_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_org_bn_addr_gen_DPA : hls_org_bn_addr_gen_DPA 


hls_org_bn_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_org_bn_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.v prep_vlog_org_bn_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.org_bn_addr_gen.DPA $(MAKE) CWBExec=1 hls_org_bn_addr_gen_DPA
endif

catVLGLog_org_bn_addr_gen_DPA : catHLLog_org_bn_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_org_bn_addr_gen_DPA : hls_org_bn_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules org_bn_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl org_bn_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA -I./ $(CCFLAGS_org_bn_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl org_bn_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen.o :  org_bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA -I./ $(CCFLAGS_org_bn_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_hoist.o :  org_bn_addr_gen.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA -I./ $(CCFLAGS_org_bn_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl org_bn_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/org_bn_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen.d :  org_bn_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_org_bn_addr_gen_DPA)  org_bn_addr_gen.cpp \
	| sed 's|org_bn_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen.o $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA"
##############################################################

org_bn_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA
org_bn_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/org_bn_addr_gen_DPA
org_bn_addr_gen_DPA_LIBNAME = org_bn_addr_gen_DPA
org_bn_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA
org_bn_addr_gen_DPA_C_PARTS_A = $(org_bn_addr_gen_DPA_WORKLIB)/objs/liborg_bn_addr_gen_DPA.a

prep_c_org_bn_addr_gen_DPA : $(org_bn_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(org_bn_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_org_bn_addr_gen_DPA : $(org_bn_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(org_bn_addr_gen_DPA_WORKLIB) prep_vlog

prep_org_bn_addr_gen_DPA : $(org_bn_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(org_bn_addr_gen_DPA_WORKLIB) prep

$(org_bn_addr_gen_DPA_WORKLIB)/Makefile : $(org_bn_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(org_bn_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(org_bn_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(org_bn_addr_gen_DPA_SRCDIR) -o $(org_bn_addr_gen_DPA_WORKLIB)/Makefile -module org_bn_addr_gen -cynthconfig DPA  

$(org_bn_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(org_bn_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(org_bn_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(org_bn_addr_gen_DPA_WORKLIB)/org_bn_addr_gen_DPA.d :
	@if [ ! -d $(org_bn_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(org_bn_addr_gen_DPA_WORKLIB); fi
	@touch $(org_bn_addr_gen_DPA_WORKLIB)/org_bn_addr_gen_DPA.d



##############################################################
## HLS Module "feature_write_addr_gen"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/feature_write_addr_gen.d :  feature_write_addr_gen.cpp
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  feature_write_addr_gen.cpp \
	| sed 's|feature_write_addr_gen\.o[ :]*|$(BDW_OBJDIR)/feature_write_addr_gen.o $(BDW_OBJDIR)/feature_write_addr_gen.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h : $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h.updated

$(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h.updated :  feature_write_addr_gen.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module feature_write_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h.updated



$(BDW_WORKLIB)/objs/feature_write_addr_gen.o:  feature_write_addr_gen.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/feature_write_addr_gen.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp

.INTERMEDIATE : feature_write_addr_gen_wrap.h

feature_write_addr_gen_wrap.h : $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h

$(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.v   : $(BDW_WRAPDIR)/feature_write_addr_gen.updated

$(BDW_WRAPDIR)/feature_write_addr_gen.updated :  feature_write_addr_gen.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module feature_write_addr_gen "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/feature_write_addr_gen.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module feature_write_addr_gen -vcd 
	@touch $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h.updated
$(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.d :  feature_write_addr_gen.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   feature_write_addr_gen.cpp \
		| sed 's|feature_write_addr_gen\.o[ :]*|$(BDW_WRAPDIR)/feature_write_addr_gen.updated $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.d 




##############################################################
## HLS Module "feature_write_addr_gen" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_feature_write_addr_gen_BASIC = 
LIB_INCLUDES_feature_write_addr_gen_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_feature_write_addr_gen_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_feature_write_addr_gen_BASIC = 
LIB_NAMES_FOR_VLOG_feature_write_addr_gen_BASIC = 
PREFIXED_LIB_NAMES_feature_write_addr_gen_BASIC = 
CCFLAGS_feature_write_addr_gen_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/c_parts -DBASIC=1 -DBDW_RTL_feature_write_addr_gen_BASIC=1  $(LIB_INCLUDES_feature_write_addr_gen_BASIC)
CCFLAGS_feature_write_addr_gen_BASIC += ${BDW_CCFLAGS_TAIL}

hls_feature_write_addr_gen_BASIC : hlsc_feature_write_addr_gen_BASIC

cynth_feature_write_addr_gen_BASIC : hlsc_feature_write_addr_gen_BASIC 

elab_feature_write_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.bdr

optim_feature_write_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.bdr

sched_feature_write_addr_gen_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.bdr

hlsc_feature_write_addr_gen_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=feature_write_addr_gen BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.feature_write_addr_gen.BASIC $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=feature_write_addr_gen BDW_HLS_CONFIG=BASIC
endif

clean_cynth_feature_write_addr_gen_BASIC: clean_hls_feature_write_addr_gen_BASIC

clean_feature_write_addr_gen_BASIC: clean_hls_feature_write_addr_gen_BASIC

clean_hls_feature_write_addr_gen_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.feature_write_addr_gen.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.feature_write_addr_gen.BASIC.s

kill_hls_feature_write_addr_gen_BASIC:
	@bdw_kill -job hls.feature_write_addr_gen.BASIC
	@bdw_kill -job hls.feature_write_addr_gen.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_feature_write_addr_gen_BASIC :
	bdw_htmlgen -project project.tcl -module feature_write_addr_gen -cynthconfig BASIC



$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.v $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.bdr :  feature_write_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.feature_write_addr_gen.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_feature_write_addr_gen_BASIC) \
		-d $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC -o feature_write_addr_gen_rtl.cpp \
		--hls_module=feature_write_addr_gen --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_feature_write_addr_gen_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_feature_write_addr_gen_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_feature_write_addr_gen_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 feature_write_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_trace.h : $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module feature_write_addr_gen -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_trace.h.updated

catHLLog_feature_write_addr_gen_BASIC:
	cat $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_feature_write_addr_gen_BASIC : hls_feature_write_addr_gen_BASIC 


hls_feature_write_addr_gen_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_feature_write_addr_gen_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.v prep_vlog_feature_write_addr_gen_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.feature_write_addr_gen.BASIC $(MAKE) CWBExec=1 hls_feature_write_addr_gen_BASIC
endif

catVLGLog_feature_write_addr_gen_BASIC : catHLLog_feature_write_addr_gen_BASIC
	cat $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_vlg.log

#
#	view rule
#
view_feature_write_addr_gen_BASIC : hls_feature_write_addr_gen_BASIC
	@bdw_view_verdi -project project.tcl -modules feature_write_addr_gen -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl feature_write_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC -I./ $(CCFLAGS_feature_write_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl feature_write_addr_gen BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen.o :  feature_write_addr_gen.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC -I./ $(CCFLAGS_feature_write_addr_gen_BASIC) -o $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_hoist.o :  feature_write_addr_gen.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC -I./ $(CCFLAGS_feature_write_addr_gen_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl feature_write_addr_gen BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen.d :  feature_write_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_feature_write_addr_gen_BASIC)  feature_write_addr_gen.cpp \
	| sed 's|feature_write_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen.o $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC"
##############################################################

feature_write_addr_gen_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC
feature_write_addr_gen_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/feature_write_addr_gen_BASIC
feature_write_addr_gen_BASIC_LIBNAME = feature_write_addr_gen_BASIC
feature_write_addr_gen_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC
feature_write_addr_gen_BASIC_C_PARTS_A = $(feature_write_addr_gen_BASIC_WORKLIB)/objs/libfeature_write_addr_gen_BASIC.a

prep_c_feature_write_addr_gen_BASIC : $(feature_write_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(feature_write_addr_gen_BASIC_WORKLIB) prep_c

prep_vlog_feature_write_addr_gen_BASIC : $(feature_write_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(feature_write_addr_gen_BASIC_WORKLIB) prep_vlog

prep_feature_write_addr_gen_BASIC : $(feature_write_addr_gen_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(feature_write_addr_gen_BASIC_WORKLIB) prep

$(feature_write_addr_gen_BASIC_WORKLIB)/Makefile : $(feature_write_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(feature_write_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(feature_write_addr_gen_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(feature_write_addr_gen_BASIC_SRCDIR) -o $(feature_write_addr_gen_BASIC_WORKLIB)/Makefile -module feature_write_addr_gen -cynthconfig BASIC  

$(feature_write_addr_gen_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(feature_write_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(feature_write_addr_gen_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(feature_write_addr_gen_BASIC_WORKLIB)/feature_write_addr_gen_BASIC.d :
	@if [ ! -d $(feature_write_addr_gen_BASIC_WORKLIB) ]; then mkdir -p $(feature_write_addr_gen_BASIC_WORKLIB); fi
	@touch $(feature_write_addr_gen_BASIC_WORKLIB)/feature_write_addr_gen_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_feature_write_addr_gen_DPA = 
LIB_INCLUDES_feature_write_addr_gen_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_feature_write_addr_gen_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_feature_write_addr_gen_DPA = 
LIB_NAMES_FOR_VLOG_feature_write_addr_gen_DPA = 
PREFIXED_LIB_NAMES_feature_write_addr_gen_DPA = 
CCFLAGS_feature_write_addr_gen_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/c_parts -DDPA=1 -DBDW_RTL_feature_write_addr_gen_DPA=1  $(LIB_INCLUDES_feature_write_addr_gen_DPA)
CCFLAGS_feature_write_addr_gen_DPA += ${BDW_CCFLAGS_TAIL}

hls_feature_write_addr_gen_DPA : hlsc_feature_write_addr_gen_DPA

cynth_feature_write_addr_gen_DPA : hlsc_feature_write_addr_gen_DPA 

elab_feature_write_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.bdr

optim_feature_write_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.bdr

sched_feature_write_addr_gen_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.bdr

hlsc_feature_write_addr_gen_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=feature_write_addr_gen BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.feature_write_addr_gen.DPA $(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=feature_write_addr_gen BDW_HLS_CONFIG=DPA
endif

clean_cynth_feature_write_addr_gen_DPA: clean_hls_feature_write_addr_gen_DPA

clean_feature_write_addr_gen_DPA: clean_hls_feature_write_addr_gen_DPA

clean_hls_feature_write_addr_gen_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.feature_write_addr_gen.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.feature_write_addr_gen.DPA.s

kill_hls_feature_write_addr_gen_DPA:
	@bdw_kill -job hls.feature_write_addr_gen.DPA
	@bdw_kill -job hls.feature_write_addr_gen.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_feature_write_addr_gen_DPA :
	bdw_htmlgen -project project.tcl -module feature_write_addr_gen -cynthconfig DPA



$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp

$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.v $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.bdr :  feature_write_addr_gen.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.feature_write_addr_gen.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_feature_write_addr_gen_DPA) \
		-d $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA -o feature_write_addr_gen_rtl.cpp \
		--hls_module=feature_write_addr_gen --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_feature_write_addr_gen_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_feature_write_addr_gen_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_feature_write_addr_gen_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 feature_write_addr_gen.cpp
	
	
	
	
	
$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_trace.h : $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_trace.h.updated

$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_trace.h.updated : $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module feature_write_addr_gen -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_trace.h.updated

catHLLog_feature_write_addr_gen_DPA:
	cat $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_feature_write_addr_gen_DPA : hls_feature_write_addr_gen_DPA 


hls_feature_write_addr_gen_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_feature_write_addr_gen_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.v prep_vlog_feature_write_addr_gen_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.feature_write_addr_gen.DPA $(MAKE) CWBExec=1 hls_feature_write_addr_gen_DPA
endif

catVLGLog_feature_write_addr_gen_DPA : catHLLog_feature_write_addr_gen_DPA
	cat $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_vlg.log

#
#	view rule
#
view_feature_write_addr_gen_DPA : hls_feature_write_addr_gen_DPA
	@bdw_view_verdi -project project.tcl -modules feature_write_addr_gen -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.o : $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl feature_write_addr_gen`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA -I./ $(CCFLAGS_feature_write_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl feature_write_addr_gen DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen.o :  feature_write_addr_gen.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA -I./ $(CCFLAGS_feature_write_addr_gen_DPA) -o $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp
    

$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_hoist.o :  feature_write_addr_gen.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_cosim.h $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA -I./ $(CCFLAGS_feature_write_addr_gen_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl feature_write_addr_gen DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_hoist.o  $(BDW_WORKLIB)/wrappers/feature_write_addr_gen_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen.d :  feature_write_addr_gen.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_feature_write_addr_gen_DPA)  feature_write_addr_gen.cpp \
	| sed 's|feature_write_addr_gen\.o[ :]*|$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen.o $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA"
##############################################################

feature_write_addr_gen_DPA_SRCDIR = $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA
feature_write_addr_gen_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/feature_write_addr_gen_DPA
feature_write_addr_gen_DPA_LIBNAME = feature_write_addr_gen_DPA
feature_write_addr_gen_DPA_WORKLIB = $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA
feature_write_addr_gen_DPA_C_PARTS_A = $(feature_write_addr_gen_DPA_WORKLIB)/objs/libfeature_write_addr_gen_DPA.a

prep_c_feature_write_addr_gen_DPA : $(feature_write_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(feature_write_addr_gen_DPA_WORKLIB) prep_c

prep_vlog_feature_write_addr_gen_DPA : $(feature_write_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(feature_write_addr_gen_DPA_WORKLIB) prep_vlog

prep_feature_write_addr_gen_DPA : $(feature_write_addr_gen_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(feature_write_addr_gen_DPA_WORKLIB) prep

$(feature_write_addr_gen_DPA_WORKLIB)/Makefile : $(feature_write_addr_gen_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(feature_write_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(feature_write_addr_gen_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(feature_write_addr_gen_DPA_SRCDIR) -o $(feature_write_addr_gen_DPA_WORKLIB)/Makefile -module feature_write_addr_gen -cynthconfig DPA  

$(feature_write_addr_gen_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(feature_write_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(feature_write_addr_gen_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(feature_write_addr_gen_DPA_WORKLIB)/feature_write_addr_gen_DPA.d :
	@if [ ! -d $(feature_write_addr_gen_DPA_WORKLIB) ]; then mkdir -p $(feature_write_addr_gen_DPA_WORKLIB); fi
	@touch $(feature_write_addr_gen_DPA_WORKLIB)/feature_write_addr_gen_DPA.d



#
# Rules for configured systemModules
#


#
# Per-hls_config rules
#

cynth_DPA:  cynth_st_feature_addr_gen_DPA cynth_st_weight_addr_gen_DPA cynth_pw_feature_addr_gen_DPA cynth_pw_weight_addr_gen_DPA cynth_bias_addr_gen_DPA cynth_bn_addr_gen_DPA cynth_org_bn_addr_gen_DPA cynth_feature_write_addr_gen_DPA
hlsc_DPA:  
	$(MAKE) -j1 hlsc_st_feature_addr_gen_DPA hlsc_st_weight_addr_gen_DPA hlsc_pw_feature_addr_gen_DPA hlsc_pw_weight_addr_gen_DPA hlsc_bias_addr_gen_DPA hlsc_bn_addr_gen_DPA hlsc_org_bn_addr_gen_DPA hlsc_feature_write_addr_gen_DPA

cynthvlg_DPA: hls_DPA
hls_DPA:  
	$(MAKE) -j1 hls_st_feature_addr_gen_DPA hls_st_weight_addr_gen_DPA hls_pw_feature_addr_gen_DPA hls_pw_weight_addr_gen_DPA hls_bias_addr_gen_DPA hls_bn_addr_gen_DPA hls_org_bn_addr_gen_DPA hls_feature_write_addr_gen_DPA

cynthvlg_DPA: elab_DPA
elab_DPA:  
	$(MAKE) -j1 elab_st_feature_addr_gen_DPA elab_st_weight_addr_gen_DPA elab_pw_feature_addr_gen_DPA elab_pw_weight_addr_gen_DPA elab_bias_addr_gen_DPA elab_bn_addr_gen_DPA elab_org_bn_addr_gen_DPA elab_feature_write_addr_gen_DPA

cynthvlg_DPA: optim_DPA
optim_DPA:  
	$(MAKE) -j1 optim_st_feature_addr_gen_DPA optim_st_weight_addr_gen_DPA optim_pw_feature_addr_gen_DPA optim_pw_weight_addr_gen_DPA optim_bias_addr_gen_DPA optim_bn_addr_gen_DPA optim_org_bn_addr_gen_DPA optim_feature_write_addr_gen_DPA

cynthvlg_DPA: sched_DPA
sched_DPA:  
	$(MAKE) -j1 sched_st_feature_addr_gen_DPA sched_st_weight_addr_gen_DPA sched_pw_feature_addr_gen_DPA sched_pw_weight_addr_gen_DPA sched_bias_addr_gen_DPA sched_bn_addr_gen_DPA sched_org_bn_addr_gen_DPA sched_feature_write_addr_gen_DPA

view_DPA: hls_DPA
	@bdw_view_verdi -project project.tcl -modules st_feature_addr_gen,st_weight_addr_gen,pw_feature_addr_gen,pw_weight_addr_gen,bias_addr_gen,bn_addr_gen,org_bn_addr_gen,feature_write_addr_gen -cynthconfig DPA


clean_DPA:
	@rm -f $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/stratus_hls.bdr


cynth_BASIC:  cynth_st_feature_addr_gen_BASIC cynth_st_weight_addr_gen_BASIC cynth_pw_feature_addr_gen_BASIC cynth_pw_weight_addr_gen_BASIC cynth_bias_addr_gen_BASIC cynth_bn_addr_gen_BASIC cynth_org_bn_addr_gen_BASIC cynth_feature_write_addr_gen_BASIC
hlsc_BASIC:  
	$(MAKE) -j1 hlsc_st_feature_addr_gen_BASIC hlsc_st_weight_addr_gen_BASIC hlsc_pw_feature_addr_gen_BASIC hlsc_pw_weight_addr_gen_BASIC hlsc_bias_addr_gen_BASIC hlsc_bn_addr_gen_BASIC hlsc_org_bn_addr_gen_BASIC hlsc_feature_write_addr_gen_BASIC

cynthvlg_BASIC: hls_BASIC
hls_BASIC:  
	$(MAKE) -j1 hls_st_feature_addr_gen_BASIC hls_st_weight_addr_gen_BASIC hls_pw_feature_addr_gen_BASIC hls_pw_weight_addr_gen_BASIC hls_bias_addr_gen_BASIC hls_bn_addr_gen_BASIC hls_org_bn_addr_gen_BASIC hls_feature_write_addr_gen_BASIC

cynthvlg_BASIC: elab_BASIC
elab_BASIC:  
	$(MAKE) -j1 elab_st_feature_addr_gen_BASIC elab_st_weight_addr_gen_BASIC elab_pw_feature_addr_gen_BASIC elab_pw_weight_addr_gen_BASIC elab_bias_addr_gen_BASIC elab_bn_addr_gen_BASIC elab_org_bn_addr_gen_BASIC elab_feature_write_addr_gen_BASIC

cynthvlg_BASIC: optim_BASIC
optim_BASIC:  
	$(MAKE) -j1 optim_st_feature_addr_gen_BASIC optim_st_weight_addr_gen_BASIC optim_pw_feature_addr_gen_BASIC optim_pw_weight_addr_gen_BASIC optim_bias_addr_gen_BASIC optim_bn_addr_gen_BASIC optim_org_bn_addr_gen_BASIC optim_feature_write_addr_gen_BASIC

cynthvlg_BASIC: sched_BASIC
sched_BASIC:  
	$(MAKE) -j1 sched_st_feature_addr_gen_BASIC sched_st_weight_addr_gen_BASIC sched_pw_feature_addr_gen_BASIC sched_pw_weight_addr_gen_BASIC sched_bias_addr_gen_BASIC sched_bn_addr_gen_BASIC sched_org_bn_addr_gen_BASIC sched_feature_write_addr_gen_BASIC

view_BASIC: hls_BASIC
	@bdw_view_verdi -project project.tcl -modules st_feature_addr_gen,st_weight_addr_gen,pw_feature_addr_gen,pw_weight_addr_gen,bias_addr_gen,bn_addr_gen,org_bn_addr_gen,feature_write_addr_gen -cynthconfig BASIC


clean_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.cpp $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/stratus_hls.bdr



##############################################################################
#   start of rules for logic synthesis
##############################################################################

synth1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_LS_CONFIG_DIR) ]; then mkdir -p $(BDW_LS_CONFIG_DIR); fi
	@rm -rf $(BDW_LS_CONFIG_LOGS)
	@$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_synthinfo.tcl
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' STARTED"
ifeq ($(BDW_LS_LIC),)
	@echo "****** Error: synth1target FAILED because BDW_LS_LIC was not set"; exit 1
endif
endif
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job ls.$(BDW_LS_CONFIG).s $(BDW_LS_CMD)
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' FINISHED"
endif


#
#   Rules for logicSynth config G_ST_FEATRE_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_ST_FEATRE_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC/st_feature_addr_gen_gates.v
else
.PHONY: ls_G_ST_FEATRE_ADDR_GEN_BASIC

ls_G_ST_FEATRE_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_ST_FEATRE_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_ST_FEATRE_ADDR_GEN_BASIC
endif

kill_ls_G_ST_FEATRE_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_ST_FEATRE_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_ST_FEATRE_ADDR_GEN_BASIC.s

clean_ls_G_ST_FEATRE_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_BASIC/st_feature_addr_gen_gates.v: $(BDW_WORKLIB)/modules/st_feature_addr_gen/BASIC/st_feature_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_st_feature_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_ST_FEATRE_ADDR_GEN_BASIC BDW_MODULE=st_feature_addr_gen

view_ls_G_ST_FEATRE_ADDR_GEN_BASIC: hls_st_feature_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_ST_FEATRE_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_ST_FEATRE_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_ST_FEATRE_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA/st_feature_addr_gen_gates.v
else
.PHONY: ls_G_ST_FEATRE_ADDR_GEN_DPA

ls_G_ST_FEATRE_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_ST_FEATRE_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_ST_FEATRE_ADDR_GEN_DPA
endif

kill_ls_G_ST_FEATRE_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_ST_FEATRE_ADDR_GEN_DPA
	@bdw_kill -job ls.G_ST_FEATRE_ADDR_GEN_DPA.s

clean_ls_G_ST_FEATRE_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_ST_FEATRE_ADDR_GEN_DPA/st_feature_addr_gen_gates.v: $(BDW_WORKLIB)/modules/st_feature_addr_gen/DPA/st_feature_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_st_feature_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_ST_FEATRE_ADDR_GEN_DPA BDW_MODULE=st_feature_addr_gen

view_ls_G_ST_FEATRE_ADDR_GEN_DPA: hls_st_feature_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_ST_FEATRE_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_ST_WEIGHT_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_ST_WEIGHT_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC/st_weight_addr_gen_gates.v
else
.PHONY: ls_G_ST_WEIGHT_ADDR_GEN_BASIC

ls_G_ST_WEIGHT_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_ST_WEIGHT_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_ST_WEIGHT_ADDR_GEN_BASIC
endif

kill_ls_G_ST_WEIGHT_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_ST_WEIGHT_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_ST_WEIGHT_ADDR_GEN_BASIC.s

clean_ls_G_ST_WEIGHT_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_BASIC/st_weight_addr_gen_gates.v: $(BDW_WORKLIB)/modules/st_weight_addr_gen/BASIC/st_weight_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_st_weight_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_ST_WEIGHT_ADDR_GEN_BASIC BDW_MODULE=st_weight_addr_gen

view_ls_G_ST_WEIGHT_ADDR_GEN_BASIC: hls_st_weight_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_ST_WEIGHT_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_ST_WEIGHT_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_ST_WEIGHT_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA/st_weight_addr_gen_gates.v
else
.PHONY: ls_G_ST_WEIGHT_ADDR_GEN_DPA

ls_G_ST_WEIGHT_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_ST_WEIGHT_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_ST_WEIGHT_ADDR_GEN_DPA
endif

kill_ls_G_ST_WEIGHT_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_ST_WEIGHT_ADDR_GEN_DPA
	@bdw_kill -job ls.G_ST_WEIGHT_ADDR_GEN_DPA.s

clean_ls_G_ST_WEIGHT_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_ST_WEIGHT_ADDR_GEN_DPA/st_weight_addr_gen_gates.v: $(BDW_WORKLIB)/modules/st_weight_addr_gen/DPA/st_weight_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_st_weight_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_ST_WEIGHT_ADDR_GEN_DPA BDW_MODULE=st_weight_addr_gen

view_ls_G_ST_WEIGHT_ADDR_GEN_DPA: hls_st_weight_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_ST_WEIGHT_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_PW_FEATRE_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_PW_FEATRE_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC/pw_feature_addr_gen_gates.v
else
.PHONY: ls_G_PW_FEATRE_ADDR_GEN_BASIC

ls_G_PW_FEATRE_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_PW_FEATRE_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_PW_FEATRE_ADDR_GEN_BASIC
endif

kill_ls_G_PW_FEATRE_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_PW_FEATRE_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_PW_FEATRE_ADDR_GEN_BASIC.s

clean_ls_G_PW_FEATRE_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_BASIC/pw_feature_addr_gen_gates.v: $(BDW_WORKLIB)/modules/pw_feature_addr_gen/BASIC/pw_feature_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_pw_feature_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_PW_FEATRE_ADDR_GEN_BASIC BDW_MODULE=pw_feature_addr_gen

view_ls_G_PW_FEATRE_ADDR_GEN_BASIC: hls_pw_feature_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_PW_FEATRE_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_PW_FEATRE_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_PW_FEATRE_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA/pw_feature_addr_gen_gates.v
else
.PHONY: ls_G_PW_FEATRE_ADDR_GEN_DPA

ls_G_PW_FEATRE_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_PW_FEATRE_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_PW_FEATRE_ADDR_GEN_DPA
endif

kill_ls_G_PW_FEATRE_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_PW_FEATRE_ADDR_GEN_DPA
	@bdw_kill -job ls.G_PW_FEATRE_ADDR_GEN_DPA.s

clean_ls_G_PW_FEATRE_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_PW_FEATRE_ADDR_GEN_DPA/pw_feature_addr_gen_gates.v: $(BDW_WORKLIB)/modules/pw_feature_addr_gen/DPA/pw_feature_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_pw_feature_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_PW_FEATRE_ADDR_GEN_DPA BDW_MODULE=pw_feature_addr_gen

view_ls_G_PW_FEATRE_ADDR_GEN_DPA: hls_pw_feature_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_PW_FEATRE_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_PW_WEIGHT_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_PW_WEIGHT_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC/pw_weight_addr_gen_gates.v
else
.PHONY: ls_G_PW_WEIGHT_ADDR_GEN_BASIC

ls_G_PW_WEIGHT_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_PW_WEIGHT_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_PW_WEIGHT_ADDR_GEN_BASIC
endif

kill_ls_G_PW_WEIGHT_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_PW_WEIGHT_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_PW_WEIGHT_ADDR_GEN_BASIC.s

clean_ls_G_PW_WEIGHT_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_BASIC/pw_weight_addr_gen_gates.v: $(BDW_WORKLIB)/modules/pw_weight_addr_gen/BASIC/pw_weight_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_pw_weight_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_PW_WEIGHT_ADDR_GEN_BASIC BDW_MODULE=pw_weight_addr_gen

view_ls_G_PW_WEIGHT_ADDR_GEN_BASIC: hls_pw_weight_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_PW_WEIGHT_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_PW_WEIGHT_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_PW_WEIGHT_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA/pw_weight_addr_gen_gates.v
else
.PHONY: ls_G_PW_WEIGHT_ADDR_GEN_DPA

ls_G_PW_WEIGHT_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_PW_WEIGHT_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_PW_WEIGHT_ADDR_GEN_DPA
endif

kill_ls_G_PW_WEIGHT_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_PW_WEIGHT_ADDR_GEN_DPA
	@bdw_kill -job ls.G_PW_WEIGHT_ADDR_GEN_DPA.s

clean_ls_G_PW_WEIGHT_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_PW_WEIGHT_ADDR_GEN_DPA/pw_weight_addr_gen_gates.v: $(BDW_WORKLIB)/modules/pw_weight_addr_gen/DPA/pw_weight_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_pw_weight_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_PW_WEIGHT_ADDR_GEN_DPA BDW_MODULE=pw_weight_addr_gen

view_ls_G_PW_WEIGHT_ADDR_GEN_DPA: hls_pw_weight_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_PW_WEIGHT_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_BIAS_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_BIAS_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC/bias_addr_gen_gates.v
else
.PHONY: ls_G_BIAS_ADDR_GEN_BASIC

ls_G_BIAS_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_BIAS_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_BIAS_ADDR_GEN_BASIC
endif

kill_ls_G_BIAS_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_BIAS_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_BIAS_ADDR_GEN_BASIC.s

clean_ls_G_BIAS_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_BASIC/bias_addr_gen_gates.v: $(BDW_WORKLIB)/modules/bias_addr_gen/BASIC/bias_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_bias_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_BIAS_ADDR_GEN_BASIC BDW_MODULE=bias_addr_gen

view_ls_G_BIAS_ADDR_GEN_BASIC: hls_bias_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_BIAS_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_BIAS_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_BIAS_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA/bias_addr_gen_gates.v
else
.PHONY: ls_G_BIAS_ADDR_GEN_DPA

ls_G_BIAS_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_BIAS_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_BIAS_ADDR_GEN_DPA
endif

kill_ls_G_BIAS_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_BIAS_ADDR_GEN_DPA
	@bdw_kill -job ls.G_BIAS_ADDR_GEN_DPA.s

clean_ls_G_BIAS_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_BIAS_ADDR_GEN_DPA/bias_addr_gen_gates.v: $(BDW_WORKLIB)/modules/bias_addr_gen/DPA/bias_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_bias_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_BIAS_ADDR_GEN_DPA BDW_MODULE=bias_addr_gen

view_ls_G_BIAS_ADDR_GEN_DPA: hls_bias_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_BIAS_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_BN_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_BN_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC/bn_addr_gen_gates.v
else
.PHONY: ls_G_BN_ADDR_GEN_BASIC

ls_G_BN_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_BN_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_BN_ADDR_GEN_BASIC
endif

kill_ls_G_BN_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_BN_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_BN_ADDR_GEN_BASIC.s

clean_ls_G_BN_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_BASIC/bn_addr_gen_gates.v: $(BDW_WORKLIB)/modules/bn_addr_gen/BASIC/bn_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_bn_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_BN_ADDR_GEN_BASIC BDW_MODULE=bn_addr_gen

view_ls_G_BN_ADDR_GEN_BASIC: hls_bn_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_BN_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_BN_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_BN_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA/bn_addr_gen_gates.v
else
.PHONY: ls_G_BN_ADDR_GEN_DPA

ls_G_BN_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_BN_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_BN_ADDR_GEN_DPA
endif

kill_ls_G_BN_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_BN_ADDR_GEN_DPA
	@bdw_kill -job ls.G_BN_ADDR_GEN_DPA.s

clean_ls_G_BN_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_BN_ADDR_GEN_DPA/bn_addr_gen_gates.v: $(BDW_WORKLIB)/modules/bn_addr_gen/DPA/bn_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_bn_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_BN_ADDR_GEN_DPA BDW_MODULE=bn_addr_gen

view_ls_G_BN_ADDR_GEN_DPA: hls_bn_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_BN_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_ORG_BN_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_ORG_BN_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC/org_bn_addr_gen_gates.v
else
.PHONY: ls_G_ORG_BN_ADDR_GEN_BASIC

ls_G_ORG_BN_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_ORG_BN_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_ORG_BN_ADDR_GEN_BASIC
endif

kill_ls_G_ORG_BN_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_ORG_BN_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_ORG_BN_ADDR_GEN_BASIC.s

clean_ls_G_ORG_BN_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_BASIC/org_bn_addr_gen_gates.v: $(BDW_WORKLIB)/modules/org_bn_addr_gen/BASIC/org_bn_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_org_bn_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_ORG_BN_ADDR_GEN_BASIC BDW_MODULE=org_bn_addr_gen

view_ls_G_ORG_BN_ADDR_GEN_BASIC: hls_org_bn_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_ORG_BN_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_ORG_BN_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_ORG_BN_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA/org_bn_addr_gen_gates.v
else
.PHONY: ls_G_ORG_BN_ADDR_GEN_DPA

ls_G_ORG_BN_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_ORG_BN_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_ORG_BN_ADDR_GEN_DPA
endif

kill_ls_G_ORG_BN_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_ORG_BN_ADDR_GEN_DPA
	@bdw_kill -job ls.G_ORG_BN_ADDR_GEN_DPA.s

clean_ls_G_ORG_BN_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_ORG_BN_ADDR_GEN_DPA/org_bn_addr_gen_gates.v: $(BDW_WORKLIB)/modules/org_bn_addr_gen/DPA/org_bn_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_org_bn_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_ORG_BN_ADDR_GEN_DPA BDW_MODULE=org_bn_addr_gen

view_ls_G_ORG_BN_ADDR_GEN_DPA: hls_org_bn_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_ORG_BN_ADDR_GEN_DPA

#
#   Rules for logicSynth config G_FEATURE_WRITE_ADDR_GEN_BASIC
#

ifeq ($(CWBExec),1)
ls_G_FEATURE_WRITE_ADDR_GEN_BASIC: $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC/feature_write_addr_gen_gates.v
else
.PHONY: ls_G_FEATURE_WRITE_ADDR_GEN_BASIC

ls_G_FEATURE_WRITE_ADDR_GEN_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.G_FEATURE_WRITE_ADDR_GEN_BASIC $(MAKE) CWBExec=1 ls_G_FEATURE_WRITE_ADDR_GEN_BASIC
endif

kill_ls_G_FEATURE_WRITE_ADDR_GEN_BASIC:
	@bdw_kill -job ls.G_FEATURE_WRITE_ADDR_GEN_BASIC
	@bdw_kill -job ls.G_FEATURE_WRITE_ADDR_GEN_BASIC.s

clean_ls_G_FEATURE_WRITE_ADDR_GEN_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC

$(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_BASIC/feature_write_addr_gen_gates.v: $(BDW_WORKLIB)/modules/feature_write_addr_gen/BASIC/feature_write_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_feature_write_addr_gen_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_FEATURE_WRITE_ADDR_GEN_BASIC BDW_MODULE=feature_write_addr_gen

view_ls_G_FEATURE_WRITE_ADDR_GEN_BASIC: hls_feature_write_addr_gen_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig G_FEATURE_WRITE_ADDR_GEN_BASIC

#
#   Rules for logicSynth config G_FEATURE_WRITE_ADDR_GEN_DPA
#

ifeq ($(CWBExec),1)
ls_G_FEATURE_WRITE_ADDR_GEN_DPA: $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA/feature_write_addr_gen_gates.v
else
.PHONY: ls_G_FEATURE_WRITE_ADDR_GEN_DPA

ls_G_FEATURE_WRITE_ADDR_GEN_DPA:
	@bdw_exec -jobproject project.tcl -job ls.G_FEATURE_WRITE_ADDR_GEN_DPA $(MAKE) CWBExec=1 ls_G_FEATURE_WRITE_ADDR_GEN_DPA
endif

kill_ls_G_FEATURE_WRITE_ADDR_GEN_DPA:
	@bdw_kill -job ls.G_FEATURE_WRITE_ADDR_GEN_DPA
	@bdw_kill -job ls.G_FEATURE_WRITE_ADDR_GEN_DPA.s

clean_ls_G_FEATURE_WRITE_ADDR_GEN_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA

$(BDW_WORKLIB)/logicsynth/G_FEATURE_WRITE_ADDR_GEN_DPA/feature_write_addr_gen_gates.v: $(BDW_WORKLIB)/modules/feature_write_addr_gen/DPA/feature_write_addr_gen_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_feature_write_addr_gen_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=G_FEATURE_WRITE_ADDR_GEN_DPA BDW_MODULE=feature_write_addr_gen

view_ls_G_FEATURE_WRITE_ADDR_GEN_DPA: hls_feature_write_addr_gen_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig G_FEATURE_WRITE_ADDR_GEN_DPA

##############################################################################
#   start of rules for code analysis
##############################################################################

analysis1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
	@if [ ! -d $(BDW_ANALYSIS_CONFIG_DIR) ]; then mkdir -p $(BDW_ANALYSIS_CONFIG_DIR); fi
	@rm -rf $(BDW_ANALYSIS_CONFIG_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job analysis.$(BDW_ANALYSIS_CONFIG).s $(BDW_ANALYSIS_CMD) -project project.tcl -aconfig $(BDW_ANALYSIS_CONFIG) 2>&1 | tee $(BDW_ANALYSIS_CONFIG_DIR)/$(BDW_ANALYSIS_CONFIG).log

##############################################################################
#   start of rules for place and route
##############################################################################

pnr1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_PNR_CONFIG_DIR) ]; then mkdir -p $(BDW_PNR_CONFIG_DIR); fi
	@rm -rf $(BDW_PNR_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job pnr.$(BDW_PNR_CONFIG).s $(BDW_PNR_CMD) project.tcl $(BDW_PNR_CONFIG) 



#############################################################################
#  Rules for equivalence checking
#############################################################################
    

#############################################################################
#  Rules for Power estimation
#############################################################################
    


.INTERMEDIATE : $(BDW_LIBPREP) 

.PHONY : siminfo

siminfo :
	$(BDW_SIMCONFIG_MKDIR)
	@if [ ! -d $(BDW_WORKLIB)/INCA_libs ] ; then \
	    mkdir -p $(BDW_WORKLIB)/INCA_libs/bdw_worklib ; \
	fi	
	@echo "DEFINE bdw_worklib INCA_libs/bdw_worklib" > $(BDW_WORKLIB)/cds.lib
	@echo "DEFINE WORK bdw_worklib" > $(BDW_WORKLIB)/hdl.var
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl project.tcl $(BDW_SIM_CONFIG)


######################################################################
## Rules for building executables, shared libs, and running sims.
######################################################################

BDW_LIB_DASHI = \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_WHOLELIB_DIRS)))

BDW_SC_DEBUG_SRC = $(shell if [ -d $(SYSTEMC)/src ]; then echo "-d $(SYSTEMC)/src"; else echo ""; fi)
BDW_SIM_CONFIG_DIR	=	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
BDW_SIMCONFIG_MKDIR	=	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG) ]; then mkdir -p $(BDW_SIMDIR)/$(BDW_SIM_CONFIG); fi
BDW_SIM_ENV_SETUP	=	BDW_SIM_CONFIG_DIR=$(BDW_SIM_CONFIG_DIR)
BDW_END_OF_SIM_CMD	=	$(BDW_SIM_ENV_SETUP) make saySimPassed
BDW_STRT_OF_SIM_CMD	=	@echo
ifneq ($(BDW_HUB_ARGV),)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so
endif
BDW_VLOGSIM_ARGSINT += +hubSetOption+bdr=$(BDW_SIM_CONFIG_DIR)/sim.bdr
ifeq ($(RUN_DEBUGGER),1)
    BDW_VLOGSIM_ARGSINT  := $(strip $(BDW_VLOGSIM_ARGSINT)),gdbgui
	BDW_PREEXEC_DEBUG = gdb &
	BDW_INLINE_DEBUG = gdb --args
	export BDW_COWARE_RUN_DEBUG = 1
	BDW_COWARE_CMD = $(STRATUS_HOME)/bin/bdw_scsh --dofirst $(BDW_SIM_CONFIG_DIR)/coware.cmd
else
	BDW_COWARE_CMD = $(COWAREHOME)/common/bin/scsh $(BDW_SIM_CONFIG_DIR)/coware.cmd
endif
BDW_VLOGSIM_DEPS	=	$(COSIM_FILES) $(SIM_RTL_TARGETS) $(BDW_LIBPREP) $(BDW_ESC_LIB)

######################################################################
# Verilog RTL Code Coverage Simulation Setup
######################################################################

ifeq ($(BDW_MTI_POST_SIM_COMMANDS),)
BDW_MTI_POST_SIM_COMMANDS = 
endif

###############################################

.PHONY: run_sim

run_sim: 
	$(MAKE) $(EXECUTABLE)

scsim_$(BDW_SIM_CONFIG): $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	@echo "Executing simulation: $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV)"
	$(BDW_STRT_OF_SIM_CMD)
	@( $(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_INLINE_DEBUG) $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV) ; \
          simstatus=$$? ; export simstatus; \
          if [ $$simstatus -ne 0 ] ; then \
            if [ $$simstatus -gt 127 ] ; then \
                echo "ERROR: simulation exited with signal $$(($$simstatus - 128))" ; \
            else echo "WARNING: exit status = $$simstatus"; fi ; \
          fi ) 2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

#####################################################################
#####################################################################
update_hierarchy: prebuild_wrappers
	@$(STRATUS_HOME)/bin/bdw_makegen project.tcl -o Makefile.prj 


clean_sim_objs:
	@rm -rf $(SIM_OBJS) $(DEP_FILES) $(dir $(BDW_LIBREF))

build_sim_image: prebuild_wrappers prebuild_rtl
	@$(MAKE) -j 4 $(SIM_BUILD)

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_TMPLNK_FILE) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
		mv $(BDW_TMPLNK_FILE) $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
endif

##############################################################
## COSIM simulator rules
##############################################################

vcs: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

vcsi: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

incisive_covsetup:


xcelium incisive ncverilog: $(BDW_VLOGSIM_DEPS) incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+nowarn+LIBNOU $(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		$(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


export MTI_VCO_MODE = 64

mti: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	@echo removing log.passed in mti:
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work ]; then vlib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work; fi
	$(STRATUS_HOME)/bin/hub_vlog -work $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ];  then echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run -all" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ]; then  echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
endif
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_vsimvlog -c -lib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work top $(BDW_VLOG_TOP_MODS)\
		$(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) -do $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


BDW_NCSC_64BIT = -64bit

ifneq ($(BDW_HUB_ARGV),)
BDW_NCSIM_ARGV = +systemc_args+"$(BDW_HUB_ARGV)"
else
BDW_NCSIM_ARGV =
endif

ifeq ($(RUN_DEBUGGER), 1)
BDW_NCSIM_DEBUG = -layout cdebug
BDW_NCVLG_DEBUG = -layout cdebug -linedebug
else
BDW_NCSIM_DEBUG =
BDW_NCVLG_DEBUG =
endif

ncsc: incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
ifneq ($(RUN_DEBUGGER),1)
	@echo "run" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
	@echo "exit" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
endif
ifneq ($(VLOG_COSIM_TOP), )
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) $(BDW_NCVLG_DEBUG) \
	$(BDW_NCSC_GCCVER) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	+loadpli1=$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME)/ncvlog_ssl:ssl_bootstrap \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_VLOGSIM_ARGS) \
	$(BDW_VLOGSIM_ARGSINT) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_NCSC_INPUT_FILE) \
	-top sc_main $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

else
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) \
	$(BDW_NCSC_GCCVER) \
	$(BDW_VLOGSIM_ARGS) $(BDW_NCSIM_DEBUG) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	$(BDW_NCSC_INPUT_FILE) \
	-top sc_main $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log



##############################################################
## Rule to build the COSIM shared library
##############################################################
ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so: $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_TMPLNK_FILE)  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}
		mv $(BDW_TMPLNK_FILE) $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so

else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so: $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}

endif


##############################################################
## Rule to build verilator trace and coverage support  module
##############################################################

$(BDW_WORKLIB)/objs/esc_catrace.o: $(STRATUS_HOME)/share/stratus/source/esc_catrace.cc
	$(BDW_CC)  -o $@ $(BDW_CCFLAGS) $(BDW_VERILATOR_CCFLAGS)  $<



##############################################################
## Start the stratus_ide GUI
##############################################################
workbench ide:
	$(STRATUS_HOME)/bin/stratus_ide project.tcl

##############################################################
## Generate a Visual C++ project file
##############################################################
vcproj: $(BDW_ALL_WRAPPERS)
	$(STRATUS_HOME)/bin/bdw_vcprojgen project.tcl

##############################################################
## Rule to build the synthesis report
##############################################################

html_warn:
	@echo "##############################################" ; \
	echo " The HTML reports have been deprecated. " ; \
	echo " Reporting information is available in stratus_ide." ; \
	echo "" ; \
	echo -n " Do you want to generate deprecated HTML reports (y or n) [n] ? " ; \
	read resp ; \
	case $$resp in \
	y*) $(MAKE) html ;; \
	*) echo ""; echo "HTML Reports not generated." ;  \
	esac
 
html:   html_st_feature_addr_gen_BASIC html_st_feature_addr_gen_DPA html_st_weight_addr_gen_BASIC html_st_weight_addr_gen_DPA html_pw_feature_addr_gen_BASIC html_pw_feature_addr_gen_DPA html_pw_weight_addr_gen_BASIC html_pw_weight_addr_gen_DPA html_bias_addr_gen_BASIC html_bias_addr_gen_DPA html_bn_addr_gen_BASIC html_bn_addr_gen_DPA html_org_bn_addr_gen_BASIC html_org_bn_addr_gen_DPA html_feature_write_addr_gen_BASIC html_feature_write_addr_gen_DPA html_summary

html_summary: project.tcl
	$(STRATUS_HOME)/bin/bdw_htmlgen -project project.tcl -summary




##############################################################
## Rules to build generated library contents
##############################################################

