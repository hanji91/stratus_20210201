// Generated by stratus_hls 19.10-p100  (91500.011111)
// Sun Jan 24 17:03:14 2021
// from pw_weight_addr_gen.cpp
#include "pw_weight_addr_gen_rtl.h"

struct pw_weight_addr_gen;
pw_weight_addr_gen::pw_weight_addr_gen(sc_module_name name) : sc_module(name) 
    ,clk("clk")
    ,rstn("rstn")
    ,stop("stop")
    ,start("start")
    ,start_rising("start_rising")
    ,systolic_en("systolic_en")
    ,systolic_depth("systolic_depth")
    ,feature_width("feature_width")
    ,feature_height("feature_height")
    ,feature_channel("feature_channel")
    ,out_feature_width("out_feature_width")
    ,out_feature_height("out_feature_height")
    ,out_feature_channel("out_feature_channel")
    ,filter_width("filter_width")
    ,filter_height("filter_height")
    ,filter_channel("filter_channel")
    ,stride_x("stride_x")
    ,stride_y("stride_y")
    ,pad_top_size("pad_top_size")
    ,pad_bottom_size("pad_bottom_size")
    ,pad_left_size("pad_left_size")
    ,pad_right_size("pad_right_size")
    ,read_weight_base_addr("read_weight_base_addr")
    ,pw_weight_addr("pw_weight_addr")
    ,pw_weight_addr_valid("pw_weight_addr_valid")
    ,pw_weight_data_valid("pw_weight_data_valid")
    ,cache_en("cache_en")
    ,pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1("pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_4_31_out1("pw_weight_addr_gen_And_1Ux1U_1U_4_31_out1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_4_30_out1("pw_weight_addr_gen_And_1Ux1U_1U_4_30_out1")
    ,pw_weight_addr_gen_Eqi1u16_4_29_out1("pw_weight_addr_gen_Eqi1u16_4_29_out1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_4_28_out1("pw_weight_addr_gen_And_1Ux1U_1U_4_28_out1")
    ,pw_weight_addr_gen_Not_1U_1U_4_27_out1("pw_weight_addr_gen_Not_1U_1U_4_27_out1")
    ,pw_weight_addr_gen_AndReduction_4S_1U_1_25_out1("pw_weight_addr_gen_AndReduction_4S_1U_1_25_out1")
    ,pw_weight_addr_gen_Eqi1u16_4_26_out1("pw_weight_addr_gen_Eqi1u16_4_26_out1")
    ,pw_weight_addr_gen_Or_1Ux1U_1U_4_32_out1("pw_weight_addr_gen_Or_1Ux1U_1U_4_32_out1")
    ,enable("enable")
    ,pw_weight_addr_gen_Not_1U_1U_4_6_out1("pw_weight_addr_gen_Not_1U_1U_4_6_out1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_4_7_out1("pw_weight_addr_gen_And_1Ux1U_1U_4_7_out1")
    ,pw_weight_addr_gen_EqSubi1u16u16_1_8_out1("pw_weight_addr_gen_EqSubi1u16u16_1_8_out1")
    ,pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10_out1("pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10_out1")
    ,pw_weight_addr_gen_Muxi0u16u1_4_11_out1("pw_weight_addr_gen_Muxi0u16u1_4_11_out1")
    ,pw_weight_addr_gen_EqSubu8u16u16_1_12_out1("pw_weight_addr_gen_EqSubu8u16u16_1_12_out1")
    ,pw_weight_addr_gen_N_Mux_16_2_22_4_15_out1("pw_weight_addr_gen_N_Mux_16_2_22_4_15_out1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1("pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1")
    ,pw_weight_addr_gen_Add_16Ux8U_16U_4_14_out1("pw_weight_addr_gen_Add_16Ux8U_16U_4_14_out1")
    ,pw_weight_addr_gen_Muxi0u16u1_4_16_out1("pw_weight_addr_gen_Muxi0u16u1_4_16_out1")
    ,ox_cnt("ox_cnt")
    ,pw_weight_addr_gen_EqSubi1u16u16_1_17_out1("pw_weight_addr_gen_EqSubi1u16u16_1_17_out1")
    ,pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19_out1("pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19_out1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1("pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1")
    ,pw_weight_addr_gen_Muxi0u16u1_4_20_out1("pw_weight_addr_gen_Muxi0u16u1_4_20_out1")
    ,oy_cnt("oy_cnt")
    ,pw_weight_addr_gen_EqSubi1u16u16_1_21_out1("pw_weight_addr_gen_EqSubi1u16u16_1_21_out1")
    ,pw_weight_addr_gen_EqSubi1u16u16_1_21_in1("pw_weight_addr_gen_EqSubi1u16u16_1_21_in1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1("pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1")
    ,pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1("pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1")
    ,pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1("pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1")
    ,pw_weight_addr_gen_Muxi0u16u1_4_24_out1("pw_weight_addr_gen_Muxi0u16u1_4_24_out1")
    ,if_cnt("if_cnt")
    ,of_cnt("of_cnt")
    ,if_pos("if_pos")
    ,of_pos("of_pos")
    ,pw_weight_addr_gen_Add_32Ux16U_32U_4_5_out1("pw_weight_addr_gen_Add_32Ux16U_32U_4_5_out1")
    ,pw_weight_addr_gen_Mul_16Ux16U_32U_1_4_out1("pw_weight_addr_gen_Mul_16Ux16U_32U_1_4_out1")
    ,org_of_pos("org_of_pos")
    ,org_if_pos("org_if_pos")
    ,pw_weight_addr_gen_Add_32Ux32U_32U_4_3_out1("pw_weight_addr_gen_Add_32Ux32U_32U_4_3_out1")
    ,tmp_pw_weight_addr("tmp_pw_weight_addr")
    ,pw_weight_addr_valid_4d("pw_weight_addr_valid_4d")
    ,pw_weight_addr_valid_3d("pw_weight_addr_valid_3d")
    ,pw_weight_addr_valid_2d("pw_weight_addr_valid_2d")
    ,pw_weight_addr_valid_1d("pw_weight_addr_valid_1d")
    ,run_8d("run_8d")
    ,run_7d("run_7d")
    ,run_6d("run_6d")
    ,run_5d("run_5d")
    ,run_4d("run_4d")
    ,run("run")
    ,run_1d("run_1d")
    ,run_2d("run_2d")
    ,run_9d("run_9d")
    ,pw_weight_addr_valid_5d("pw_weight_addr_valid_5d")
    ,run_3d("run_3d")
    ,run_10d("run_10d")
    ,pw_weight_addr_valid_6d("pw_weight_addr_valid_6d")
    ,of_cnt_max("of_cnt_max")
    ,if_cnt_max("if_cnt_max")
    ,pw_weight_addr_gen_Add3u8u8Subu16u16_4_1_out1("pw_weight_addr_gen_Add3u8u8Subu16u16_4_1_out1")
    ,oy_cnt_max("oy_cnt_max")
    ,pw_weight_addr_gen_Add3u8u8Subu16u16_4_2_out1("pw_weight_addr_gen_Add3u8u8Subu16u16_4_2_out1")
    ,ox_cnt_max("ox_cnt_max")
{
  SC_METHOD(drive_ox_cnt_max);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_oy_cnt_max);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_if_cnt_max);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_of_cnt_max);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_Add3u8u8Subu16u16_4_1);
  sensitive << ( pad_bottom_size );
  sensitive << ( pad_top_size );
  sensitive << ( filter_height );
  sensitive << ( feature_height );

  SC_METHOD(pw_weight_addr_gen_Add3u8u8Subu16u16_4_2);
  sensitive << ( pad_right_size );
  sensitive << ( pad_left_size );
  sensitive << ( filter_width );
  sensitive << ( feature_width );

  SC_METHOD(drive_pw_weight_data_valid);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_cache_en);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid_6d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_10d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_3d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_1d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_2d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_4d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_5d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_6d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_7d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_8d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_run_9d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid_1d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid_2d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid_3d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid_4d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr_valid_5d);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_pw_weight_addr);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_tmp_pw_weight_addr);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_Add_32Ux32U_32U_4_3);
  sensitive << ( org_of_pos );
  sensitive << ( org_if_pos );

  SC_METHOD(drive_org_of_pos);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_org_if_pos);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_Mul_16Ux16U_32U_1_4);
  sensitive << ( if_cnt_max );
  sensitive << ( of_pos );

  SC_METHOD(pw_weight_addr_gen_Add_32Ux16U_32U_4_5);
  sensitive << ( if_pos );
  sensitive << ( read_weight_base_addr );

  SC_METHOD(drive_of_pos);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_if_pos);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(drive_of_cnt);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1 );
  sensitive << ( of_cnt );

  SC_METHOD(pw_weight_addr_gen_Muxi0u16u1_4_24);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1 );
  sensitive << ( pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1 );

  SC_METHOD(drive_pw_weight_addr_gen_EqSubi1u16u16_1_21_in1);
  sensitive << ( of_cnt_max );

  SC_METHOD(pw_weight_addr_gen_EqSubi1u16u16_1_21);
  sensitive << ( pw_weight_addr_gen_EqSubi1u16u16_1_21_in1 );
  sensitive << ( of_cnt );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_1_22);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1 );
  sensitive << ( pw_weight_addr_gen_EqSubi1u16u16_1_21_out1 );

  SC_METHOD(drive_oy_cnt);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 );
  sensitive << ( oy_cnt );

  SC_METHOD(pw_weight_addr_gen_Muxi0u16u1_4_20);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1 );
  sensitive << ( pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19_out1 );

  SC_METHOD(pw_weight_addr_gen_EqSubi1u16u16_1_17);
  sensitive << ( oy_cnt_max );
  sensitive << ( oy_cnt );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_1_18);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 );
  sensitive << ( pw_weight_addr_gen_EqSubi1u16u16_1_17_out1 );

  SC_METHOD(drive_ox_cnt);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_Add_16Ux8U_16U_4_14);
  sensitive << ( systolic_depth );
  sensitive << ( ox_cnt );

  SC_METHOD(pw_weight_addr_gen_N_Mux_16_2_22_4_15);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1 );
  sensitive << ( pw_weight_addr_gen_Add_16Ux8U_16U_4_14_out1 );
  sensitive << ( ox_cnt );

  SC_METHOD(pw_weight_addr_gen_Muxi0u16u1_4_16);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 );
  sensitive << ( pw_weight_addr_gen_N_Mux_16_2_22_4_15_out1 );

  SC_METHOD(pw_weight_addr_gen_EqSubu8u16u16_1_12);
  sensitive << ( systolic_depth );
  sensitive << ( ox_cnt_max );
  sensitive << ( ox_cnt );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_1_13);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1 );
  sensitive << ( pw_weight_addr_gen_EqSubu8u16u16_1_12_out1 );

  SC_METHOD(drive_if_cnt);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10);
  sensitive << ( run );
  sensitive << ( if_cnt );

  SC_METHOD(pw_weight_addr_gen_Muxi0u16u1_4_11);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1 );
  sensitive << ( pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10_out1 );

  SC_METHOD(pw_weight_addr_gen_EqSubi1u16u16_1_8);
  sensitive << ( if_cnt_max );
  sensitive << ( if_cnt );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_1_9);
  sensitive << ( run );
  sensitive << ( pw_weight_addr_gen_EqSubi1u16u16_1_8_out1 );

  SC_METHOD(drive_run);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_Not_1U_1U_4_6);
  sensitive << ( stop );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_4_7);
  sensitive << ( enable );
  sensitive << ( pw_weight_addr_gen_Not_1U_1U_4_6_out1 );

  SC_METHOD(drive_enable);
  sensitive << clk.pos();
  sensitive << rstn.neg();
  dont_initialize();

  SC_METHOD(pw_weight_addr_gen_Eqi1u16_4_26);
  sensitive << ( filter_height );

  SC_METHOD(pw_weight_addr_gen_Not_1U_1U_4_27);
  sensitive << ( pw_weight_addr_gen_AndReduction_4S_1U_1_25_out1 );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_4_28);
  sensitive << ( start_rising );
  sensitive << ( pw_weight_addr_gen_Eqi1u16_4_26_out1 );

  SC_METHOD(pw_weight_addr_gen_Eqi1u16_4_29);
  sensitive << ( filter_width );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_4_30);
  sensitive << ( enable );
  sensitive << ( pw_weight_addr_gen_Not_1U_1U_4_27_out1 );

  SC_METHOD(pw_weight_addr_gen_And_1Ux1U_1U_4_31);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_4_28_out1 );
  sensitive << ( pw_weight_addr_gen_Eqi1u16_4_29_out1 );

  SC_METHOD(pw_weight_addr_gen_Or_1Ux1U_1U_4_32);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_4_30_out1 );
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_4_31_out1 );

  SC_METHOD(drive_pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1);
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1 );
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1 );
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 );
  sensitive << ( pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1 );

  SC_METHOD(pw_weight_addr_gen_AndReduction_4S_1U_1_25);
  sensitive << ( pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1 );

}
// resource: regr_16
void pw_weight_addr_gen::drive_ox_cnt_max(){
  ox_cnt_max = (sc_uint<16> ) (pw_weight_addr_gen_Add3u8u8Subu16u16_4_2_out1
               .read());
}
// resource: regr_16
void pw_weight_addr_gen::drive_oy_cnt_max(){
  oy_cnt_max = (sc_uint<16> ) (pw_weight_addr_gen_Add3u8u8Subu16u16_4_1_out1
               .read());
}
// resource: regr_16
void pw_weight_addr_gen::drive_if_cnt_max(){
  if_cnt_max = filter_channel.read();
}
// resource: regr_16
void pw_weight_addr_gen::drive_of_cnt_max(){
  of_cnt_max = out_feature_channel.read();
}
// resource: pw_weight_addr_gen_Add3u8u8Subu16u16_4  instance: pw_weight_addr_gen_Add3u8u8Subu16u16_4_1
void pw_weight_addr_gen::pw_weight_addr_gen_Add3u8u8Subu16u16_4_1(){
  pw_weight_addr_gen_Add3u8u8Subu16u16_4_1_out1 = (( feature_height.read() - 
                                                  filter_height.read() ) + ( (
                                                  pad_top_size.read() + 
                                                  pad_bottom_size.read()) ));
}
// resource: pw_weight_addr_gen_Add3u8u8Subu16u16_4  instance: pw_weight_addr_gen_Add3u8u8Subu16u16_4_2
void pw_weight_addr_gen::pw_weight_addr_gen_Add3u8u8Subu16u16_4_2(){
  pw_weight_addr_gen_Add3u8u8Subu16u16_4_2_out1 = (( feature_width.read() - 
                                                  filter_width.read() ) + ( (
                                                  pad_left_size.read() + 
                                                  pad_right_size.read()) ));
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_data_valid(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_data_valid = 0ULL;
  } else {
    pw_weight_data_valid = pw_weight_addr_valid_6d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_cache_en(){
  if ( (rstn.read() == 0ULL) ) {
    cache_en = 0ULL;
  } else {
    cache_en = (sc_uint<1> ) (run_10d.read());
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid = 0ULL;
  } else {
    pw_weight_addr_valid = (sc_uint<1> ) (run_3d.read());
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid_6d(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid_6d = 0ULL;
  } else {
    pw_weight_addr_valid_6d = pw_weight_addr_valid_5d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_10d(){
  if ( (rstn.read() == 0ULL) ) {
    run_10d = 0ULL;
  } else {
    run_10d = run_9d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_3d(){
  if ( (rstn.read() == 0ULL) ) {
    run_3d = 0ULL;
  } else {
    run_3d = run_2d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_1d(){
  if ( (rstn.read() == 0ULL) ) {
    run_1d = 0ULL;
  } else {
    run_1d = run.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_2d(){
  if ( (rstn.read() == 0ULL) ) {
    run_2d = 0ULL;
  } else {
    run_2d = run_1d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_4d(){
  if ( (rstn.read() == 0ULL) ) {
    run_4d = 0ULL;
  } else {
    run_4d = run_3d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_5d(){
  if ( (rstn.read() == 0ULL) ) {
    run_5d = 0ULL;
  } else {
    run_5d = run_4d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_6d(){
  if ( (rstn.read() == 0ULL) ) {
    run_6d = 0ULL;
  } else {
    run_6d = run_5d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_7d(){
  if ( (rstn.read() == 0ULL) ) {
    run_7d = 0ULL;
  } else {
    run_7d = run_6d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_8d(){
  if ( (rstn.read() == 0ULL) ) {
    run_8d = 0ULL;
  } else {
    run_8d = run_7d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run_9d(){
  if ( (rstn.read() == 0ULL) ) {
    run_9d = 0ULL;
  } else {
    run_9d = run_8d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid_1d(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid_1d = 0ULL;
  } else {
    pw_weight_addr_valid_1d = pw_weight_addr_valid.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid_2d(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid_2d = 0ULL;
  } else {
    pw_weight_addr_valid_2d = pw_weight_addr_valid_1d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid_3d(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid_3d = 0ULL;
  } else {
    pw_weight_addr_valid_3d = pw_weight_addr_valid_2d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid_4d(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid_4d = 0ULL;
  } else {
    pw_weight_addr_valid_4d = pw_weight_addr_valid_3d.read();
  }
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_pw_weight_addr_valid_5d(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr_valid_5d = 0ULL;
  } else {
    pw_weight_addr_valid_5d = pw_weight_addr_valid_4d.read();
  }
}
// resource: regr_ac_32
void pw_weight_addr_gen::drive_pw_weight_addr(){
  if ( (rstn.read() == 0ULL) ) {
    pw_weight_addr = 0ULL;
  } else {
    pw_weight_addr = tmp_pw_weight_addr.read();
  }
}
// resource: regr_ac_32
void pw_weight_addr_gen::drive_tmp_pw_weight_addr(){
  if ( (rstn.read() == 0ULL) ) {
    tmp_pw_weight_addr = 0ULL;
  } else {
    tmp_pw_weight_addr = pw_weight_addr_gen_Add_32Ux32U_32U_4_3_out1.read();
  }
}
// resource: pw_weight_addr_gen_Add_32Ux32U_32U_4  instance: pw_weight_addr_gen_Add_32Ux32U_32U_4_3
void pw_weight_addr_gen::pw_weight_addr_gen_Add_32Ux32U_32U_4_3(){
  pw_weight_addr_gen_Add_32Ux32U_32U_4_3_out1 = (org_if_pos.read() + org_of_pos
                                                .read());
}
// resource: regr_ac_32
void pw_weight_addr_gen::drive_org_of_pos(){
  if ( (rstn.read() == 0ULL) ) {
    org_of_pos = 0ULL;
  } else {
    org_of_pos = pw_weight_addr_gen_Mul_16Ux16U_32U_1_4_out1.read();
  }
}
// resource: regr_ac_32
void pw_weight_addr_gen::drive_org_if_pos(){
  if ( (rstn.read() == 0ULL) ) {
    org_if_pos = 0ULL;
  } else {
    org_if_pos = pw_weight_addr_gen_Add_32Ux16U_32U_4_5_out1.read();
  }
}
// resource: pw_weight_addr_gen_Mul_16Ux16U_32U_1  instance: pw_weight_addr_gen_Mul_16Ux16U_32U_1_4
void pw_weight_addr_gen::pw_weight_addr_gen_Mul_16Ux16U_32U_1_4(){
  pw_weight_addr_gen_Mul_16Ux16U_32U_1_4_out1 = of_pos.read() * if_cnt_max
                                                .read();
}
// resource: pw_weight_addr_gen_Add_32Ux16U_32U_4  instance: pw_weight_addr_gen_Add_32Ux16U_32U_4_5
void pw_weight_addr_gen::pw_weight_addr_gen_Add_32Ux16U_32U_4_5(){
  pw_weight_addr_gen_Add_32Ux16U_32U_4_5_out1 = (read_weight_base_addr.read() + 
                                                if_pos.read());
}
// resource: regr_ac_16
void pw_weight_addr_gen::drive_of_pos(){
  if ( (rstn.read() == 0ULL) ) {
    of_pos = 0ULL;
  } else {
    of_pos = of_cnt.read();
  }
}
// resource: regr_ac_16
void pw_weight_addr_gen::drive_if_pos(){
  if ( (rstn.read() == 0ULL) ) {
    if_pos = 0ULL;
  } else {
    if_pos = if_cnt.read();
  }
}
// resource: regr_ac_16
void pw_weight_addr_gen::drive_of_cnt(){
  if ( (rstn.read() == 0ULL) ) {
    of_cnt = 0ULL;
  } else {
    of_cnt = pw_weight_addr_gen_Muxi0u16u1_4_24_out1.read();
  }
}
// resource: pw_weight_addr_gen_MuxAdd2i1u16u16u1_1
void pw_weight_addr_gen::pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1.read() ) {
    pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1 = (of_cnt.read() + 1ULL);
  } else {
    pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1 = of_cnt.read();
  }
}
// resource: pw_weight_addr_gen_Muxi0u16u1_4
void pw_weight_addr_gen::pw_weight_addr_gen_Muxi0u16u1_4_24(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1.read() ) {
    pw_weight_addr_gen_Muxi0u16u1_4_24_out1 = 0ULL;
  } else {
    pw_weight_addr_gen_Muxi0u16u1_4_24_out1 = pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1
                                              .read();
  }
}
void pw_weight_addr_gen::drive_pw_weight_addr_gen_EqSubi1u16u16_1_21_in1(){
  pw_weight_addr_gen_EqSubi1u16u16_1_21_in1 = (sc_uint<16> ) (of_cnt_max.read()
                                              .range(15,5));
}
// resource: pw_weight_addr_gen_EqSubi1u16u16_1  instance: pw_weight_addr_gen_EqSubi1u16u16_1_21
void pw_weight_addr_gen::pw_weight_addr_gen_EqSubi1u16u16_1_21(){
  pw_weight_addr_gen_EqSubi1u16u16_1_21_out1 = ((sc_int<17> )of_cnt.read() == pw_weight_addr_gen_EqSubi1u16u16_1_21_in1
                                               .read() - 1ULL);
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_1  instance: pw_weight_addr_gen_And_1Ux1U_1U_1_22
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_1_22(){
  pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1 = pw_weight_addr_gen_EqSubi1u16u16_1_21_out1
                                              .read() & pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1
                                              .read();
}
// resource: regr_ac_16
void pw_weight_addr_gen::drive_oy_cnt(){
  if ( (rstn.read() == 0ULL) ) {
    oy_cnt = 0ULL;
  } else {
    oy_cnt = pw_weight_addr_gen_Muxi0u16u1_4_20_out1.read();
  }
}
// resource: pw_weight_addr_gen_MuxAdd2i1u16u16u1_1
void pw_weight_addr_gen::pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1.read() ) {
    pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19_out1 = (oy_cnt.read() + 1ULL);
  } else {
    pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19_out1 = oy_cnt.read();
  }
}
// resource: pw_weight_addr_gen_Muxi0u16u1_4
void pw_weight_addr_gen::pw_weight_addr_gen_Muxi0u16u1_4_20(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1.read() ) {
    pw_weight_addr_gen_Muxi0u16u1_4_20_out1 = 0ULL;
  } else {
    pw_weight_addr_gen_Muxi0u16u1_4_20_out1 = pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_19_out1
                                              .read();
  }
}
// resource: pw_weight_addr_gen_EqSubi1u16u16_1  instance: pw_weight_addr_gen_EqSubi1u16u16_1_17
void pw_weight_addr_gen::pw_weight_addr_gen_EqSubi1u16u16_1_17(){
  pw_weight_addr_gen_EqSubi1u16u16_1_17_out1 = ((sc_int<17> )oy_cnt.read() == 
                                               oy_cnt_max.read() - 1ULL);
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_1  instance: pw_weight_addr_gen_And_1Ux1U_1U_1_18
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_1_18(){
  pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1 = pw_weight_addr_gen_EqSubi1u16u16_1_17_out1
                                              .read() & pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1
                                              .read();
}
// resource: regr_ac_16
void pw_weight_addr_gen::drive_ox_cnt(){
  if ( (rstn.read() == 0ULL) ) {
    ox_cnt = 0ULL;
  } else {
    ox_cnt = pw_weight_addr_gen_Muxi0u16u1_4_16_out1.read();
  }
}
// resource: pw_weight_addr_gen_Add_16Ux8U_16U_4  instance: pw_weight_addr_gen_Add_16Ux8U_16U_4_14
void pw_weight_addr_gen::pw_weight_addr_gen_Add_16Ux8U_16U_4_14(){
  pw_weight_addr_gen_Add_16Ux8U_16U_4_14_out1 = (ox_cnt.read() + systolic_depth
                                                .read());
}
// resource: pw_weight_addr_gen_N_Mux_16_2_22_4
void pw_weight_addr_gen::pw_weight_addr_gen_N_Mux_16_2_22_4_15(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1.read() ) {
    pw_weight_addr_gen_N_Mux_16_2_22_4_15_out1 = pw_weight_addr_gen_Add_16Ux8U_16U_4_14_out1
                                                 .read();
  } else {
    pw_weight_addr_gen_N_Mux_16_2_22_4_15_out1 = ox_cnt.read();
  }
}
// resource: pw_weight_addr_gen_Muxi0u16u1_4
void pw_weight_addr_gen::pw_weight_addr_gen_Muxi0u16u1_4_16(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1.read() ) {
    pw_weight_addr_gen_Muxi0u16u1_4_16_out1 = 0ULL;
  } else {
    pw_weight_addr_gen_Muxi0u16u1_4_16_out1 = pw_weight_addr_gen_N_Mux_16_2_22_4_15_out1
                                              .read();
  }
}
// resource: pw_weight_addr_gen_EqSubu8u16u16_1  instance: pw_weight_addr_gen_EqSubu8u16u16_1_12
void pw_weight_addr_gen::pw_weight_addr_gen_EqSubu8u16u16_1_12(){
  pw_weight_addr_gen_EqSubu8u16u16_1_12_out1 = ((sc_int<17> )ox_cnt.read() == 
                                               ox_cnt_max.read() - 
                                               systolic_depth.read());
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_1  instance: pw_weight_addr_gen_And_1Ux1U_1U_1_13
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_1_13(){
  pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 = pw_weight_addr_gen_EqSubu8u16u16_1_12_out1
                                              .read() & pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1
                                              .read();
}
// resource: regr_ac_16
void pw_weight_addr_gen::drive_if_cnt(){
  if ( (rstn.read() == 0ULL) ) {
    if_cnt = 0ULL;
  } else {
    if_cnt = pw_weight_addr_gen_Muxi0u16u1_4_11_out1.read();
  }
}
// resource: pw_weight_addr_gen_MuxAdd2i1u16u16u1_4
void pw_weight_addr_gen::pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10(){
  if ( run.read() ) {
    pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10_out1 = (if_cnt.read() + 1ULL);
  } else {
    pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10_out1 = if_cnt.read();
  }
}
// resource: pw_weight_addr_gen_Muxi0u16u1_4
void pw_weight_addr_gen::pw_weight_addr_gen_Muxi0u16u1_4_11(){
  if ( pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1.read() ) {
    pw_weight_addr_gen_Muxi0u16u1_4_11_out1 = 0ULL;
  } else {
    pw_weight_addr_gen_Muxi0u16u1_4_11_out1 = pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_10_out1
                                              .read();
  }
}
// resource: pw_weight_addr_gen_EqSubi1u16u16_1  instance: pw_weight_addr_gen_EqSubi1u16u16_1_8
void pw_weight_addr_gen::pw_weight_addr_gen_EqSubi1u16u16_1_8(){
  pw_weight_addr_gen_EqSubi1u16u16_1_8_out1 = ((sc_int<17> )if_cnt.read() == 
                                              if_cnt_max.read() - 1ULL);
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_1  instance: pw_weight_addr_gen_And_1Ux1U_1U_1_9
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_1_9(){
  pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1 = pw_weight_addr_gen_EqSubi1u16u16_1_8_out1
                                             .read() & run.read();
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_run(){
  if ( (rstn.read() == 0ULL) ) {
    run = 0ULL;
  } else {
    run = pw_weight_addr_gen_And_1Ux1U_1U_4_7_out1.read();
  }
}
// resource: pw_weight_addr_gen_Not_1U_1U_4  instance: pw_weight_addr_gen_Not_1U_1U_4_6
void pw_weight_addr_gen::pw_weight_addr_gen_Not_1U_1U_4_6(){
  pw_weight_addr_gen_Not_1U_1U_4_6_out1 = !stop.read();
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_4  instance: pw_weight_addr_gen_And_1Ux1U_1U_4_7
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_4_7(){
  pw_weight_addr_gen_And_1Ux1U_1U_4_7_out1 = (sc_uint<1> )pw_weight_addr_gen_Not_1U_1U_4_6_out1
                                             .read() & enable.read();
}
// resource: regr_ac_1
void pw_weight_addr_gen::drive_enable(){
  if ( (rstn.read() == 0ULL) ) {
    enable = 0ULL;
  } else {
    enable = pw_weight_addr_gen_Or_1Ux1U_1U_4_32_out1.read();
  }
}
// resource: pw_weight_addr_gen_Eqi1u16_4  instance: pw_weight_addr_gen_Eqi1u16_4_26
void pw_weight_addr_gen::pw_weight_addr_gen_Eqi1u16_4_26(){
  pw_weight_addr_gen_Eqi1u16_4_26_out1 = (filter_height.read() == 1ULL);
}
// resource: pw_weight_addr_gen_Not_1U_1U_4  instance: pw_weight_addr_gen_Not_1U_1U_4_27
void pw_weight_addr_gen::pw_weight_addr_gen_Not_1U_1U_4_27(){
  pw_weight_addr_gen_Not_1U_1U_4_27_out1 = !pw_weight_addr_gen_AndReduction_4S_1U_1_25_out1
                                           .read();
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_4  instance: pw_weight_addr_gen_And_1Ux1U_1U_4_28
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_4_28(){
  pw_weight_addr_gen_And_1Ux1U_1U_4_28_out1 = (sc_uint<1> )pw_weight_addr_gen_Eqi1u16_4_26_out1
                                              .read() & start_rising.read();
}
// resource: pw_weight_addr_gen_Eqi1u16_4  instance: pw_weight_addr_gen_Eqi1u16_4_29
void pw_weight_addr_gen::pw_weight_addr_gen_Eqi1u16_4_29(){
  pw_weight_addr_gen_Eqi1u16_4_29_out1 = (filter_width.read() == 1ULL);
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_4  instance: pw_weight_addr_gen_And_1Ux1U_1U_4_30
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_4_30(){
  pw_weight_addr_gen_And_1Ux1U_1U_4_30_out1 = (sc_uint<1> )pw_weight_addr_gen_Not_1U_1U_4_27_out1
                                              .read() & enable.read();
}
// resource: pw_weight_addr_gen_And_1Ux1U_1U_4  instance: pw_weight_addr_gen_And_1Ux1U_1U_4_31
void pw_weight_addr_gen::pw_weight_addr_gen_And_1Ux1U_1U_4_31(){
  pw_weight_addr_gen_And_1Ux1U_1U_4_31_out1 = (sc_uint<1> )pw_weight_addr_gen_Eqi1u16_4_29_out1
                                              .read() & pw_weight_addr_gen_And_1Ux1U_1U_4_28_out1
                                              .read();
}
// resource: pw_weight_addr_gen_Or_1Ux1U_1U_4  instance: pw_weight_addr_gen_Or_1Ux1U_1U_4_32
void pw_weight_addr_gen::pw_weight_addr_gen_Or_1Ux1U_1U_4_32(){
  pw_weight_addr_gen_Or_1Ux1U_1U_4_32_out1 = pw_weight_addr_gen_And_1Ux1U_1U_4_31_out1
                                             .read() | pw_weight_addr_gen_And_1Ux1U_1U_4_30_out1
                                             .read();
}
void pw_weight_addr_gen::drive_pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1(){
  pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1 = (sc_int<4> ) (( (sc_uint<4> )
                                                   (sc_bv<4>)((sc_bv<2>)(
                                                   (sc_bv<1>)(pw_weight_addr_gen_And_1Ux1U_1U_1_9_out1
                                                   .read()), 
                                                   (sc_bv<1>)(pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1
                                                   .read())), 
                                                   (sc_bv<2>)((sc_bv<1>)(pw_weight_addr_gen_And_1Ux1U_1U_1_18_out1
                                                   .read()), 
                                                   (sc_bv<1>)(pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1
                                                   .read()))) ));
}
// resource: pw_weight_addr_gen_AndReduction_4S_1U_1  instance: pw_weight_addr_gen_AndReduction_4S_1U_1_25
void pw_weight_addr_gen::pw_weight_addr_gen_AndReduction_4S_1U_1_25(){
  pw_weight_addr_gen_AndReduction_4S_1U_1_25_out1 = ((sc_uint<4>)pw_weight_addr_gen_AndReduction_4S_1U_1_25_in1
                                                    .read()).and_reduce();
}
