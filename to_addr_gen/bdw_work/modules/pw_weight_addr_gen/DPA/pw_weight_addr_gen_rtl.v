// Generated by stratus_hls 19.10-p100  (91500.011111)
// Mon Jan 25 11:55:49 2021
// from pw_weight_addr_gen.cpp

`timescale 1ps / 1ps

      
module pw_weight_addr_gen(clk, rstn, stop, start, start_rising, systolic_en, systolic_depth, feature_width, feature_height, feature_channel, out_feature_width, out_feature_height, out_feature_channel, filter_width, filter_height, filter_channel, stride_x, stride_y, pad_top_size, pad_bottom_size, pad_left_size, pad_right_size, read_weight_base_addr, pw_weight_addr, pw_weight_addr_valid, pw_weight_data_valid, cache_en);

      input clk;
      input rstn;
      input stop;
      input [7:0] start;
      input start_rising;
      input [7:0] systolic_en;
      input [7:0] systolic_depth;
      input [15:0] feature_width;
      input [15:0] feature_height;
      input [15:0] feature_channel;
      input [15:0] out_feature_width;
      input [15:0] out_feature_height;
      input [15:0] out_feature_channel;
      input [15:0] filter_width;
      input [15:0] filter_height;
      input [15:0] filter_channel;
      input [7:0] stride_x;
      input [7:0] stride_y;
      input [7:0] pad_top_size;
      input [7:0] pad_bottom_size;
      input [7:0] pad_left_size;
      input [7:0] pad_right_size;
      input [31:0] read_weight_base_addr;
      output [31:0] pw_weight_addr;
      reg [31:0] pw_weight_addr;
      output pw_weight_addr_valid;
      reg pw_weight_addr_valid;
      output pw_weight_data_valid;
      reg pw_weight_data_valid;
      output cache_en;
      reg cache_en;
      /*signed*/wire[3:0] pw_weight_addr_gen_AndReduction_4S_1U_1_29_in1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_4_35_out1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_4_34_out1;
      wire pw_weight_addr_gen_Eqi1u16_4_33_out1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_4_32_out1;
      wire pw_weight_addr_gen_AndReduction_4S_1U_1_29_out1;
      wire pw_weight_addr_gen_Not_1U_1U_4_31_out1;
      wire pw_weight_addr_gen_Eqi1u16_4_30_out1;
      wire pw_weight_addr_gen_Or_1Ux1U_1U_4_36_out1;
      reg enable;
      wire pw_weight_addr_gen_Not_1U_1U_4_10_out1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_4_11_out1;
      wire pw_weight_addr_gen_EqSubi1u16u16_1_12_out1;
      reg[15:0] pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_14_out1;
      reg[15:0] pw_weight_addr_gen_Muxi0u16u1_4_15_out1;
      wire pw_weight_addr_gen_EqSubu8u16u16_1_16_out1;
      reg[15:0] pw_weight_addr_gen_N_Mux_16_2_22_4_19_out1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1;
      wire[15:0] pw_weight_addr_gen_Add_16Ux8U_16U_4_18_out1;
      reg[15:0] pw_weight_addr_gen_Muxi0u16u1_4_20_out1;
      reg[15:0] ox_cnt;
      wire pw_weight_addr_gen_EqSubi1u16u16_1_21_out1;
      reg[15:0] pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1;
      reg[15:0] pw_weight_addr_gen_Muxi0u16u1_4_24_out1;
      reg[15:0] oy_cnt;
      wire pw_weight_addr_gen_EqSubi1u16u16_1_25_out1;
      wire[15:0] pw_weight_addr_gen_EqSubi1u16u16_1_25_in1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_1_26_out1;
      reg[15:0] pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_27_out1;
      wire pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1;
      reg[15:0] pw_weight_addr_gen_Muxi0u16u1_4_28_out1;
      reg[15:0] if_cnt;
      reg[15:0] of_cnt;
      reg[15:0] if_pos;
      reg[15:0] of_pos;
      wire[31:0] pw_weight_addr_gen_Add_32Ux16U_32U_4_9_out1;
      wire[31:0] pw_weight_addr_gen_Mul_16Ux16U_32U_1_8_out1;
      reg[31:0] org_if_pos;
      reg[31:0] org_of_pos;
      wire[31:0] pw_weight_addr_gen_Add_32Ux32U_32U_4_7_out1;
      reg[31:0] tmp_pw_weight_addr;
      reg pw_weight_addr_valid_4d;
      reg pw_weight_addr_valid_3d;
      reg pw_weight_addr_valid_2d;
      reg pw_weight_addr_valid_1d;
      reg run_8d;
      reg run_7d;
      reg run_6d;
      reg run_5d;
      reg run_4d;
      reg run;
      reg run_1d;
      reg run_2d;
      reg run_9d;
      reg pw_weight_addr_valid_5d;
      reg run_3d;
      reg run_10d;
      reg pw_weight_addr_valid_6d;
      reg[15:0] of_cnt_max;
      reg[15:0] if_cnt_max;
      /*signed*/wire[15:0] pw_weight_addr_gen_Add3u8u8Subu16u16_4_5_out1;
      /*signed*/wire[15:0] pw_weight_addr_gen_Add3u8u8Subu16u16_4_6_out1;
      reg[15:0] pw_weight_addr_gen_N_Mux_16_3_24_4_2_out1;
      wire[14:0] pw_weight_addr_gen_N_Mux_16_3_24_4_2_in2;
      reg[15:0] ox_cnt_max;
      wire[13:0] pw_weight_addr_gen_N_Mux_16_3_24_4_2_in3;
      reg[15:0] pw_weight_addr_gen_N_Mux_16_3_24_4_1_out1;
      wire[14:0] pw_weight_addr_gen_N_Mux_16_3_24_4_1_in2;
      reg[15:0] oy_cnt_max;
      wire[13:0] pw_weight_addr_gen_N_Mux_16_3_24_4_1_in3;
      wire[15:0] pw_weight_addr_gen_Add2i1u16_1_3_out1;
      reg[15:0] oy_cnt_max2;
      wire[15:0] pw_weight_addr_gen_Add2i1u16_1_4_out1;
      reg[15:0] ox_cnt_max2;

         // rtl_process:pw_weight_addr_gen/drive_ox_cnt_max2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_ox_cnt_max2
         // at: pw_weight_addr_gen.h:304:7
         // at: pw_weight_addr_gen.h:315:7
         // at: pw_weight_addr_gen.h:136:56
         always @(posedge clk or negedge rstn)
          begin :drive_ox_cnt_max2
            if (rstn == 1'b0) begin
               // op:_cnt_max2/OP0
               ox_cnt_max2 <= 16'd00000;
            end
            else begin
               // op:_cnt_max2/OP11
               ox_cnt_max2 <= pw_weight_addr_gen_Add2i1u16_1_4_out1;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_oy_cnt_max2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_oy_cnt_max2
         // at: pw_weight_addr_gen.h:305:7
         // at: pw_weight_addr_gen.h:324:7
         // at: pw_weight_addr_gen.h:151:56
         always @(posedge clk or negedge rstn)
          begin :drive_oy_cnt_max2
            if (rstn == 1'b0) begin
               // op:_cnt_max2/OP1
               oy_cnt_max2 <= 16'd00000;
            end
            else begin
               // op:_cnt_max2/OP8
               oy_cnt_max2 <= pw_weight_addr_gen_Add2i1u16_1_3_out1;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_gen_N_Mux_16_3_24_4_1_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_gen_N_Mux_16_3_24_4_1_in3
         // at: pw_weight_addr_gen.h:322:40
         assign pw_weight_addr_gen_N_Mux_16_3_24_4_1_in3 = oy_cnt_max[15:2];

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_gen_N_Mux_16_3_24_4_1_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_gen_N_Mux_16_3_24_4_1_in2
         // at: pw_weight_addr_gen.h:320:40
         assign pw_weight_addr_gen_N_Mux_16_3_24_4_1_in2 = oy_cnt_max[15:1];

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_N_Mux_16_3_24_4
         always @(stride_y or oy_cnt_max or pw_weight_addr_gen_N_Mux_16_3_24_4_1_in3 or pw_weight_addr_gen_N_Mux_16_3_24_4_1_in2)
          begin :pw_weight_addr_gen_N_Mux_16_3_24_4_1
            case (stride_y) 

               8'd002:                begin
                  pw_weight_addr_gen_N_Mux_16_3_24_4_1_out1 = {1'b0, pw_weight_addr_gen_N_Mux_16_3_24_4_1_in2};
               end
               
               8'd004:                begin
                  pw_weight_addr_gen_N_Mux_16_3_24_4_1_out1 = {2'b00, pw_weight_addr_gen_N_Mux_16_3_24_4_1_in3};
               end
               
               default:                begin
                  pw_weight_addr_gen_N_Mux_16_3_24_4_1_out1 = oy_cnt_max;
               end
               
            endcase

         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_gen_N_Mux_16_3_24_4_2_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_gen_N_Mux_16_3_24_4_2_in3
         // at: pw_weight_addr_gen.h:313:40
         assign pw_weight_addr_gen_N_Mux_16_3_24_4_2_in3 = ox_cnt_max[15:2];

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_gen_N_Mux_16_3_24_4_2_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_gen_N_Mux_16_3_24_4_2_in2
         // at: pw_weight_addr_gen.h:311:40
         assign pw_weight_addr_gen_N_Mux_16_3_24_4_2_in2 = ox_cnt_max[15:1];

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_N_Mux_16_3_24_4
         always @(stride_x or ox_cnt_max or pw_weight_addr_gen_N_Mux_16_3_24_4_2_in3 or pw_weight_addr_gen_N_Mux_16_3_24_4_2_in2)
          begin :pw_weight_addr_gen_N_Mux_16_3_24_4_2
            case (stride_x) 

               8'd002:                begin
                  pw_weight_addr_gen_N_Mux_16_3_24_4_2_out1 = {1'b0, pw_weight_addr_gen_N_Mux_16_3_24_4_2_in2};
               end
               
               8'd004:                begin
                  pw_weight_addr_gen_N_Mux_16_3_24_4_2_out1 = {2'b00, pw_weight_addr_gen_N_Mux_16_3_24_4_2_in3};
               end
               
               default:                begin
                  pw_weight_addr_gen_N_Mux_16_3_24_4_2_out1 = ox_cnt_max;
               end
               
            endcase

         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add2i1u16_1_3
         // Resource=pw_weight_addr_gen_Add2i1u16_1, Function=add : Inputs=16 Outputs=16
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:324:39
         assign pw_weight_addr_gen_Add2i1u16_1_3_out1 = pw_weight_addr_gen_N_Mux_16_3_24_4_1_out1 + 16'd00001;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add2i1u16_1_4
         // Resource=pw_weight_addr_gen_Add2i1u16_1, Function=add : Inputs=16 Outputs=16
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:315:39
         assign pw_weight_addr_gen_Add2i1u16_1_4_out1 = pw_weight_addr_gen_N_Mux_16_3_24_4_2_out1 + 16'd00001;

         // rtl_process:pw_weight_addr_gen/drive_ox_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_ox_cnt_max
         // at: pw_weight_addr_gen.h:315:21
         // at: pw_weight_addr_gen.h:293:5
         always @(posedge clk)
          begin :drive_ox_cnt_max
            // op:_set_max_num/OP36
            ox_cnt_max <= pw_weight_addr_gen_Add3u8u8Subu16u16_4_6_out1;
         end

         // rtl_process:pw_weight_addr_gen/drive_oy_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_oy_cnt_max
         // at: pw_weight_addr_gen.h:322:22
         // at: pw_weight_addr_gen.h:296:5
         always @(posedge clk)
          begin :drive_oy_cnt_max
            // op:_set_max_num/OP34
            oy_cnt_max <= pw_weight_addr_gen_Add3u8u8Subu16u16_4_5_out1;
         end

         // rtl_process:pw_weight_addr_gen/drive_if_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_if_cnt_max
         // at: pw_weight_addr_gen.h:291:5
         // at: pw_weight_addr_gen.h:201:36
         // at: pw_weight_addr_gen.h:121:56
         always @(posedge clk)
          begin :drive_if_cnt_max
            // op:_set_max_num/OP37
            if_cnt_max <= filter_channel;
         end

         // rtl_process:pw_weight_addr_gen/drive_of_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_of_cnt_max
         // at: pw_weight_addr_gen.h:298:5
         // at: pw_weight_addr_gen.h:167:57
         always @(posedge clk)
          begin :drive_of_cnt_max
            // op:_set_max_num/OP32
            of_cnt_max <= out_feature_channel;
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add3u8u8Subu16u16_4_5
         // Resource=pw_weight_addr_gen_Add3u8u8Subu16u16_4, Function=sub add add : Inputs=16,16,8,8 Outputs=16S
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:296:63
         assign pw_weight_addr_gen_Add3u8u8Subu16u16_4_5_out1 = feature_height - filter_height + ({8'b00000000, pad_top_size} + {8'b00000000, pad_bottom_size});

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add3u8u8Subu16u16_4_6
         // Resource=pw_weight_addr_gen_Add3u8u8Subu16u16_4, Function=sub add add : Inputs=16,16,8,8 Outputs=16S
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:293:61
         assign pw_weight_addr_gen_Add3u8u8Subu16u16_4_6_out1 = feature_width - filter_width + ({8'b00000000, pad_left_size} + {8'b00000000, pad_right_size});

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_data_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_pw_weight_data_valid
         // at: pw_weight_addr_gen.h:283:7
         // at: pw_weight_addr_gen.h:286:7
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_data_valid
            if (rstn == 1'b0) begin
               // op:_pw_weight_data_valid/OP46
               pw_weight_data_valid <= 1'd0;
            end
            else begin
               // op:_pw_weight_data_valid/OP48
               pw_weight_data_valid <= pw_weight_addr_valid_6d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_cache_en
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_cache_en
         // at: pw_weight_addr_gen.h:274:7
         // at: pw_weight_addr_gen.h:277:7
         always @(posedge clk or negedge rstn)
          begin :drive_cache_en
            if (rstn == 1'b0) begin
               // op:_cache_en/OP49
               cache_en <= 1'd0;
            end
            else begin
               // op:_cache_en/OP51
               cache_en <= run_10d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_valid
         // at: pw_weight_addr_gen.h:222:8
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid
            if (rstn == 1'b0) begin
               // op:_pw_weight_addr_valid/OP52
               pw_weight_addr_valid <= 1'd0;
            end
            else begin
               // op:_pw_weight_addr_valid/OP54
               pw_weight_addr_valid <= run_3d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid_6d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_pw_weight_addr_valid_6d
         // at: pw_weight_addr_gen.h:286:30
         // at: pw_weight_addr_gen.h:240:7
         // at: pw_weight_addr_gen.h:259:7
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid_6d
            if (rstn == 1'b0) begin
               // op:_delay/OP70
               pw_weight_addr_valid_6d <= 1'd0;
            end
            else begin
               // op:_delay/OP106
               pw_weight_addr_valid_6d <= pw_weight_addr_valid_5d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_10d
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_run_10d
         // at: pw_weight_addr_gen.h:277:18
         // at: pw_weight_addr_gen.h:234:7
         // at: pw_weight_addr_gen.h:253:7
         always @(posedge clk or negedge rstn)
          begin :drive_run_10d
            if (rstn == 1'b0) begin
               // op:_delay/OP64
               run_10d <= 1'b0;
            end
            else begin
               // op:_delay/OP112
               run_10d <= run_9d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_3d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_3d
         // at: pw_weight_addr_gen.h:269:30
         // at: pw_weight_addr_gen.h:227:7
         // at: pw_weight_addr_gen.h:246:7
         always @(posedge clk or negedge rstn)
          begin :drive_run_3d
            if (rstn == 1'b0) begin
               // op:_delay/OP57
               run_3d <= 1'b0;
            end
            else begin
               // op:_delay/OP119
               run_3d <= run_2d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_1d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_1d
         // at: pw_weight_addr_gen.h:225:7
         // at: pw_weight_addr_gen.h:244:7
         // at: pw_weight_addr_gen.h:245:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_1d
            if (rstn == 1'b0) begin
               // op:_delay/OP55
               run_1d <= 1'b0;
            end
            else begin
               // op:_delay/OP121
               run_1d <= run;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_2d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_2d
         // at: pw_weight_addr_gen.h:226:7
         // at: pw_weight_addr_gen.h:245:7
         // at: pw_weight_addr_gen.h:246:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_2d
            if (rstn == 1'b0) begin
               // op:_delay/OP56
               run_2d <= 1'b0;
            end
            else begin
               // op:_delay/OP120
               run_2d <= run_1d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_4d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_4d
         // at: pw_weight_addr_gen.h:228:7
         // at: pw_weight_addr_gen.h:247:7
         // at: pw_weight_addr_gen.h:248:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_4d
            if (rstn == 1'b0) begin
               // op:_delay/OP58
               run_4d <= 1'b0;
            end
            else begin
               // op:_delay/OP118
               run_4d <= run_3d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_5d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_5d
         // at: pw_weight_addr_gen.h:229:7
         // at: pw_weight_addr_gen.h:248:7
         // at: pw_weight_addr_gen.h:249:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_5d
            if (rstn == 1'b0) begin
               // op:_delay/OP59
               run_5d <= 1'b0;
            end
            else begin
               // op:_delay/OP117
               run_5d <= run_4d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_6d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_6d
         // at: pw_weight_addr_gen.h:230:7
         // at: pw_weight_addr_gen.h:249:7
         // at: pw_weight_addr_gen.h:250:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_6d
            if (rstn == 1'b0) begin
               // op:_delay/OP60
               run_6d <= 1'b0;
            end
            else begin
               // op:_delay/OP116
               run_6d <= run_5d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_7d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_7d
         // at: pw_weight_addr_gen.h:231:7
         // at: pw_weight_addr_gen.h:250:7
         // at: pw_weight_addr_gen.h:251:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_7d
            if (rstn == 1'b0) begin
               // op:_delay/OP61
               run_7d <= 1'b0;
            end
            else begin
               // op:_delay/OP115
               run_7d <= run_6d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_8d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_8d
         // at: pw_weight_addr_gen.h:232:7
         // at: pw_weight_addr_gen.h:251:7
         // at: pw_weight_addr_gen.h:252:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_8d
            if (rstn == 1'b0) begin
               // op:_delay/OP62
               run_8d <= 1'b0;
            end
            else begin
               // op:_delay/OP114
               run_8d <= run_7d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_run_9d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_9d
         // at: pw_weight_addr_gen.h:233:7
         // at: pw_weight_addr_gen.h:252:7
         // at: pw_weight_addr_gen.h:253:17
         always @(posedge clk or negedge rstn)
          begin :drive_run_9d
            if (rstn == 1'b0) begin
               // op:_delay/OP63
               run_9d <= 1'b0;
            end
            else begin
               // op:_delay/OP113
               run_9d <= run_8d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid_1d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_pw_weight_addr_valid_1d
         // at: pw_weight_addr_gen.h:235:7
         // at: pw_weight_addr_gen.h:254:7
         // at: pw_weight_addr_gen.h:255:33
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid_1d
            if (rstn == 1'b0) begin
               // op:_delay/OP65
               pw_weight_addr_valid_1d <= 1'd0;
            end
            else begin
               // op:_delay/OP111
               pw_weight_addr_valid_1d <= pw_weight_addr_valid;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid_2d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_pw_weight_addr_valid_2d
         // at: pw_weight_addr_gen.h:236:7
         // at: pw_weight_addr_gen.h:255:7
         // at: pw_weight_addr_gen.h:256:33
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid_2d
            if (rstn == 1'b0) begin
               // op:_delay/OP66
               pw_weight_addr_valid_2d <= 1'd0;
            end
            else begin
               // op:_delay/OP110
               pw_weight_addr_valid_2d <= pw_weight_addr_valid_1d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid_3d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_pw_weight_addr_valid_3d
         // at: pw_weight_addr_gen.h:237:7
         // at: pw_weight_addr_gen.h:256:7
         // at: pw_weight_addr_gen.h:257:33
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid_3d
            if (rstn == 1'b0) begin
               // op:_delay/OP67
               pw_weight_addr_valid_3d <= 1'd0;
            end
            else begin
               // op:_delay/OP109
               pw_weight_addr_valid_3d <= pw_weight_addr_valid_2d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid_4d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_pw_weight_addr_valid_4d
         // at: pw_weight_addr_gen.h:238:7
         // at: pw_weight_addr_gen.h:257:7
         // at: pw_weight_addr_gen.h:258:33
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid_4d
            if (rstn == 1'b0) begin
               // op:_delay/OP68
               pw_weight_addr_valid_4d <= 1'd0;
            end
            else begin
               // op:_delay/OP108
               pw_weight_addr_valid_4d <= pw_weight_addr_valid_3d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_valid_5d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_pw_weight_addr_valid_5d
         // at: pw_weight_addr_gen.h:239:7
         // at: pw_weight_addr_gen.h:258:7
         // at: pw_weight_addr_gen.h:259:33
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr_valid_5d
            if (rstn == 1'b0) begin
               // op:_delay/OP69
               pw_weight_addr_valid_5d <= 1'd0;
            end
            else begin
               // op:_delay/OP107
               pw_weight_addr_valid_5d <= pw_weight_addr_valid_4d;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_pw_weight_addr
         // at: pw_weight_addr_gen.h:217:7
         // at: pw_weight_addr_gen.h:219:7
         always @(posedge clk or negedge rstn)
          begin :drive_pw_weight_addr
            if (rstn == 1'b0) begin
               // op:_pw_weight_addr/OP122
               pw_weight_addr <= 32'd0000000000;
            end
            else begin
               // op:_pw_weight_addr/OP124
               pw_weight_addr <= tmp_pw_weight_addr;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_tmp_pw_weight_addr
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_tmp_pw_weight_addr
         // at: pw_weight_addr_gen.h:219:24
         // at: pw_weight_addr_gen.h:208:7
         // at: pw_weight_addr_gen.h:211:7
         always @(posedge clk or negedge rstn)
          begin :drive_tmp_pw_weight_addr
            if (rstn == 1'b0) begin
               // op:_tmp_pw_weight_addr/OP125
               tmp_pw_weight_addr <= 32'd0000000000;
            end
            else begin
               // op:_tmp_pw_weight_addr/OP129
               tmp_pw_weight_addr <= pw_weight_addr_gen_Add_32Ux32U_32U_4_7_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add_32Ux32U_32U_4_7
         // Resource=pw_weight_addr_gen_Add_32Ux32U_32U_4, Function=add : Inputs=32,32 Outputs=32
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:211:46
         assign pw_weight_addr_gen_Add_32Ux32U_32U_4_7_out1 = org_if_pos + org_of_pos;

         // rtl_process:pw_weight_addr_gen/drive_org_of_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_org_of_pos
         // at: pw_weight_addr_gen.h:211:48
         // at: pw_weight_addr_gen.h:197:7
         // at: pw_weight_addr_gen.h:201:7
         always @(posedge clk or negedge rstn)
          begin :drive_org_of_pos
            if (rstn == 1'b0) begin
               // op:_org_pos/OP133
               org_of_pos <= 32'd0000000000;
            end
            else begin
               // op:_org_pos/OP139
               org_of_pos <= pw_weight_addr_gen_Mul_16Ux16U_32U_1_8_out1;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_org_if_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_org_if_pos
         // at: pw_weight_addr_gen.h:211:28
         // at: pw_weight_addr_gen.h:196:7
         // at: pw_weight_addr_gen.h:200:7
         always @(posedge clk or negedge rstn)
          begin :drive_org_if_pos
            if (rstn == 1'b0) begin
               // op:_org_pos/OP132
               org_if_pos <= 32'd0000000000;
            end
            else begin
               // op:_org_pos/OP141
               org_if_pos <= pw_weight_addr_gen_Add_32Ux16U_32U_4_9_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Mul_16Ux16U_32U_1_8
         // Resource=pw_weight_addr_gen_Mul_16Ux16U_32U_1, Function=mul : Inputs=16,16 Outputs=32
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:201:34
         assign pw_weight_addr_gen_Mul_16Ux16U_32U_1_8_out1 = {16'b0000000000000000, of_pos}*{16'b0000000000000000, if_cnt_max};

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add_32Ux16U_32U_4_9
         // Resource=pw_weight_addr_gen_Add_32Ux16U_32U_4, Function=add : Inputs=32,16 Outputs=32
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:200:34
         assign pw_weight_addr_gen_Add_32Ux16U_32U_4_9_out1 = read_weight_base_addr + {16'b0000000000000000, if_pos};

         // rtl_process:pw_weight_addr_gen/drive_of_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_of_pos
         // at: pw_weight_addr_gen.h:201:20
         // at: pw_weight_addr_gen.h:188:7
         // at: pw_weight_addr_gen.h:190:7
         always @(posedge clk or negedge rstn)
          begin :drive_of_pos
            if (rstn == 1'b0) begin
               // op:_of_pos/OP146
               of_pos <= 16'd00000;
            end
            else begin
               // op:_of_pos/OP148
               of_pos <= of_cnt;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_if_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_if_pos
         // at: pw_weight_addr_gen.h:200:20
         // at: pw_weight_addr_gen.h:181:7
         // at: pw_weight_addr_gen.h:183:7
         always @(posedge clk or negedge rstn)
          begin :drive_if_pos
            if (rstn == 1'b0) begin
               // op:_if_pos/OP149
               if_pos <= 16'd00000;
            end
            else begin
               // op:_if_pos/OP151
               if_pos <= if_cnt;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_of_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_of_cnt
         // at: pw_weight_addr_gen.h:176:7
         // at: pw_weight_addr_gen.h:172:7
         always @(posedge clk or negedge rstn)
          begin :drive_of_cnt
            if (rstn == 1'b0) begin
               // op:_of_counter/OP254
               of_cnt <= 16'd00000;
            end
            else begin
               // op:_of_counter/OP261
               of_cnt <= pw_weight_addr_gen_Muxi0u16u1_4_28_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_MuxAdd2i1u16u16u1_1
         always @(of_cnt or pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1)
          begin :pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_27
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1) begin
               pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_27_out1 = of_cnt + 16'd00001;
            end
            else begin
               pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_27_out1 = of_cnt;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Muxi0u16u1_4
         always @(pw_weight_addr_gen_And_1Ux1U_1U_1_26_out1 or pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_27_out1)
          begin :pw_weight_addr_gen_Muxi0u16u1_4_28
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_26_out1) begin
               pw_weight_addr_gen_Muxi0u16u1_4_28_out1 = 16'd00000;
            end
            else begin
               pw_weight_addr_gen_Muxi0u16u1_4_28_out1 = pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_27_out1;
            end
         end

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_gen_EqSubi1u16u16_1_25_in1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_gen_EqSubi1u16u16_1_25_in1
         // at: pw_weight_addr_gen.h:167:75
         assign pw_weight_addr_gen_EqSubi1u16u16_1_25_in1 = {5'b00000, of_cnt_max[15:5]};

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_EqSubi1u16u16_1_25
         // Resource=pw_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:167:53
         assign pw_weight_addr_gen_EqSubi1u16u16_1_25_out1 = {1'b0, of_cnt} == {1'b0, pw_weight_addr_gen_EqSubi1u16u16_1_25_in1} - 17'd000001;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_1_26
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:167:35
         assign pw_weight_addr_gen_And_1Ux1U_1U_1_26_out1 = pw_weight_addr_gen_EqSubi1u16u16_1_25_out1 & pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1;

         // rtl_process:pw_weight_addr_gen/drive_oy_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_oy_cnt
         // at: pw_weight_addr_gen.h:151:39
         // at: pw_weight_addr_gen.h:156:7
         // at: pw_weight_addr_gen.h:160:7
         always @(posedge clk or negedge rstn)
          begin :drive_oy_cnt
            if (rstn == 1'b0) begin
               // op:_oy_counter/OP229
               oy_cnt <= 16'd00000;
            end
            else begin
               // op:_oy_counter/OP236
               oy_cnt <= pw_weight_addr_gen_Muxi0u16u1_4_24_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_MuxAdd2i1u16u16u1_1
         always @(oy_cnt or pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1)
          begin :pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1) begin
               pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1 = oy_cnt + 16'd00001;
            end
            else begin
               pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1 = oy_cnt;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Muxi0u16u1_4
         always @(pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1 or pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1)
          begin :pw_weight_addr_gen_Muxi0u16u1_4_24
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1) begin
               pw_weight_addr_gen_Muxi0u16u1_4_24_out1 = 16'd00000;
            end
            else begin
               pw_weight_addr_gen_Muxi0u16u1_4_24_out1 = pw_weight_addr_gen_MuxAdd2i1u16u16u1_1_23_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_EqSubi1u16u16_1_21
         // Resource=pw_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:151:53
         assign pw_weight_addr_gen_EqSubi1u16u16_1_21_out1 = {1'b0, oy_cnt} == {1'b0, oy_cnt_max2} - 17'd000001;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_1_22
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:151:35
         assign pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1 = pw_weight_addr_gen_EqSubi1u16u16_1_21_out1 & pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1;

         // rtl_process:pw_weight_addr_gen/drive_ox_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_ox_cnt
         // at: pw_weight_addr_gen.h:136:39
         // at: pw_weight_addr_gen.h:141:7
         // at: pw_weight_addr_gen.h:145:7
         always @(posedge clk or negedge rstn)
          begin :drive_ox_cnt
            if (rstn == 1'b0) begin
               // op:_ox_counter/OP200
               ox_cnt <= 16'd00000;
            end
            else begin
               // op:_ox_counter/OP209
               ox_cnt <= pw_weight_addr_gen_Muxi0u16u1_4_20_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Add_16Ux8U_16U_4_18
         // Resource=pw_weight_addr_gen_Add_16Ux8U_16U_4, Function=add : Inputs=16,8 Outputs=16
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:145:30
         assign pw_weight_addr_gen_Add_16Ux8U_16U_4_18_out1 = ox_cnt + {8'b00000000, systolic_depth};

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_N_Mux_16_2_22_4
         always @(ox_cnt or pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 or pw_weight_addr_gen_Add_16Ux8U_16U_4_18_out1)
          begin :pw_weight_addr_gen_N_Mux_16_2_22_4_19
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1) begin
               pw_weight_addr_gen_N_Mux_16_2_22_4_19_out1 = pw_weight_addr_gen_Add_16Ux8U_16U_4_18_out1;
            end
            else begin
               pw_weight_addr_gen_N_Mux_16_2_22_4_19_out1 = ox_cnt;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Muxi0u16u1_4
         always @(pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1 or pw_weight_addr_gen_N_Mux_16_2_22_4_19_out1)
          begin :pw_weight_addr_gen_Muxi0u16u1_4_20
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1) begin
               pw_weight_addr_gen_Muxi0u16u1_4_20_out1 = 16'd00000;
            end
            else begin
               pw_weight_addr_gen_Muxi0u16u1_4_20_out1 = pw_weight_addr_gen_N_Mux_16_2_22_4_19_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_EqSubu8u16u16_1_16
         // Resource=pw_weight_addr_gen_EqSubu8u16u16_1, Function=sub eq : Inputs=16,16,8 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:136:53
         assign pw_weight_addr_gen_EqSubu8u16u16_1_16_out1 = {1'b0, ox_cnt} == {1'b0, ox_cnt_max2} - {9'b000000000, systolic_depth};

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_1_17
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:136:35
         assign pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1 = pw_weight_addr_gen_EqSubu8u16u16_1_16_out1 & pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1;

         // rtl_process:pw_weight_addr_gen/drive_if_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_if_cnt
         // at: pw_weight_addr_gen.h:130:7
         // at: pw_weight_addr_gen.h:126:7
         always @(posedge clk or negedge rstn)
          begin :drive_if_cnt
            if (rstn == 1'b0) begin
               // op:_if_counter/OP173
               if_cnt <= 16'd00000;
            end
            else begin
               // op:_if_counter/OP180
               if_cnt <= pw_weight_addr_gen_Muxi0u16u1_4_15_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_MuxAdd2i1u16u16u1_4
         always @(run or if_cnt)
          begin :pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_14
            if (run) begin
               pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_14_out1 = if_cnt + 16'd00001;
            end
            else begin
               pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_14_out1 = if_cnt;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Muxi0u16u1_4
         always @(pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 or pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_14_out1)
          begin :pw_weight_addr_gen_Muxi0u16u1_4_15
            if (pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1) begin
               pw_weight_addr_gen_Muxi0u16u1_4_15_out1 = 16'd00000;
            end
            else begin
               pw_weight_addr_gen_Muxi0u16u1_4_15_out1 = pw_weight_addr_gen_MuxAdd2i1u16u16u1_4_14_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_EqSubi1u16u16_1_12
         // Resource=pw_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:121:53
         assign pw_weight_addr_gen_EqSubi1u16u16_1_12_out1 = {1'b0, if_cnt} == {1'b0, if_cnt_max} - 17'd000001;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_1_13
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:121:35
         assign pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1 = pw_weight_addr_gen_EqSubi1u16u16_1_12_out1 & run;

         // rtl_process:pw_weight_addr_gen/drive_run
         // Sharing or Control mux
         // Sharing/Controlling 6 operation(s) on drive_run
         // at: pw_weight_addr_gen.h:120:5
         // at: pw_weight_addr_gen.h:129:14
         // at: pw_weight_addr_gen.h:244:16
         // at: pw_weight_addr_gen.h:111:7
         // at: pw_weight_addr_gen.h:115:7
         // at: pw_weight_addr_gen.h:120:17
         always @(posedge clk or negedge rstn)
          begin :drive_run
            if (rstn == 1'b0) begin
               // op:_run/OP152
               run <= 1'b0;
            end
            else begin
               // op:_run/OP157
               run <= pw_weight_addr_gen_And_1Ux1U_1U_4_11_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Not_1U_1U_4_10
         // Resource=pw_weight_addr_gen_Not_1U_1U_4, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:112:10
         assign pw_weight_addr_gen_Not_1U_1U_4_10_out1 = !stop;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_4_11
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:112:10
         assign pw_weight_addr_gen_And_1Ux1U_1U_4_11_out1 = pw_weight_addr_gen_Not_1U_1U_4_10_out1 & enable;

         // rtl_process:pw_weight_addr_gen/drive_enable
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_enable
         // at: pw_weight_addr_gen.h:115:13
         // at: pw_weight_addr_gen.h:101:7
         // at: pw_weight_addr_gen.h:105:7
         always @(posedge clk or negedge rstn)
          begin :drive_enable
            if (rstn == 1'b0) begin
               // op:_enable/OP274
               enable <= 1'b0;
            end
            else begin
               // op:_enable/OP288
               enable <= pw_weight_addr_gen_Or_1Ux1U_1U_4_36_out1;
            end
         end

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Eqi1u16_4_30
         // Resource=pw_weight_addr_gen_Eqi1u16_4, Function=eq : Inputs=16 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:102:63
         assign pw_weight_addr_gen_Eqi1u16_4_30_out1 = filter_height == 16'd00001;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Not_1U_1U_4_31
         // Resource=pw_weight_addr_gen_Not_1U_1U_4, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:104:10
         assign pw_weight_addr_gen_Not_1U_1U_4_31_out1 = !pw_weight_addr_gen_AndReduction_4S_1U_1_29_out1;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_4_32
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:102:39
         assign pw_weight_addr_gen_And_1Ux1U_1U_4_32_out1 = pw_weight_addr_gen_Eqi1u16_4_30_out1 & start_rising;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Eqi1u16_4_33
         // Resource=pw_weight_addr_gen_Eqi1u16_4, Function=eq : Inputs=16 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:102:91
         assign pw_weight_addr_gen_Eqi1u16_4_33_out1 = filter_width == 16'd00001;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_4_34
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:104:10
         assign pw_weight_addr_gen_And_1Ux1U_1U_4_34_out1 = pw_weight_addr_gen_Not_1U_1U_4_31_out1 & enable;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_And_1Ux1U_1U_4_35
         // Resource=pw_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:102:68
         assign pw_weight_addr_gen_And_1Ux1U_1U_4_35_out1 = pw_weight_addr_gen_Eqi1u16_4_33_out1 & pw_weight_addr_gen_And_1Ux1U_1U_4_32_out1;

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_Or_1Ux1U_1U_4_36
         // Resource=pw_weight_addr_gen_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:102:10
         assign pw_weight_addr_gen_Or_1Ux1U_1U_4_36_out1 = pw_weight_addr_gen_And_1Ux1U_1U_4_35_out1 | pw_weight_addr_gen_And_1Ux1U_1U_4_34_out1;

         // rtl_process:pw_weight_addr_gen/drive_pw_weight_addr_gen_AndReduction_4S_1U_1_29_in1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_pw_weight_addr_gen_AndReduction_4S_1U_1_29_in1
         // at: pw_weight_addr_gen.h:96:68
         assign pw_weight_addr_gen_AndReduction_4S_1U_1_29_in1 = {{pw_weight_addr_gen_And_1Ux1U_1U_1_13_out1, pw_weight_addr_gen_And_1Ux1U_1U_1_17_out1}, {pw_weight_addr_gen_And_1Ux1U_1U_1_22_out1, pw_weight_addr_gen_And_1Ux1U_1U_1_26_out1}};

         // rtl_instance:pw_weight_addr_gen/pw_weight_addr_gen_AndReduction_4S_1U_1_29
         // Resource=pw_weight_addr_gen_AndReduction_4S_1U_1, Function=and : Inputs=4S Outputs=1
         // Implements 1 operation(s)
         // at: pw_weight_addr_gen.h:96:68
         assign pw_weight_addr_gen_AndReduction_4S_1U_1_29_out1 = (&pw_weight_addr_gen_AndReduction_4S_1U_1_29_in1);


endmodule


