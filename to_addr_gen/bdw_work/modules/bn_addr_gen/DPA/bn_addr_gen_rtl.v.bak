// Generated by stratus_hls 19.10-p100  (91500.011111)
// Tue Jan 26 20:18:35 2021
// from bn_addr_gen.cpp

`timescale 1ps / 1ps

      
module bn_addr_gen(clk, rstn, out_feature_width, out_feature_height, out_feature_channel, bn_read_base_addr, conv_type, bn_en, start_rising, data_en, bn_addr, bn_addr_valid);

      input clk;
      input rstn;
      input [15:0] out_feature_width;
      input [15:0] out_feature_height;
      input [15:0] out_feature_channel;
      input [31:0] bn_read_base_addr;
      input [7:0] conv_type;
      input [7:0] bn_en;
      input start_rising;
      input data_en;
      output [31:0] bn_addr;
      reg [31:0] bn_addr;
      output bn_addr_valid;
      reg bn_addr_valid;
      reg data_en_5d;
      reg data_en_4d;
      reg data_en_3d;
      reg data_en_2d;
      reg data_en_1d;
      reg data_en_8d;
      reg data_en_6d;
      reg data_en_7d;
      reg data_en_9d;
      wire bn_addr_gen_Eqi3u16_1_4_out1;
      wire bn_addr_gen_OrReduction_8U_1U_1_3_out1;
      reg[15:0] bn_addr_gen_MuxAdd2i1u16u16u1_4_7_out1;
      reg[15:0] bn_addr_gen_Muxi0u16u1_4_8_out1;
      wire bn_addr_gen_EqSubi1u16u16_1_9_out1;
      reg[15:0] bn_addr_gen_MuxAdd2i1u16u16u1_4_11_out1;
      wire bn_addr_gen_And_1Ux1U_1U_1_5_out1;
      reg[15:0] bn_addr_gen_Muxi0u16u1_4_12_out1;
      reg[15:0] ox_cnt;
      wire bn_addr_gen_EqSubi1u16u16_1_13_out1;
      reg[15:0] bn_addr_gen_MuxAdd2i1u16u16u1_1_15_out1;
      wire bn_addr_gen_And_1Ux1U_1U_1_10_out1;
      reg[15:0] bn_addr_gen_Muxi0u16u1_4_16_out1;
      reg[15:0] oy_cnt;
      wire bn_addr_gen_EqSubi1u16u16_1_17_out1;
      wire bn_addr_gen_And_1Ux1U_1U_1_18_out1;
      reg[15:0] bn_addr_gen_MuxAdd2i1u16u16u1_1_19_out1;
      wire bn_addr_gen_And_1Ux1U_1U_1_14_out1;
      reg[15:0] bn_addr_gen_Muxi0u16u1_4_20_out1;
      reg[10:0] of_cnt_max_slice;
      reg[15:0] oy_cnt_max;
      reg[15:0] ox_cnt_max;
      reg[15:0] valid_cnt;
      reg[15:0] of_cnt;
      wire bn_addr_gen_Equal_8Ux1U_1U_4_1_out1;
      reg[31:0] bn_addr_gen_MuxAdd3u16Cati0u16u32u32u1_1_2_out1;
      reg bn_addr_gen_N_Mux_1_2_7_1_6_out1;

         // rtl_process:bn_addr_gen/drive_bn_addr_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_bn_addr_valid
         // at: bn_addr_gen.h:195:7
         // at: bn_addr_gen.h:202:7
         always @(posedge clk or negedge rstn)
          begin :drive_bn_addr_valid
            if (rstn == 1'b0) begin
               // op:_bn_addr_valid/OP41
               bn_addr_valid <= 1'd0;
            end
            else begin
               // op:_bn_addr_valid/OP43
               bn_addr_valid <= bn_addr_gen_N_Mux_1_2_7_1_6_out1;
            end
         end

         // rtl_process:bn_addr_gen/drive_bn_addr
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_bn_addr
         // at: bn_addr_gen.h:188:7
         // at: bn_addr_gen.h:190:7
         always @(posedge clk or negedge rstn)
          begin :drive_bn_addr
            if (rstn == 1'b0) begin
               // op:_bn_add/OP0
               bn_addr <= 32'd0000000000;
            end
            else begin
               // op:_bn_add/OP9
               bn_addr <= bn_addr_gen_MuxAdd3u16Cati0u16u32u32u1_1_2_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_Equal_8Ux1U_1U_4_1
         // Resource=bn_addr_gen_Equal_8Ux1U_1U_4, Function=eq : Inputs=8,1 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:189:14
         assign bn_addr_gen_Equal_8Ux1U_1U_4_1_out1 = bn_en == 8'd001;

         // rtl_instance:bn_addr_gen/bn_addr_gen_MuxAdd3u16Cati0u16u32u32u1_1
         always @(bn_addr or bn_read_base_addr or valid_cnt or of_cnt or bn_addr_gen_Equal_8Ux1U_1U_4_1_out1)
          begin :bn_addr_gen_MuxAdd3u16Cati0u16u32u32u1_1_2
            if (bn_addr_gen_Equal_8Ux1U_1U_4_1_out1) begin
               bn_addr_gen_MuxAdd3u16Cati0u16u32u32u1_1_2_out1 = bn_read_base_addr + {{14'b00000000000000, of_cnt}, 2'd0} + {16'b0000000000000000, valid_cnt};
            end
            else begin
               bn_addr_gen_MuxAdd3u16Cati0u16u32u32u1_1_2_out1 = bn_addr;
            end
         end

         // rtl_process:bn_addr_gen/drive_ox_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_ox_cnt_max
         // at: bn_addr_gen.h:181:5
         // at: bn_addr_gen.h:140:56
         always @(posedge clk)
          begin :drive_ox_cnt_max
            // op:_set_max_num/OP22
            ox_cnt_max <= out_feature_width;
         end

         // rtl_process:bn_addr_gen/drive_oy_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_oy_cnt_max
         // at: bn_addr_gen.h:182:5
         // at: bn_addr_gen.h:154:56
         always @(posedge clk)
          begin :drive_oy_cnt_max
            // op:_set_max_num/OP21
            oy_cnt_max <= out_feature_height;
         end

         // rtl_process:bn_addr_gen/drive_of_cnt_max_slice
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_of_cnt_max_slice
         // at: bn_addr_gen.h:183:5
         // at: bn_addr_gen.h:168:56
         always @(posedge clk)
          begin :drive_of_cnt_max_slice
            // op:_set_max_num/OP20
            of_cnt_max_slice <= out_feature_channel[15:5];
         end

         // rtl_process:bn_addr_gen/drive_of_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_of_cnt
         // at: bn_addr_gen.h:177:7
         // at: bn_addr_gen.h:173:7
         always @(posedge clk or negedge rstn)
          begin :drive_of_cnt
            if (rstn == 1'b0) begin
               // op:_of_counter/OP119
               of_cnt <= 16'd00000;
            end
            else begin
               // op:_of_counter/OP126
               of_cnt <= bn_addr_gen_Muxi0u16u1_4_20_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_MuxAdd2i1u16u16u1_1
         always @(of_cnt or bn_addr_gen_And_1Ux1U_1U_1_14_out1)
          begin :bn_addr_gen_MuxAdd2i1u16u16u1_1_19
            if (bn_addr_gen_And_1Ux1U_1U_1_14_out1) begin
               bn_addr_gen_MuxAdd2i1u16u16u1_1_19_out1 = of_cnt + 16'd00001;
            end
            else begin
               bn_addr_gen_MuxAdd2i1u16u16u1_1_19_out1 = of_cnt;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_Muxi0u16u1_4
         always @(bn_addr_gen_And_1Ux1U_1U_1_18_out1 or bn_addr_gen_MuxAdd2i1u16u16u1_1_19_out1)
          begin :bn_addr_gen_Muxi0u16u1_4_20
            if (bn_addr_gen_And_1Ux1U_1U_1_18_out1) begin
               bn_addr_gen_Muxi0u16u1_4_20_out1 = 16'd00000;
            end
            else begin
               bn_addr_gen_Muxi0u16u1_4_20_out1 = bn_addr_gen_MuxAdd2i1u16u16u1_1_19_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_EqSubi1u16u16_1_17
         // Resource=bn_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:168:53
         assign bn_addr_gen_EqSubi1u16u16_1_17_out1 = {1'b0, of_cnt} == {6'd00, of_cnt_max_slice} - 17'd000001;

         // rtl_instance:bn_addr_gen/bn_addr_gen_And_1Ux1U_1U_1_18
         // Resource=bn_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:168:35
         assign bn_addr_gen_And_1Ux1U_1U_1_18_out1 = bn_addr_gen_EqSubi1u16u16_1_17_out1 & bn_addr_gen_And_1Ux1U_1U_1_14_out1;

         // rtl_process:bn_addr_gen/drive_oy_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_oy_cnt
         // at: bn_addr_gen.h:154:39
         // at: bn_addr_gen.h:159:7
         // at: bn_addr_gen.h:163:7
         always @(posedge clk or negedge rstn)
          begin :drive_oy_cnt
            if (rstn == 1'b0) begin
               // op:_oy_counter/OP94
               oy_cnt <= 16'd00000;
            end
            else begin
               // op:_oy_counter/OP101
               oy_cnt <= bn_addr_gen_Muxi0u16u1_4_16_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_MuxAdd2i1u16u16u1_1
         always @(oy_cnt or bn_addr_gen_And_1Ux1U_1U_1_10_out1)
          begin :bn_addr_gen_MuxAdd2i1u16u16u1_1_15
            if (bn_addr_gen_And_1Ux1U_1U_1_10_out1) begin
               bn_addr_gen_MuxAdd2i1u16u16u1_1_15_out1 = oy_cnt + 16'd00001;
            end
            else begin
               bn_addr_gen_MuxAdd2i1u16u16u1_1_15_out1 = oy_cnt;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_Muxi0u16u1_4
         always @(bn_addr_gen_And_1Ux1U_1U_1_14_out1 or bn_addr_gen_MuxAdd2i1u16u16u1_1_15_out1)
          begin :bn_addr_gen_Muxi0u16u1_4_16
            if (bn_addr_gen_And_1Ux1U_1U_1_14_out1) begin
               bn_addr_gen_Muxi0u16u1_4_16_out1 = 16'd00000;
            end
            else begin
               bn_addr_gen_Muxi0u16u1_4_16_out1 = bn_addr_gen_MuxAdd2i1u16u16u1_1_15_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_EqSubi1u16u16_1_13
         // Resource=bn_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:154:53
         assign bn_addr_gen_EqSubi1u16u16_1_13_out1 = {1'b0, oy_cnt} == {1'b0, oy_cnt_max} - 17'd000001;

         // rtl_instance:bn_addr_gen/bn_addr_gen_And_1Ux1U_1U_1_14
         // Resource=bn_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:154:35
         assign bn_addr_gen_And_1Ux1U_1U_1_14_out1 = bn_addr_gen_EqSubi1u16u16_1_13_out1 & bn_addr_gen_And_1Ux1U_1U_1_10_out1;

         // rtl_process:bn_addr_gen/drive_ox_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_ox_cnt
         // at: bn_addr_gen.h:140:39
         // at: bn_addr_gen.h:145:7
         // at: bn_addr_gen.h:149:7
         always @(posedge clk or negedge rstn)
          begin :drive_ox_cnt
            if (rstn == 1'b0) begin
               // op:_ox_counter/OP69
               ox_cnt <= 16'd00000;
            end
            else begin
               // op:_ox_counter/OP76
               ox_cnt <= bn_addr_gen_Muxi0u16u1_4_12_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_MuxAdd2i1u16u16u1_4
         always @(ox_cnt or bn_addr_gen_And_1Ux1U_1U_1_5_out1)
          begin :bn_addr_gen_MuxAdd2i1u16u16u1_4_11
            if (bn_addr_gen_And_1Ux1U_1U_1_5_out1) begin
               bn_addr_gen_MuxAdd2i1u16u16u1_4_11_out1 = ox_cnt + 16'd00001;
            end
            else begin
               bn_addr_gen_MuxAdd2i1u16u16u1_4_11_out1 = ox_cnt;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_Muxi0u16u1_4
         always @(bn_addr_gen_And_1Ux1U_1U_1_10_out1 or bn_addr_gen_MuxAdd2i1u16u16u1_4_11_out1)
          begin :bn_addr_gen_Muxi0u16u1_4_12
            if (bn_addr_gen_And_1Ux1U_1U_1_10_out1) begin
               bn_addr_gen_Muxi0u16u1_4_12_out1 = 16'd00000;
            end
            else begin
               bn_addr_gen_Muxi0u16u1_4_12_out1 = bn_addr_gen_MuxAdd2i1u16u16u1_4_11_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_EqSubi1u16u16_1_9
         // Resource=bn_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:140:53
         assign bn_addr_gen_EqSubi1u16u16_1_9_out1 = {1'b0, ox_cnt} == {1'b0, ox_cnt_max} - 17'd000001;

         // rtl_instance:bn_addr_gen/bn_addr_gen_And_1Ux1U_1U_1_10
         // Resource=bn_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:140:35
         assign bn_addr_gen_And_1Ux1U_1U_1_10_out1 = bn_addr_gen_EqSubi1u16u16_1_9_out1 & bn_addr_gen_And_1Ux1U_1U_1_5_out1;

         // rtl_process:bn_addr_gen/drive_valid_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_valid_cnt
         // at: bn_addr_gen.h:134:7
         // at: bn_addr_gen.h:130:7
         always @(posedge clk or negedge rstn)
          begin :drive_valid_cnt
            if (rstn == 1'b0) begin
               // op:_valid_counter/OP44
               valid_cnt <= 16'd00000;
            end
            else begin
               // op:_valid_counter/OP51
               valid_cnt <= bn_addr_gen_Muxi0u16u1_4_8_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_MuxAdd2i1u16u16u1_4
         always @(valid_cnt or bn_addr_gen_N_Mux_1_2_7_1_6_out1)
          begin :bn_addr_gen_MuxAdd2i1u16u16u1_4_7
            if (bn_addr_gen_N_Mux_1_2_7_1_6_out1) begin
               bn_addr_gen_MuxAdd2i1u16u16u1_4_7_out1 = valid_cnt + 16'd00001;
            end
            else begin
               bn_addr_gen_MuxAdd2i1u16u16u1_4_7_out1 = valid_cnt;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_Muxi0u16u1_4
         always @(bn_addr_gen_And_1Ux1U_1U_1_5_out1 or bn_addr_gen_MuxAdd2i1u16u16u1_4_7_out1)
          begin :bn_addr_gen_Muxi0u16u1_4_8
            if (bn_addr_gen_And_1Ux1U_1U_1_5_out1) begin
               bn_addr_gen_Muxi0u16u1_4_8_out1 = 16'd00000;
            end
            else begin
               bn_addr_gen_Muxi0u16u1_4_8_out1 = bn_addr_gen_MuxAdd2i1u16u16u1_4_7_out1;
            end
         end

         // rtl_instance:bn_addr_gen/bn_addr_gen_OrReduction_8U_1U_1_3
         // Resource=bn_addr_gen_OrReduction_8U_1U_1, Function=or : Inputs=8 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:116:8
         assign bn_addr_gen_OrReduction_8U_1U_1_3_out1 = (|conv_type);

         // rtl_instance:bn_addr_gen/bn_addr_gen_Eqi3u16_1_4
         // Resource=bn_addr_gen_Eqi3u16_1, Function=eq : Inputs=16 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:125:70
         assign bn_addr_gen_Eqi3u16_1_4_out1 = valid_cnt == 16'd00003;

         // rtl_instance:bn_addr_gen/bn_addr_gen_And_1Ux1U_1U_1_5
         // Resource=bn_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: bn_addr_gen.h:125:49
         assign bn_addr_gen_And_1Ux1U_1U_1_5_out1 = bn_addr_gen_Eqi3u16_1_4_out1 & bn_addr_gen_N_Mux_1_2_7_1_6_out1;

         // rtl_instance:bn_addr_gen/bn_addr_gen_N_Mux_1_2_7_1
         always @(data_en_7d or data_en_9d or bn_addr_gen_OrReduction_8U_1U_1_3_out1)
          begin :bn_addr_gen_N_Mux_1_2_7_1_6
            if (bn_addr_gen_OrReduction_8U_1U_1_3_out1) begin
               bn_addr_gen_N_Mux_1_2_7_1_6_out1 = data_en_9d;
            end
            else begin
               bn_addr_gen_N_Mux_1_2_7_1_6_out1 = data_en_7d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_7d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_7d
         // at: bn_addr_gen.h:119:25
         // at: bn_addr_gen.h:75:7
         // at: bn_addr_gen.h:95:7
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_7d
            if (rstn == 1'b0) begin
               // op:_delay/OP144
               data_en_7d <= 1'b0;
            end
            else begin
               // op:_delay/OP189
               data_en_7d <= data_en_6d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_9d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_9d
         // at: bn_addr_gen.h:122:25
         // at: bn_addr_gen.h:77:7
         // at: bn_addr_gen.h:97:7
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_9d
            if (rstn == 1'b0) begin
               // op:_delay/OP146
               data_en_9d <= 1'b0;
            end
            else begin
               // op:_delay/OP187
               data_en_9d <= data_en_8d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_1d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_1d
         // at: bn_addr_gen.h:69:7
         // at: bn_addr_gen.h:89:7
         // at: bn_addr_gen.h:90:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_1d
            if (rstn == 1'b0) begin
               // op:_delay/OP138
               data_en_1d <= 1'b0;
            end
            else begin
               // op:_delay/OP195
               data_en_1d <= data_en;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_2d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_2d
         // at: bn_addr_gen.h:70:7
         // at: bn_addr_gen.h:90:7
         // at: bn_addr_gen.h:91:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_2d
            if (rstn == 1'b0) begin
               // op:_delay/OP139
               data_en_2d <= 1'b0;
            end
            else begin
               // op:_delay/OP194
               data_en_2d <= data_en_1d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_3d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_3d
         // at: bn_addr_gen.h:71:7
         // at: bn_addr_gen.h:91:7
         // at: bn_addr_gen.h:92:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_3d
            if (rstn == 1'b0) begin
               // op:_delay/OP140
               data_en_3d <= 1'b0;
            end
            else begin
               // op:_delay/OP193
               data_en_3d <= data_en_2d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_4d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_4d
         // at: bn_addr_gen.h:72:7
         // at: bn_addr_gen.h:92:7
         // at: bn_addr_gen.h:93:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_4d
            if (rstn == 1'b0) begin
               // op:_delay/OP141
               data_en_4d <= 1'b0;
            end
            else begin
               // op:_delay/OP192
               data_en_4d <= data_en_3d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_5d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_5d
         // at: bn_addr_gen.h:73:7
         // at: bn_addr_gen.h:93:7
         // at: bn_addr_gen.h:94:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_5d
            if (rstn == 1'b0) begin
               // op:_delay/OP142
               data_en_5d <= 1'b0;
            end
            else begin
               // op:_delay/OP191
               data_en_5d <= data_en_4d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_6d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_6d
         // at: bn_addr_gen.h:74:7
         // at: bn_addr_gen.h:94:7
         // at: bn_addr_gen.h:95:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_6d
            if (rstn == 1'b0) begin
               // op:_delay/OP143
               data_en_6d <= 1'b0;
            end
            else begin
               // op:_delay/OP190
               data_en_6d <= data_en_5d;
            end
         end

         // rtl_process:bn_addr_gen/drive_data_en_8d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_data_en_8d
         // at: bn_addr_gen.h:76:7
         // at: bn_addr_gen.h:96:7
         // at: bn_addr_gen.h:97:20
         always @(posedge clk or negedge rstn)
          begin :drive_data_en_8d
            if (rstn == 1'b0) begin
               // op:_delay/OP145
               data_en_8d <= 1'b0;
            end
            else begin
               // op:_delay/OP188
               data_en_8d <= data_en_7d;
            end
         end


endmodule


