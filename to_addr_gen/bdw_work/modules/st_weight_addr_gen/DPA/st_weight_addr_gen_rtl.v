// Generated by stratus_hls 19.10-p100  (91500.011111)
// Fri Jan 22 11:58:26 2021
// from st_weight_addr_gen.cpp

`timescale 1ps / 1ps

      
module st_weight_addr_gen(clk, rstn, stop, start, start_rising, feature_width, feature_height, feature_channel, out_feature_width, out_feature_height, out_feature_channel, filter_width, filter_height, filter_channel, stride_x, stride_y, pad_top_size, pad_bottom_size, pad_left_size, pad_right_size, read_weight_base_addr, st_weight_addr, st_weight_addr_valid, st_weight_data_valid, cache_en);

      input clk;
      input rstn;
      input stop;
      input [7:0] start;
      input start_rising;
      input [15:0] feature_width;
      input [15:0] feature_height;
      input [15:0] feature_channel;
      input [15:0] out_feature_width;
      input [15:0] out_feature_height;
      input [15:0] out_feature_channel;
      input [15:0] filter_width;
      input [15:0] filter_height;
      input [15:0] filter_channel;
      input [7:0] stride_x;
      input [7:0] stride_y;
      input [7:0] pad_top_size;
      input [7:0] pad_bottom_size;
      input [7:0] pad_left_size;
      input [7:0] pad_right_size;
      input [31:0] read_weight_base_addr;
      output [31:0] st_weight_addr;
      reg [31:0] st_weight_addr;
      output st_weight_addr_valid;
      reg st_weight_addr_valid;
      output st_weight_data_valid;
      reg st_weight_data_valid;
      output cache_en;
      reg cache_en;
      /*signed*/wire[1:0] st_weight_addr_gen_AndReduction_2S_1U_1_42_in1;
      wire st_weight_addr_gen_AndReduction_2S_1U_4_41_out1;
      /*signed*/wire[1:0] st_weight_addr_gen_AndReduction_2S_1U_4_41_in1;
      wire st_weight_addr_gen_AndReduction_4S_1U_1_40_out1;
      /*signed*/wire[3:0] st_weight_addr_gen_AndReduction_4S_1U_1_40_in1;
      wire st_weight_addr_gen_And_1Ux1U_1U_4_48_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_4_47_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_4_46_out1;
      wire st_weight_addr_gen_AndReduction_2S_1U_1_42_out1;
      wire st_weight_addr_gen_Not_1U_1U_4_45_out1;
      wire st_weight_addr_gen_Nei1u16_4_44_out1;
      wire st_weight_addr_gen_Nei1u16_4_43_out1;
      wire st_weight_addr_gen_Or_1Ux1U_1U_4_49_out1;
      reg enable;
      wire st_weight_addr_gen_Not_1U_1U_4_14_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_4_15_out1;
      wire st_weight_addr_gen_EqSubi1u16u16_1_16_out1;
      reg[15:0] st_weight_addr_gen_MuxAdd2i1u16u16u1_4_18_out1;
      reg[15:0] st_weight_addr_gen_Muxi0u16u1_4_19_out1;
      wire st_weight_addr_gen_EqSubi1u16u16_1_20_out1;
      reg[15:0] st_weight_addr_gen_MuxAdd2i1u16u16u1_1_22_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_1_17_out1;
      reg[15:0] st_weight_addr_gen_Muxi0u16u1_4_23_out1;
      wire st_weight_addr_gen_EqSubi1u16u16_1_24_out1;
      reg[15:0] st_weight_addr_gen_MuxAdd2i1u16u16u1_1_26_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_1_21_out1;
      reg[15:0] st_weight_addr_gen_Muxi0u16u1_4_27_out1;
      wire st_weight_addr_gen_EqSubi1u16u16_1_28_out1;
      reg[15:0] st_weight_addr_gen_MuxAdd2i1u16u16u1_1_30_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_1_25_out1;
      reg[15:0] st_weight_addr_gen_Muxi0u16u1_4_31_out1;
      reg[15:0] ox_cnt;
      wire st_weight_addr_gen_EqSubi1u16u16_1_32_out1;
      reg[15:0] st_weight_addr_gen_MuxAdd2i1u16u16u1_1_34_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_1_29_out1;
      reg[15:0] st_weight_addr_gen_Muxi0u16u1_4_35_out1;
      reg[15:0] oy_cnt;
      wire st_weight_addr_gen_EqSubi32u16u16_1_36_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_1_37_out1;
      reg[15:0] st_weight_addr_gen_MuxAdd2i32u16u16u1_1_38_out1;
      wire st_weight_addr_gen_And_1Ux1U_1U_1_33_out1;
      reg[15:0] st_weight_addr_gen_Muxi0u16u1_4_39_out1;
      reg[15:0] ix_cnt;
      reg[15:0] iy_cnt;
      reg[15:0] if_cnt;
      reg[15:0] of_cnt;
      reg[15:0] ix_pos;
      reg[15:0] iy_pos;
      reg[15:0] if_pos;
      reg[10:0] of_pos_slice;
      wire[31:0] st_weight_addr_gen_Add_32Ux16U_32U_4_13_out1;
      wire[31:0] st_weight_addr_gen_Mul_16Ux16U_32U_1_12_out1;
      wire[31:0] st_weight_addr_gen_Mul_16Ux16U_32U_1_11_out1;
      wire[31:0] st_weight_addr_gen_Mul_16Ux16U_32U_1_10_out1;
      reg[31:0] org_if_pos;
      reg[31:0] org_of_pos;
      reg[31:0] org_ix_pos;
      reg[31:0] org_iy_pos;
      wire[31:0] st_weight_addr_gen_Add_32Ux32U_32U_1_8_out1;
      wire[31:0] st_weight_addr_gen_Add3u32u32u32_1_9_out1;
      reg[31:0] tmp_st_weight_addr;
      reg st_weight_addr_valid_4d;
      reg st_weight_addr_valid_3d;
      reg st_weight_addr_valid_2d;
      reg st_weight_addr_valid_1d;
      reg run_8d;
      reg run_7d;
      reg run_6d;
      reg run_5d;
      reg run_4d;
      reg run;
      reg run_1d;
      reg run_2d;
      reg run_9d;
      reg st_weight_addr_valid_5d;
      reg run_3d;
      reg run_10d;
      reg st_weight_addr_valid_6d;
      wire[15:0] st_weight_addr_gen_Mul_16Ux16U_16U_4_5_out1;
      reg[15:0] cnt_max;
      reg[15:0] of_cnt_max;
      reg[15:0] if_cnt_max;
      reg[15:0] iy_cnt_max;
      reg[15:0] ix_cnt_max;
      /*signed*/wire[15:0] st_weight_addr_gen_Add3u8u8Subu16u16_4_6_out1;
      /*signed*/wire[15:0] st_weight_addr_gen_Add3u8u8Subu16u16_4_7_out1;
      reg[15:0] st_weight_addr_gen_N_Mux_16_3_21_4_2_out1;
      wire[14:0] st_weight_addr_gen_N_Mux_16_3_21_4_2_in2;
      reg[15:0] ox_cnt_max;
      wire[13:0] st_weight_addr_gen_N_Mux_16_3_21_4_2_in3;
      reg[15:0] st_weight_addr_gen_N_Mux_16_3_21_4_1_out1;
      wire[14:0] st_weight_addr_gen_N_Mux_16_3_21_4_1_in2;
      reg[15:0] oy_cnt_max;
      wire[13:0] st_weight_addr_gen_N_Mux_16_3_21_4_1_in3;
      wire[15:0] st_weight_addr_gen_Add2i1u16_1_3_out1;
      reg[15:0] oy_cnt_max2;
      wire[15:0] st_weight_addr_gen_Add2i1u16_1_4_out1;
      reg[15:0] ox_cnt_max2;

         // rtl_process:st_weight_addr_gen/drive_ox_cnt_max2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_ox_cnt_max2
         // at: st_weight_addr_gen.h:380:7
         // at: st_weight_addr_gen.h:391:7
         // at: st_weight_addr_gen.h:179:56
         always @(posedge clk or negedge rstn)
          begin :drive_ox_cnt_max2
            if (rstn == 1'b0) begin
               // op:_cnt_max2/OP0
               ox_cnt_max2 <= 16'd00000;
            end
            else begin
               // op:_cnt_max2/OP11
               ox_cnt_max2 <= st_weight_addr_gen_Add2i1u16_1_4_out1;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_oy_cnt_max2
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_oy_cnt_max2
         // at: st_weight_addr_gen.h:381:7
         // at: st_weight_addr_gen.h:400:7
         // at: st_weight_addr_gen.h:195:56
         always @(posedge clk or negedge rstn)
          begin :drive_oy_cnt_max2
            if (rstn == 1'b0) begin
               // op:_cnt_max2/OP1
               oy_cnt_max2 <= 16'd00000;
            end
            else begin
               // op:_cnt_max2/OP8
               oy_cnt_max2 <= st_weight_addr_gen_Add2i1u16_1_3_out1;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_N_Mux_16_3_21_4_1_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_N_Mux_16_3_21_4_1_in3
         // at: st_weight_addr_gen.h:398:40
         assign st_weight_addr_gen_N_Mux_16_3_21_4_1_in3 = oy_cnt_max[15:2];

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_N_Mux_16_3_21_4_1_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_N_Mux_16_3_21_4_1_in2
         // at: st_weight_addr_gen.h:396:40
         assign st_weight_addr_gen_N_Mux_16_3_21_4_1_in2 = oy_cnt_max[15:1];

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_N_Mux_16_3_21_4
         always @(stride_y or oy_cnt_max or st_weight_addr_gen_N_Mux_16_3_21_4_1_in3 or st_weight_addr_gen_N_Mux_16_3_21_4_1_in2)
          begin :st_weight_addr_gen_N_Mux_16_3_21_4_1
            case (stride_y) 

               8'd002:                begin
                  st_weight_addr_gen_N_Mux_16_3_21_4_1_out1 = {1'b0, st_weight_addr_gen_N_Mux_16_3_21_4_1_in2};
               end
               
               8'd004:                begin
                  st_weight_addr_gen_N_Mux_16_3_21_4_1_out1 = {2'b00, st_weight_addr_gen_N_Mux_16_3_21_4_1_in3};
               end
               
               default:                begin
                  st_weight_addr_gen_N_Mux_16_3_21_4_1_out1 = oy_cnt_max;
               end
               
            endcase

         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_N_Mux_16_3_21_4_2_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_N_Mux_16_3_21_4_2_in3
         // at: st_weight_addr_gen.h:389:40
         assign st_weight_addr_gen_N_Mux_16_3_21_4_2_in3 = ox_cnt_max[15:2];

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_N_Mux_16_3_21_4_2_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_N_Mux_16_3_21_4_2_in2
         // at: st_weight_addr_gen.h:387:40
         assign st_weight_addr_gen_N_Mux_16_3_21_4_2_in2 = ox_cnt_max[15:1];

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_N_Mux_16_3_21_4
         always @(stride_x or ox_cnt_max or st_weight_addr_gen_N_Mux_16_3_21_4_2_in3 or st_weight_addr_gen_N_Mux_16_3_21_4_2_in2)
          begin :st_weight_addr_gen_N_Mux_16_3_21_4_2
            case (stride_x) 

               8'd002:                begin
                  st_weight_addr_gen_N_Mux_16_3_21_4_2_out1 = {1'b0, st_weight_addr_gen_N_Mux_16_3_21_4_2_in2};
               end
               
               8'd004:                begin
                  st_weight_addr_gen_N_Mux_16_3_21_4_2_out1 = {2'b00, st_weight_addr_gen_N_Mux_16_3_21_4_2_in3};
               end
               
               default:                begin
                  st_weight_addr_gen_N_Mux_16_3_21_4_2_out1 = ox_cnt_max;
               end
               
            endcase

         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add2i1u16_1_3
         // Resource=st_weight_addr_gen_Add2i1u16_1, Function=add : Inputs=16 Outputs=16
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:400:39
         assign st_weight_addr_gen_Add2i1u16_1_3_out1 = st_weight_addr_gen_N_Mux_16_3_21_4_1_out1 + 16'd00001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add2i1u16_1_4
         // Resource=st_weight_addr_gen_Add2i1u16_1, Function=add : Inputs=16 Outputs=16
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:391:39
         assign st_weight_addr_gen_Add2i1u16_1_4_out1 = st_weight_addr_gen_N_Mux_16_3_21_4_2_out1 + 16'd00001;

         // rtl_process:st_weight_addr_gen/drive_ox_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_ox_cnt_max
         // at: st_weight_addr_gen.h:391:21
         // at: st_weight_addr_gen.h:369:7
         always @(posedge clk)
          begin :drive_ox_cnt_max
            // op:_set_max_num/OP38
            ox_cnt_max <= st_weight_addr_gen_Add3u8u8Subu16u16_4_7_out1;
         end

         // rtl_process:st_weight_addr_gen/drive_oy_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_oy_cnt_max
         // at: st_weight_addr_gen.h:398:22
         // at: st_weight_addr_gen.h:371:7
         always @(posedge clk)
          begin :drive_oy_cnt_max
            // op:_set_max_num/OP36
            oy_cnt_max <= st_weight_addr_gen_Add3u8u8Subu16u16_4_6_out1;
         end

         // rtl_process:st_weight_addr_gen/drive_ix_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_ix_cnt_max
         // at: st_weight_addr_gen.h:365:7
         // at: st_weight_addr_gen.h:132:54
         always @(posedge clk)
          begin :drive_ix_cnt_max
            // op:_set_max_num/OP41
            ix_cnt_max <= filter_width;
         end

         // rtl_process:st_weight_addr_gen/drive_iy_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_iy_cnt_max
         // at: st_weight_addr_gen.h:366:7
         // at: st_weight_addr_gen.h:147:56
         always @(posedge clk)
          begin :drive_iy_cnt_max
            // op:_set_max_num/OP40
            iy_cnt_max <= filter_height;
         end

         // rtl_process:st_weight_addr_gen/drive_if_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_if_cnt_max
         // at: st_weight_addr_gen.h:367:9
         // at: st_weight_addr_gen.h:163:56
         always @(posedge clk)
          begin :drive_if_cnt_max
            // op:_set_max_num/OP39
            if_cnt_max <= filter_channel;
         end

         // rtl_process:st_weight_addr_gen/drive_of_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_of_cnt_max
         // at: st_weight_addr_gen.h:373:7
         // at: st_weight_addr_gen.h:215:56
         always @(posedge clk)
          begin :drive_of_cnt_max
            // op:_set_max_num/OP34
            of_cnt_max <= out_feature_channel;
         end

         // rtl_process:st_weight_addr_gen/drive_cnt_max
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_cnt_max
         // at: st_weight_addr_gen.h:374:7
         // at: st_weight_addr_gen.h:272:36
         always @(posedge clk)
          begin :drive_cnt_max
            // op:_set_max_num/OP33
            cnt_max <= st_weight_addr_gen_Mul_16Ux16U_16U_4_5_out1;
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Mul_16Ux16U_16U_4_5
         // Resource=st_weight_addr_gen_Mul_16Ux16U_16U_4, Function=mul : Inputs=16,16 Outputs=16
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:374:37
         assign st_weight_addr_gen_Mul_16Ux16U_16U_4_5_out1 = filter_width*filter_height;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add3u8u8Subu16u16_4_6
         // Resource=st_weight_addr_gen_Add3u8u8Subu16u16_4, Function=sub add add : Inputs=16,16,8,8 Outputs=16S
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:371:65
         assign st_weight_addr_gen_Add3u8u8Subu16u16_4_6_out1 = feature_height - filter_height + ({8'b00000000, pad_top_size} + {8'b00000000, pad_bottom_size});

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add3u8u8Subu16u16_4_7
         // Resource=st_weight_addr_gen_Add3u8u8Subu16u16_4, Function=sub add add : Inputs=16,16,8,8 Outputs=16S
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:369:63
         assign st_weight_addr_gen_Add3u8u8Subu16u16_4_7_out1 = feature_width - filter_width + ({8'b00000000, pad_left_size} + {8'b00000000, pad_right_size});

         // rtl_process:st_weight_addr_gen/drive_st_weight_data_valid
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_st_weight_data_valid
         // at: st_weight_addr_gen.h:356:7
         // at: st_weight_addr_gen.h:360:7
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_data_valid
            if (rstn == 1'b0) begin
               // op:_st_weight_data_valid/OP52
               st_weight_data_valid <= 1'd0;
            end
            else begin
               // op:_st_weight_data_valid/OP54
               st_weight_data_valid <= st_weight_addr_valid_6d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_cache_en
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_cache_en
         // at: st_weight_addr_gen.h:346:7
         // at: st_weight_addr_gen.h:350:7
         always @(posedge clk or negedge rstn)
          begin :drive_cache_en
            if (rstn == 1'b0) begin
               // op:_cache_en/OP55
               cache_en <= 1'd0;
            end
            else begin
               // op:_cache_en/OP57
               cache_en <= run_10d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_valid
         // at: st_weight_addr_gen.h:294:8
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid
            if (rstn == 1'b0) begin
               // op:_st_weight_addr_valid/OP58
               st_weight_addr_valid <= 1'd0;
            end
            else begin
               // op:_st_weight_addr_valid/OP60
               st_weight_addr_valid <= run_3d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid_6d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_st_weight_addr_valid_6d
         // at: st_weight_addr_gen.h:360:30
         // at: st_weight_addr_gen.h:312:7
         // at: st_weight_addr_gen.h:331:7
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid_6d
            if (rstn == 1'b0) begin
               // op:_delay/OP76
               st_weight_addr_valid_6d <= 1'd0;
            end
            else begin
               // op:_delay/OP112
               st_weight_addr_valid_6d <= st_weight_addr_valid_5d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_10d
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_run_10d
         // at: st_weight_addr_gen.h:350:18
         // at: st_weight_addr_gen.h:306:7
         // at: st_weight_addr_gen.h:325:7
         always @(posedge clk or negedge rstn)
          begin :drive_run_10d
            if (rstn == 1'b0) begin
               // op:_delay/OP70
               run_10d <= 1'b0;
            end
            else begin
               // op:_delay/OP118
               run_10d <= run_9d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_3d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_3d
         // at: st_weight_addr_gen.h:341:30
         // at: st_weight_addr_gen.h:299:7
         // at: st_weight_addr_gen.h:318:7
         always @(posedge clk or negedge rstn)
          begin :drive_run_3d
            if (rstn == 1'b0) begin
               // op:_delay/OP63
               run_3d <= 1'b0;
            end
            else begin
               // op:_delay/OP125
               run_3d <= run_2d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_1d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_1d
         // at: st_weight_addr_gen.h:297:7
         // at: st_weight_addr_gen.h:316:7
         // at: st_weight_addr_gen.h:317:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_1d
            if (rstn == 1'b0) begin
               // op:_delay/OP61
               run_1d <= 1'b0;
            end
            else begin
               // op:_delay/OP127
               run_1d <= run;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_2d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_2d
         // at: st_weight_addr_gen.h:298:7
         // at: st_weight_addr_gen.h:317:7
         // at: st_weight_addr_gen.h:318:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_2d
            if (rstn == 1'b0) begin
               // op:_delay/OP62
               run_2d <= 1'b0;
            end
            else begin
               // op:_delay/OP126
               run_2d <= run_1d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_4d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_4d
         // at: st_weight_addr_gen.h:300:7
         // at: st_weight_addr_gen.h:319:7
         // at: st_weight_addr_gen.h:320:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_4d
            if (rstn == 1'b0) begin
               // op:_delay/OP64
               run_4d <= 1'b0;
            end
            else begin
               // op:_delay/OP124
               run_4d <= run_3d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_5d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_5d
         // at: st_weight_addr_gen.h:301:7
         // at: st_weight_addr_gen.h:320:7
         // at: st_weight_addr_gen.h:321:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_5d
            if (rstn == 1'b0) begin
               // op:_delay/OP65
               run_5d <= 1'b0;
            end
            else begin
               // op:_delay/OP123
               run_5d <= run_4d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_6d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_6d
         // at: st_weight_addr_gen.h:302:7
         // at: st_weight_addr_gen.h:321:7
         // at: st_weight_addr_gen.h:322:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_6d
            if (rstn == 1'b0) begin
               // op:_delay/OP66
               run_6d <= 1'b0;
            end
            else begin
               // op:_delay/OP122
               run_6d <= run_5d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_7d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_7d
         // at: st_weight_addr_gen.h:303:7
         // at: st_weight_addr_gen.h:322:7
         // at: st_weight_addr_gen.h:323:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_7d
            if (rstn == 1'b0) begin
               // op:_delay/OP67
               run_7d <= 1'b0;
            end
            else begin
               // op:_delay/OP121
               run_7d <= run_6d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_8d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_8d
         // at: st_weight_addr_gen.h:304:7
         // at: st_weight_addr_gen.h:323:7
         // at: st_weight_addr_gen.h:324:16
         always @(posedge clk or negedge rstn)
          begin :drive_run_8d
            if (rstn == 1'b0) begin
               // op:_delay/OP68
               run_8d <= 1'b0;
            end
            else begin
               // op:_delay/OP120
               run_8d <= run_7d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_run_9d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_run_9d
         // at: st_weight_addr_gen.h:305:7
         // at: st_weight_addr_gen.h:324:7
         // at: st_weight_addr_gen.h:325:17
         always @(posedge clk or negedge rstn)
          begin :drive_run_9d
            if (rstn == 1'b0) begin
               // op:_delay/OP69
               run_9d <= 1'b0;
            end
            else begin
               // op:_delay/OP119
               run_9d <= run_8d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid_1d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_st_weight_addr_valid_1d
         // at: st_weight_addr_gen.h:307:7
         // at: st_weight_addr_gen.h:326:7
         // at: st_weight_addr_gen.h:327:33
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid_1d
            if (rstn == 1'b0) begin
               // op:_delay/OP71
               st_weight_addr_valid_1d <= 1'd0;
            end
            else begin
               // op:_delay/OP117
               st_weight_addr_valid_1d <= st_weight_addr_valid;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid_2d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_st_weight_addr_valid_2d
         // at: st_weight_addr_gen.h:308:7
         // at: st_weight_addr_gen.h:327:7
         // at: st_weight_addr_gen.h:328:33
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid_2d
            if (rstn == 1'b0) begin
               // op:_delay/OP72
               st_weight_addr_valid_2d <= 1'd0;
            end
            else begin
               // op:_delay/OP116
               st_weight_addr_valid_2d <= st_weight_addr_valid_1d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid_3d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_st_weight_addr_valid_3d
         // at: st_weight_addr_gen.h:309:7
         // at: st_weight_addr_gen.h:328:7
         // at: st_weight_addr_gen.h:329:33
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid_3d
            if (rstn == 1'b0) begin
               // op:_delay/OP73
               st_weight_addr_valid_3d <= 1'd0;
            end
            else begin
               // op:_delay/OP115
               st_weight_addr_valid_3d <= st_weight_addr_valid_2d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid_4d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_st_weight_addr_valid_4d
         // at: st_weight_addr_gen.h:310:7
         // at: st_weight_addr_gen.h:329:7
         // at: st_weight_addr_gen.h:330:33
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid_4d
            if (rstn == 1'b0) begin
               // op:_delay/OP74
               st_weight_addr_valid_4d <= 1'd0;
            end
            else begin
               // op:_delay/OP114
               st_weight_addr_valid_4d <= st_weight_addr_valid_3d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_valid_5d
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_st_weight_addr_valid_5d
         // at: st_weight_addr_gen.h:311:7
         // at: st_weight_addr_gen.h:330:7
         // at: st_weight_addr_gen.h:331:33
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr_valid_5d
            if (rstn == 1'b0) begin
               // op:_delay/OP75
               st_weight_addr_valid_5d <= 1'd0;
            end
            else begin
               // op:_delay/OP113
               st_weight_addr_valid_5d <= st_weight_addr_valid_4d;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_st_weight_addr
         // at: st_weight_addr_gen.h:289:7
         // at: st_weight_addr_gen.h:291:7
         always @(posedge clk or negedge rstn)
          begin :drive_st_weight_addr
            if (rstn == 1'b0) begin
               // op:_st_weight_addr/OP128
               st_weight_addr <= 32'd0000000000;
            end
            else begin
               // op:_st_weight_addr/OP130
               st_weight_addr <= tmp_st_weight_addr;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_tmp_st_weight_addr
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_tmp_st_weight_addr
         // at: st_weight_addr_gen.h:291:24
         // at: st_weight_addr_gen.h:280:7
         // at: st_weight_addr_gen.h:283:7
         always @(posedge clk or negedge rstn)
          begin :drive_tmp_st_weight_addr
            if (rstn == 1'b0) begin
               // op:_tmp_st_weight_addr/OP131
               tmp_st_weight_addr <= 32'd0000000000;
            end
            else begin
               // op:_tmp_st_weight_addr/OP138
               tmp_st_weight_addr <= st_weight_addr_gen_Add3u32u32u32_1_9_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add_32Ux32U_32U_1_8
         // Resource=st_weight_addr_gen_Add_32Ux32U_32U_1, Function=add : Inputs=32,32 Outputs=32
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:283:46
         assign st_weight_addr_gen_Add_32Ux32U_32U_1_8_out1 = org_ix_pos + org_iy_pos;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add3u32u32u32_1_9
         // Resource=st_weight_addr_gen_Add3u32u32u32_1, Function=add add : Inputs=32,32,32 Outputs=32
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:283:86
         assign st_weight_addr_gen_Add3u32u32u32_1_9_out1 = st_weight_addr_gen_Add_32Ux32U_32U_1_8_out1 + org_if_pos + org_of_pos;

         // rtl_process:st_weight_addr_gen/drive_org_of_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_org_of_pos
         // at: st_weight_addr_gen.h:283:88
         // at: st_weight_addr_gen.h:266:7
         // at: st_weight_addr_gen.h:272:7
         always @(posedge clk or negedge rstn)
          begin :drive_org_of_pos
            if (rstn == 1'b0) begin
               // op:_org_pos/OP147
               org_of_pos <= 32'd0000000000;
            end
            else begin
               // op:_org_pos/OP156
               org_of_pos <= st_weight_addr_gen_Mul_16Ux16U_32U_1_10_out1;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_org_if_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_org_if_pos
         // at: st_weight_addr_gen.h:283:68
         // at: st_weight_addr_gen.h:265:7
         // at: st_weight_addr_gen.h:271:7
         always @(posedge clk or negedge rstn)
          begin :drive_org_if_pos
            if (rstn == 1'b0) begin
               // op:_org_pos/OP146
               org_if_pos <= 32'd0000000000;
            end
            else begin
               // op:_org_pos/OP158
               org_if_pos <= st_weight_addr_gen_Mul_16Ux16U_32U_1_11_out1;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_org_iy_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_org_iy_pos
         // at: st_weight_addr_gen.h:283:48
         // at: st_weight_addr_gen.h:264:7
         // at: st_weight_addr_gen.h:270:7
         always @(posedge clk or negedge rstn)
          begin :drive_org_iy_pos
            if (rstn == 1'b0) begin
               // op:_org_pos/OP145
               org_iy_pos <= 32'd0000000000;
            end
            else begin
               // op:_org_pos/OP160
               org_iy_pos <= st_weight_addr_gen_Mul_16Ux16U_32U_1_12_out1;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_org_ix_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_org_ix_pos
         // at: st_weight_addr_gen.h:283:28
         // at: st_weight_addr_gen.h:263:7
         // at: st_weight_addr_gen.h:269:7
         always @(posedge clk or negedge rstn)
          begin :drive_org_ix_pos
            if (rstn == 1'b0) begin
               // op:_org_pos/OP144
               org_ix_pos <= 32'd0000000000;
            end
            else begin
               // op:_org_pos/OP162
               org_ix_pos <= st_weight_addr_gen_Add_32Ux16U_32U_4_13_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Mul_16Ux16U_32U_1_10
         // Resource=st_weight_addr_gen_Mul_16Ux16U_32U_1, Function=mul : Inputs=16,16 Outputs=32
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:272:34
         assign st_weight_addr_gen_Mul_16Ux16U_32U_1_10_out1 = {21'd0000000, of_pos_slice}*{16'b0000000000000000, cnt_max};

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Mul_16Ux16U_32U_1_11
         // Resource=st_weight_addr_gen_Mul_16Ux16U_32U_1, Function=mul : Inputs=16,16 Outputs=32
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:271:34
         assign st_weight_addr_gen_Mul_16Ux16U_32U_1_11_out1 = {16'b0000000000000000, if_pos}*{16'b0000000000000000, cnt_max};

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Mul_16Ux16U_32U_1_12
         // Resource=st_weight_addr_gen_Mul_16Ux16U_32U_1, Function=mul : Inputs=16,16 Outputs=32
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:270:34
         assign st_weight_addr_gen_Mul_16Ux16U_32U_1_12_out1 = {16'b0000000000000000, iy_pos}*{16'b0000000000000000, filter_width};

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Add_32Ux16U_32U_4_13
         // Resource=st_weight_addr_gen_Add_32Ux16U_32U_4, Function=add : Inputs=32,16 Outputs=32
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:269:34
         assign st_weight_addr_gen_Add_32Ux16U_32U_4_13_out1 = read_weight_base_addr + {16'b0000000000000000, ix_pos};

         // rtl_process:st_weight_addr_gen/drive_of_pos_slice
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_of_pos_slice
         // at: st_weight_addr_gen.h:272:20
         // at: st_weight_addr_gen.h:254:7
         // at: st_weight_addr_gen.h:257:7
         always @(posedge clk or negedge rstn)
          begin :drive_of_pos_slice
            if (rstn == 1'b0) begin
               // op:_of_pos/OP171
               of_pos_slice <= 11'd0000;
            end
            else begin
               // op:_of_pos/OP173
               of_pos_slice <= of_cnt[15:5];
            end
         end

         // rtl_process:st_weight_addr_gen/drive_if_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_if_pos
         // at: st_weight_addr_gen.h:271:20
         // at: st_weight_addr_gen.h:247:7
         // at: st_weight_addr_gen.h:249:7
         always @(posedge clk or negedge rstn)
          begin :drive_if_pos
            if (rstn == 1'b0) begin
               // op:_if_pos/OP174
               if_pos <= 16'd00000;
            end
            else begin
               // op:_if_pos/OP176
               if_pos <= if_cnt;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_iy_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_iy_pos
         // at: st_weight_addr_gen.h:270:20
         // at: st_weight_addr_gen.h:240:7
         // at: st_weight_addr_gen.h:242:7
         always @(posedge clk or negedge rstn)
          begin :drive_iy_pos
            if (rstn == 1'b0) begin
               // op:_iy_pos/OP177
               iy_pos <= 16'd00000;
            end
            else begin
               // op:_iy_pos/OP179
               iy_pos <= iy_cnt;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_ix_pos
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_ix_pos
         // at: st_weight_addr_gen.h:269:20
         // at: st_weight_addr_gen.h:233:7
         // at: st_weight_addr_gen.h:235:7
         always @(posedge clk or negedge rstn)
          begin :drive_ix_pos
            if (rstn == 1'b0) begin
               // op:_ix_pos/OP180
               ix_pos <= 16'd00000;
            end
            else begin
               // op:_ix_pos/OP182
               ix_pos <= ix_cnt;
            end
         end

         // rtl_process:st_weight_addr_gen/drive_of_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_of_cnt
         // at: st_weight_addr_gen.h:229:7
         // at: st_weight_addr_gen.h:222:7
         always @(posedge clk or negedge rstn)
          begin :drive_of_cnt
            if (rstn == 1'b0) begin
               // op:_of_counter/OP329
               of_cnt <= 16'd00000;
            end
            else begin
               // op:_of_counter/OP336
               of_cnt <= st_weight_addr_gen_Muxi0u16u1_4_39_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_MuxAdd2i32u16u16u1_1
         always @(of_cnt or st_weight_addr_gen_And_1Ux1U_1U_1_33_out1)
          begin :st_weight_addr_gen_MuxAdd2i32u16u16u1_1_38
            if (st_weight_addr_gen_And_1Ux1U_1U_1_33_out1) begin
               st_weight_addr_gen_MuxAdd2i32u16u16u1_1_38_out1 = of_cnt + 16'd00032;
            end
            else begin
               st_weight_addr_gen_MuxAdd2i32u16u16u1_1_38_out1 = of_cnt;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Muxi0u16u1_4
         always @(st_weight_addr_gen_And_1Ux1U_1U_1_37_out1 or st_weight_addr_gen_MuxAdd2i32u16u16u1_1_38_out1)
          begin :st_weight_addr_gen_Muxi0u16u1_4_39
            if (st_weight_addr_gen_And_1Ux1U_1U_1_37_out1) begin
               st_weight_addr_gen_Muxi0u16u1_4_39_out1 = 16'd00000;
            end
            else begin
               st_weight_addr_gen_Muxi0u16u1_4_39_out1 = st_weight_addr_gen_MuxAdd2i32u16u16u1_1_38_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_EqSubi32u16u16_1_36
         // Resource=st_weight_addr_gen_EqSubi32u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:215:53
         assign st_weight_addr_gen_EqSubi32u16u16_1_36_out1 = {1'b0, of_cnt} == {1'b0, of_cnt_max} - 17'd000032;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_1_37
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:215:35
         assign st_weight_addr_gen_And_1Ux1U_1U_1_37_out1 = st_weight_addr_gen_EqSubi32u16u16_1_36_out1 & st_weight_addr_gen_And_1Ux1U_1U_1_33_out1;

         // rtl_process:st_weight_addr_gen/drive_oy_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_oy_cnt
         // at: st_weight_addr_gen.h:195:39
         // at: st_weight_addr_gen.h:200:7
         // at: st_weight_addr_gen.h:205:7
         always @(posedge clk or negedge rstn)
          begin :drive_oy_cnt
            if (rstn == 1'b0) begin
               // op:_oy_counter/OP304
               oy_cnt <= 16'd00000;
            end
            else begin
               // op:_oy_counter/OP311
               oy_cnt <= st_weight_addr_gen_Muxi0u16u1_4_35_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_MuxAdd2i1u16u16u1_1
         always @(oy_cnt or st_weight_addr_gen_And_1Ux1U_1U_1_29_out1)
          begin :st_weight_addr_gen_MuxAdd2i1u16u16u1_1_34
            if (st_weight_addr_gen_And_1Ux1U_1U_1_29_out1) begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_34_out1 = oy_cnt + 16'd00001;
            end
            else begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_34_out1 = oy_cnt;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Muxi0u16u1_4
         always @(st_weight_addr_gen_And_1Ux1U_1U_1_33_out1 or st_weight_addr_gen_MuxAdd2i1u16u16u1_1_34_out1)
          begin :st_weight_addr_gen_Muxi0u16u1_4_35
            if (st_weight_addr_gen_And_1Ux1U_1U_1_33_out1) begin
               st_weight_addr_gen_Muxi0u16u1_4_35_out1 = 16'd00000;
            end
            else begin
               st_weight_addr_gen_Muxi0u16u1_4_35_out1 = st_weight_addr_gen_MuxAdd2i1u16u16u1_1_34_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_EqSubi1u16u16_1_32
         // Resource=st_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:195:53
         assign st_weight_addr_gen_EqSubi1u16u16_1_32_out1 = {1'b0, oy_cnt} == {1'b0, oy_cnt_max2} - 17'd000001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_1_33
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:195:35
         assign st_weight_addr_gen_And_1Ux1U_1U_1_33_out1 = st_weight_addr_gen_EqSubi1u16u16_1_32_out1 & st_weight_addr_gen_And_1Ux1U_1U_1_29_out1;

         // rtl_process:st_weight_addr_gen/drive_ox_cnt
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_ox_cnt
         // at: st_weight_addr_gen.h:179:39
         // at: st_weight_addr_gen.h:184:7
         // at: st_weight_addr_gen.h:189:7
         always @(posedge clk or negedge rstn)
          begin :drive_ox_cnt
            if (rstn == 1'b0) begin
               // op:_ox_counter/OP279
               ox_cnt <= 16'd00000;
            end
            else begin
               // op:_ox_counter/OP286
               ox_cnt <= st_weight_addr_gen_Muxi0u16u1_4_31_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_MuxAdd2i1u16u16u1_1
         always @(ox_cnt or st_weight_addr_gen_And_1Ux1U_1U_1_25_out1)
          begin :st_weight_addr_gen_MuxAdd2i1u16u16u1_1_30
            if (st_weight_addr_gen_And_1Ux1U_1U_1_25_out1) begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_30_out1 = ox_cnt + 16'd00001;
            end
            else begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_30_out1 = ox_cnt;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Muxi0u16u1_4
         always @(st_weight_addr_gen_And_1Ux1U_1U_1_29_out1 or st_weight_addr_gen_MuxAdd2i1u16u16u1_1_30_out1)
          begin :st_weight_addr_gen_Muxi0u16u1_4_31
            if (st_weight_addr_gen_And_1Ux1U_1U_1_29_out1) begin
               st_weight_addr_gen_Muxi0u16u1_4_31_out1 = 16'd00000;
            end
            else begin
               st_weight_addr_gen_Muxi0u16u1_4_31_out1 = st_weight_addr_gen_MuxAdd2i1u16u16u1_1_30_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_EqSubi1u16u16_1_28
         // Resource=st_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:179:53
         assign st_weight_addr_gen_EqSubi1u16u16_1_28_out1 = {1'b0, ox_cnt} == {1'b0, ox_cnt_max2} - 17'd000001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_1_29
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:179:35
         assign st_weight_addr_gen_And_1Ux1U_1U_1_29_out1 = st_weight_addr_gen_EqSubi1u16u16_1_28_out1 & st_weight_addr_gen_And_1Ux1U_1U_1_25_out1;

         // rtl_process:st_weight_addr_gen/drive_if_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_if_cnt
         // at: st_weight_addr_gen.h:173:7
         // at: st_weight_addr_gen.h:168:7
         always @(posedge clk or negedge rstn)
          begin :drive_if_cnt
            if (rstn == 1'b0) begin
               // op:_if_counter/OP254
               if_cnt <= 16'd00000;
            end
            else begin
               // op:_if_counter/OP261
               if_cnt <= st_weight_addr_gen_Muxi0u16u1_4_27_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_MuxAdd2i1u16u16u1_1
         always @(if_cnt or st_weight_addr_gen_And_1Ux1U_1U_1_21_out1)
          begin :st_weight_addr_gen_MuxAdd2i1u16u16u1_1_26
            if (st_weight_addr_gen_And_1Ux1U_1U_1_21_out1) begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_26_out1 = if_cnt + 16'd00001;
            end
            else begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_26_out1 = if_cnt;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Muxi0u16u1_4
         always @(st_weight_addr_gen_And_1Ux1U_1U_1_25_out1 or st_weight_addr_gen_MuxAdd2i1u16u16u1_1_26_out1)
          begin :st_weight_addr_gen_Muxi0u16u1_4_27
            if (st_weight_addr_gen_And_1Ux1U_1U_1_25_out1) begin
               st_weight_addr_gen_Muxi0u16u1_4_27_out1 = 16'd00000;
            end
            else begin
               st_weight_addr_gen_Muxi0u16u1_4_27_out1 = st_weight_addr_gen_MuxAdd2i1u16u16u1_1_26_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_EqSubi1u16u16_1_24
         // Resource=st_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:163:53
         assign st_weight_addr_gen_EqSubi1u16u16_1_24_out1 = {1'b0, if_cnt} == {1'b0, if_cnt_max} - 17'd000001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_1_25
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:163:35
         assign st_weight_addr_gen_And_1Ux1U_1U_1_25_out1 = st_weight_addr_gen_EqSubi1u16u16_1_24_out1 & st_weight_addr_gen_And_1Ux1U_1U_1_21_out1;

         // rtl_process:st_weight_addr_gen/drive_iy_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_iy_cnt
         // at: st_weight_addr_gen.h:158:7
         // at: st_weight_addr_gen.h:153:7
         always @(posedge clk or negedge rstn)
          begin :drive_iy_cnt
            if (rstn == 1'b0) begin
               // op:_iy_counter/OP229
               iy_cnt <= 16'd00000;
            end
            else begin
               // op:_iy_counter/OP236
               iy_cnt <= st_weight_addr_gen_Muxi0u16u1_4_23_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_MuxAdd2i1u16u16u1_1
         always @(iy_cnt or st_weight_addr_gen_And_1Ux1U_1U_1_17_out1)
          begin :st_weight_addr_gen_MuxAdd2i1u16u16u1_1_22
            if (st_weight_addr_gen_And_1Ux1U_1U_1_17_out1) begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_22_out1 = iy_cnt + 16'd00001;
            end
            else begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_1_22_out1 = iy_cnt;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Muxi0u16u1_4
         always @(st_weight_addr_gen_And_1Ux1U_1U_1_21_out1 or st_weight_addr_gen_MuxAdd2i1u16u16u1_1_22_out1)
          begin :st_weight_addr_gen_Muxi0u16u1_4_23
            if (st_weight_addr_gen_And_1Ux1U_1U_1_21_out1) begin
               st_weight_addr_gen_Muxi0u16u1_4_23_out1 = 16'd00000;
            end
            else begin
               st_weight_addr_gen_Muxi0u16u1_4_23_out1 = st_weight_addr_gen_MuxAdd2i1u16u16u1_1_22_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_EqSubi1u16u16_1_20
         // Resource=st_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:147:53
         assign st_weight_addr_gen_EqSubi1u16u16_1_20_out1 = {1'b0, iy_cnt} == {1'b0, iy_cnt_max} - 17'd000001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_1_21
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:147:35
         assign st_weight_addr_gen_And_1Ux1U_1U_1_21_out1 = st_weight_addr_gen_EqSubi1u16u16_1_20_out1 & st_weight_addr_gen_And_1Ux1U_1U_1_17_out1;

         // rtl_process:st_weight_addr_gen/drive_ix_cnt
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_ix_cnt
         // at: st_weight_addr_gen.h:142:7
         // at: st_weight_addr_gen.h:137:7
         always @(posedge clk or negedge rstn)
          begin :drive_ix_cnt
            if (rstn == 1'b0) begin
               // op:_ix_counter/OP204
               ix_cnt <= 16'd00000;
            end
            else begin
               // op:_ix_counter/OP211
               ix_cnt <= st_weight_addr_gen_Muxi0u16u1_4_19_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_MuxAdd2i1u16u16u1_4
         always @(run or ix_cnt)
          begin :st_weight_addr_gen_MuxAdd2i1u16u16u1_4_18
            if (run) begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_4_18_out1 = ix_cnt + 16'd00001;
            end
            else begin
               st_weight_addr_gen_MuxAdd2i1u16u16u1_4_18_out1 = ix_cnt;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Muxi0u16u1_4
         always @(st_weight_addr_gen_And_1Ux1U_1U_1_17_out1 or st_weight_addr_gen_MuxAdd2i1u16u16u1_4_18_out1)
          begin :st_weight_addr_gen_Muxi0u16u1_4_19
            if (st_weight_addr_gen_And_1Ux1U_1U_1_17_out1) begin
               st_weight_addr_gen_Muxi0u16u1_4_19_out1 = 16'd00000;
            end
            else begin
               st_weight_addr_gen_Muxi0u16u1_4_19_out1 = st_weight_addr_gen_MuxAdd2i1u16u16u1_4_18_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_EqSubi1u16u16_1_16
         // Resource=st_weight_addr_gen_EqSubi1u16u16_1, Function=sub eq : Inputs=16,16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:132:51
         assign st_weight_addr_gen_EqSubi1u16u16_1_16_out1 = {1'b0, ix_cnt} == {1'b0, ix_cnt_max} - 17'd000001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_1_17
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:132:34
         assign st_weight_addr_gen_And_1Ux1U_1U_1_17_out1 = st_weight_addr_gen_EqSubi1u16u16_1_16_out1 & run;

         // rtl_process:st_weight_addr_gen/drive_run
         // Sharing or Control mux
         // Sharing/Controlling 6 operation(s) on drive_run
         // at: st_weight_addr_gen.h:131:5
         // at: st_weight_addr_gen.h:141:14
         // at: st_weight_addr_gen.h:316:16
         // at: st_weight_addr_gen.h:122:7
         // at: st_weight_addr_gen.h:126:7
         // at: st_weight_addr_gen.h:131:17
         always @(posedge clk or negedge rstn)
          begin :drive_run
            if (rstn == 1'b0) begin
               // op:_run/OP183
               run <= 1'b0;
            end
            else begin
               // op:_run/OP188
               run <= st_weight_addr_gen_And_1Ux1U_1U_4_15_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Not_1U_1U_4_14
         // Resource=st_weight_addr_gen_Not_1U_1U_4, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:123:10
         assign st_weight_addr_gen_Not_1U_1U_4_14_out1 = !stop;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_4_15
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:123:10
         assign st_weight_addr_gen_And_1Ux1U_1U_4_15_out1 = st_weight_addr_gen_Not_1U_1U_4_14_out1 & enable;

         // rtl_process:st_weight_addr_gen/drive_enable
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_enable
         // at: st_weight_addr_gen.h:126:13
         // at: st_weight_addr_gen.h:111:7
         // at: st_weight_addr_gen.h:116:7
         always @(posedge clk or negedge rstn)
          begin :drive_enable
            if (rstn == 1'b0) begin
               // op:_enable/OP355
               enable <= 1'b0;
            end
            else begin
               // op:_enable/OP369
               enable <= st_weight_addr_gen_Or_1Ux1U_1U_4_49_out1;
            end
         end

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Nei1u16_4_43
         // Resource=st_weight_addr_gen_Nei1u16_4, Function=ne : Inputs=16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:113:92
         assign st_weight_addr_gen_Nei1u16_4_43_out1 = filter_width != 16'd00001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Nei1u16_4_44
         // Resource=st_weight_addr_gen_Nei1u16_4, Function=ne : Inputs=16 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:113:64
         assign st_weight_addr_gen_Nei1u16_4_44_out1 = filter_height != 16'd00001;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Not_1U_1U_4_45
         // Resource=st_weight_addr_gen_Not_1U_1U_4, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:115:10
         assign st_weight_addr_gen_Not_1U_1U_4_45_out1 = !st_weight_addr_gen_AndReduction_2S_1U_1_42_out1;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_4_46
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:113:69
         assign st_weight_addr_gen_And_1Ux1U_1U_4_46_out1 = st_weight_addr_gen_Nei1u16_4_44_out1 & st_weight_addr_gen_Nei1u16_4_43_out1;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_4_47
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:115:10
         assign st_weight_addr_gen_And_1Ux1U_1U_4_47_out1 = st_weight_addr_gen_Not_1U_1U_4_45_out1 & enable;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_And_1Ux1U_1U_4_48
         // Resource=st_weight_addr_gen_And_1Ux1U_1U_4, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:113:39
         assign st_weight_addr_gen_And_1Ux1U_1U_4_48_out1 = st_weight_addr_gen_And_1Ux1U_1U_4_46_out1 & start_rising;

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_Or_1Ux1U_1U_4_49
         // Resource=st_weight_addr_gen_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:113:10
         assign st_weight_addr_gen_Or_1Ux1U_1U_4_49_out1 = st_weight_addr_gen_And_1Ux1U_1U_4_48_out1 | st_weight_addr_gen_And_1Ux1U_1U_4_47_out1;

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_AndReduction_4S_1U_1_40_in1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_AndReduction_4S_1U_1_40_in1
         // at: st_weight_addr_gen.h:106:106
         assign st_weight_addr_gen_AndReduction_4S_1U_1_40_in1 = {{st_weight_addr_gen_And_1Ux1U_1U_1_25_out1, st_weight_addr_gen_And_1Ux1U_1U_1_29_out1}, {st_weight_addr_gen_And_1Ux1U_1U_1_33_out1, st_weight_addr_gen_And_1Ux1U_1U_1_37_out1}};

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_AndReduction_4S_1U_1_40
         // Resource=st_weight_addr_gen_AndReduction_4S_1U_1, Function=and : Inputs=4S Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:106:106
         assign st_weight_addr_gen_AndReduction_4S_1U_1_40_out1 = (&st_weight_addr_gen_AndReduction_4S_1U_1_40_in1);

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_AndReduction_2S_1U_4_41_in1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_AndReduction_2S_1U_4_41_in1
         // at: st_weight_addr_gen.h:106:106
         assign st_weight_addr_gen_AndReduction_2S_1U_4_41_in1 = {st_weight_addr_gen_And_1Ux1U_1U_1_17_out1, st_weight_addr_gen_And_1Ux1U_1U_1_21_out1};

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_AndReduction_2S_1U_4_41
         // Resource=st_weight_addr_gen_AndReduction_2S_1U_4, Function=and : Inputs=2S Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:106:106
         assign st_weight_addr_gen_AndReduction_2S_1U_4_41_out1 = (&st_weight_addr_gen_AndReduction_2S_1U_4_41_in1);

         // rtl_process:st_weight_addr_gen/drive_st_weight_addr_gen_AndReduction_2S_1U_1_42_in1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_st_weight_addr_gen_AndReduction_2S_1U_1_42_in1
         // at: st_weight_addr_gen.h:106:106
         assign st_weight_addr_gen_AndReduction_2S_1U_1_42_in1 = {st_weight_addr_gen_AndReduction_2S_1U_4_41_out1, st_weight_addr_gen_AndReduction_4S_1U_1_40_out1};

         // rtl_instance:st_weight_addr_gen/st_weight_addr_gen_AndReduction_2S_1U_1_42
         // Resource=st_weight_addr_gen_AndReduction_2S_1U_1, Function=and : Inputs=2S Outputs=1
         // Implements 1 operation(s)
         // at: st_weight_addr_gen.h:106:106
         assign st_weight_addr_gen_AndReduction_2S_1U_1_42_out1 = (&st_weight_addr_gen_AndReduction_2S_1U_1_42_in1);


endmodule


